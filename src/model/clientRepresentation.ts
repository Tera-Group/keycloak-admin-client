/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ProtocolMapperRepresentation } from './protocolMapperRepresentation';
import { ResourceServerRepresentation } from './resourceServerRepresentation';

export class ClientRepresentation {
  'access'?: { [key: string]: any };
  'adminUrl'?: string;
  'alwaysDisplayInConsole'?: boolean;
  'attributes'?: { [key: string]: any };
  'authenticationFlowBindingOverrides'?: { [key: string]: any };
  'authorizationServicesEnabled'?: boolean;
  'authorizationSettings'?: ResourceServerRepresentation;
  'baseUrl'?: string;
  'bearerOnly'?: boolean;
  'clientAuthenticatorType'?: string;
  'clientId'?: string;
  'consentRequired'?: boolean;
  'defaultClientScopes'?: Array<string>;
  'description'?: string;
  'directAccessGrantsEnabled'?: boolean;
  'enabled'?: boolean;
  'frontchannelLogout'?: boolean;
  'fullScopeAllowed'?: boolean;
  'id'?: string;
  'implicitFlowEnabled'?: boolean;
  'name'?: string;
  'nodeReRegistrationTimeout'?: number;
  'notBefore'?: number;
  'oauth2DeviceAuthorizationGrantEnabled'?: boolean;
  'optionalClientScopes'?: Array<string>;
  'origin'?: string;
  'protocol'?: string;
  'protocolMappers'?: Array<ProtocolMapperRepresentation>;
  'publicClient'?: boolean;
  'redirectUris'?: Array<string>;
  'registeredNodes'?: { [key: string]: any };
  'registrationAccessToken'?: string;
  'rootUrl'?: string;
  'secret'?: string;
  'serviceAccountsEnabled'?: boolean;
  'standardFlowEnabled'?: boolean;
  'surrogateAuthRequired'?: boolean;
  'webOrigins'?: Array<string>;

  static discriminator: string | undefined = undefined;

  static attributeTypeMap: Array<{
    name: string;
    baseName: string;
    type: string;
  }> = [
    {
      name: 'access',
      baseName: 'access',
      type: '{ [key: string]: any; }',
    },
    {
      name: 'adminUrl',
      baseName: 'adminUrl',
      type: 'string',
    },
    {
      name: 'alwaysDisplayInConsole',
      baseName: 'alwaysDisplayInConsole',
      type: 'boolean',
    },
    {
      name: 'attributes',
      baseName: 'attributes',
      type: '{ [key: string]: any; }',
    },
    {
      name: 'authenticationFlowBindingOverrides',
      baseName: 'authenticationFlowBindingOverrides',
      type: '{ [key: string]: any; }',
    },
    {
      name: 'authorizationServicesEnabled',
      baseName: 'authorizationServicesEnabled',
      type: 'boolean',
    },
    {
      name: 'authorizationSettings',
      baseName: 'authorizationSettings',
      type: 'ResourceServerRepresentation',
    },
    {
      name: 'baseUrl',
      baseName: 'baseUrl',
      type: 'string',
    },
    {
      name: 'bearerOnly',
      baseName: 'bearerOnly',
      type: 'boolean',
    },
    {
      name: 'clientAuthenticatorType',
      baseName: 'clientAuthenticatorType',
      type: 'string',
    },
    {
      name: 'clientId',
      baseName: 'clientId',
      type: 'string',
    },
    {
      name: 'consentRequired',
      baseName: 'consentRequired',
      type: 'boolean',
    },
    {
      name: 'defaultClientScopes',
      baseName: 'defaultClientScopes',
      type: 'Array<string>',
    },
    {
      name: 'description',
      baseName: 'description',
      type: 'string',
    },
    {
      name: 'directAccessGrantsEnabled',
      baseName: 'directAccessGrantsEnabled',
      type: 'boolean',
    },
    {
      name: 'enabled',
      baseName: 'enabled',
      type: 'boolean',
    },
    {
      name: 'frontchannelLogout',
      baseName: 'frontchannelLogout',
      type: 'boolean',
    },
    {
      name: 'fullScopeAllowed',
      baseName: 'fullScopeAllowed',
      type: 'boolean',
    },
    {
      name: 'id',
      baseName: 'id',
      type: 'string',
    },
    {
      name: 'implicitFlowEnabled',
      baseName: 'implicitFlowEnabled',
      type: 'boolean',
    },
    {
      name: 'name',
      baseName: 'name',
      type: 'string',
    },
    {
      name: 'nodeReRegistrationTimeout',
      baseName: 'nodeReRegistrationTimeout',
      type: 'number',
    },
    {
      name: 'notBefore',
      baseName: 'notBefore',
      type: 'number',
    },
    {
      name: 'oauth2DeviceAuthorizationGrantEnabled',
      baseName: 'oauth2DeviceAuthorizationGrantEnabled',
      type: 'boolean',
    },
    {
      name: 'optionalClientScopes',
      baseName: 'optionalClientScopes',
      type: 'Array<string>',
    },
    {
      name: 'origin',
      baseName: 'origin',
      type: 'string',
    },
    {
      name: 'protocol',
      baseName: 'protocol',
      type: 'string',
    },
    {
      name: 'protocolMappers',
      baseName: 'protocolMappers',
      type: 'Array<ProtocolMapperRepresentation>',
    },
    {
      name: 'publicClient',
      baseName: 'publicClient',
      type: 'boolean',
    },
    {
      name: 'redirectUris',
      baseName: 'redirectUris',
      type: 'Array<string>',
    },
    {
      name: 'registeredNodes',
      baseName: 'registeredNodes',
      type: '{ [key: string]: any; }',
    },
    {
      name: 'registrationAccessToken',
      baseName: 'registrationAccessToken',
      type: 'string',
    },
    {
      name: 'rootUrl',
      baseName: 'rootUrl',
      type: 'string',
    },
    {
      name: 'secret',
      baseName: 'secret',
      type: 'string',
    },
    {
      name: 'serviceAccountsEnabled',
      baseName: 'serviceAccountsEnabled',
      type: 'boolean',
    },
    {
      name: 'standardFlowEnabled',
      baseName: 'standardFlowEnabled',
      type: 'boolean',
    },
    {
      name: 'surrogateAuthRequired',
      baseName: 'surrogateAuthRequired',
      type: 'boolean',
    },
    {
      name: 'webOrigins',
      baseName: 'webOrigins',
      type: 'Array<string>',
    },
  ];

  static getAttributeTypeMap() {
    return ClientRepresentation.attributeTypeMap;
  }
}
