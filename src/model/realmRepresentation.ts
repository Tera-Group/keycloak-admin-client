/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { AuthenticationFlowRepresentation } from './authenticationFlowRepresentation';
import { AuthenticatorConfigRepresentation } from './authenticatorConfigRepresentation';
import { ClientRepresentation } from './clientRepresentation';
import { ClientScopeRepresentation } from './clientScopeRepresentation';
import { GroupRepresentation } from './groupRepresentation';
import { IdentityProviderMapperRepresentation } from './identityProviderMapperRepresentation';
import { IdentityProviderRepresentation } from './identityProviderRepresentation';
import { JsonNode } from './jsonNode';
import { MultivaluedHashMap } from './multivaluedHashMap';
import { ProtocolMapperRepresentation } from './protocolMapperRepresentation';
import { RequiredActionProviderRepresentation } from './requiredActionProviderRepresentation';
import { RoleRepresentation } from './roleRepresentation';
import { RolesRepresentation } from './rolesRepresentation';
import { ScopeMappingRepresentation } from './scopeMappingRepresentation';
import { UserFederationMapperRepresentation } from './userFederationMapperRepresentation';
import { UserFederationProviderRepresentation } from './userFederationProviderRepresentation';
import { UserRepresentation } from './userRepresentation';

export class RealmRepresentation {
  'accessCodeLifespan'?: number;
  'accessCodeLifespanLogin'?: number;
  'accessCodeLifespanUserAction'?: number;
  'accessTokenLifespan'?: number;
  'accessTokenLifespanForImplicitFlow'?: number;
  'accountTheme'?: string;
  'actionTokenGeneratedByAdminLifespan'?: number;
  'actionTokenGeneratedByUserLifespan'?: number;
  'adminEventsDetailsEnabled'?: boolean;
  'adminEventsEnabled'?: boolean;
  'adminTheme'?: string;
  'attributes'?: { [key: string]: any };
  'authenticationFlows'?: Array<AuthenticationFlowRepresentation>;
  'authenticatorConfig'?: Array<AuthenticatorConfigRepresentation>;
  'browserFlow'?: string;
  'browserSecurityHeaders'?: { [key: string]: any };
  'bruteForceProtected'?: boolean;
  'clientAuthenticationFlow'?: string;
  'clientOfflineSessionIdleTimeout'?: number;
  'clientOfflineSessionMaxLifespan'?: number;
  'clientPolicies'?: JsonNode;
  'clientProfiles'?: JsonNode;
  'clientScopeMappings'?: { [key: string]: any };
  'clientScopes'?: Array<ClientScopeRepresentation>;
  'clientSessionIdleTimeout'?: number;
  'clientSessionMaxLifespan'?: number;
  'clients'?: Array<ClientRepresentation>;
  'components'?: MultivaluedHashMap;
  'defaultDefaultClientScopes'?: Array<string>;
  'defaultGroups'?: Array<string>;
  'defaultLocale'?: string;
  'defaultOptionalClientScopes'?: Array<string>;
  'defaultRole'?: RoleRepresentation;
  'defaultSignatureAlgorithm'?: string;
  'directGrantFlow'?: string;
  'displayName'?: string;
  'displayNameHtml'?: string;
  'dockerAuthenticationFlow'?: string;
  'duplicateEmailsAllowed'?: boolean;
  'editUsernameAllowed'?: boolean;
  'emailTheme'?: string;
  'enabled'?: boolean;
  'enabledEventTypes'?: Array<string>;
  'eventsEnabled'?: boolean;
  'eventsExpiration'?: number;
  'eventsListeners'?: Array<string>;
  'failureFactor'?: number;
  'federatedUsers'?: Array<UserRepresentation>;
  'groups'?: Array<GroupRepresentation>;
  'id'?: string;
  'identityProviderMappers'?: Array<IdentityProviderMapperRepresentation>;
  'identityProviders'?: Array<IdentityProviderRepresentation>;
  'internationalizationEnabled'?: boolean;
  'keycloakVersion'?: string;
  'loginTheme'?: string;
  'loginWithEmailAllowed'?: boolean;
  'maxDeltaTimeSeconds'?: number;
  'maxFailureWaitSeconds'?: number;
  'minimumQuickLoginWaitSeconds'?: number;
  'notBefore'?: number;
  'oAuth2DeviceCodeLifespan'?: number;
  'oAuth2DevicePollingInterval'?: number;
  'oauth2DeviceCodeLifespan'?: number;
  'oauth2DevicePollingInterval'?: number;
  'offlineSessionIdleTimeout'?: number;
  'offlineSessionMaxLifespan'?: number;
  'offlineSessionMaxLifespanEnabled'?: boolean;
  'otpPolicyAlgorithm'?: string;
  'otpPolicyDigits'?: number;
  'otpPolicyInitialCounter'?: number;
  'otpPolicyLookAheadWindow'?: number;
  'otpPolicyPeriod'?: number;
  'otpPolicyType'?: string;
  'otpSupportedApplications'?: Array<string>;
  'passwordPolicy'?: string;
  'permanentLockout'?: boolean;
  'protocolMappers'?: Array<ProtocolMapperRepresentation>;
  'quickLoginCheckMilliSeconds'?: number;
  'realm'?: string;
  'refreshTokenMaxReuse'?: number;
  'registrationAllowed'?: boolean;
  'registrationEmailAsUsername'?: boolean;
  'registrationFlow'?: string;
  'rememberMe'?: boolean;
  'requiredActions'?: Array<RequiredActionProviderRepresentation>;
  'resetCredentialsFlow'?: string;
  'resetPasswordAllowed'?: boolean;
  'revokeRefreshToken'?: boolean;
  'roles'?: RolesRepresentation;
  'scopeMappings'?: Array<ScopeMappingRepresentation>;
  'smtpServer'?: { [key: string]: any };
  'sslRequired'?: string;
  'ssoSessionIdleTimeout'?: number;
  'ssoSessionIdleTimeoutRememberMe'?: number;
  'ssoSessionMaxLifespan'?: number;
  'ssoSessionMaxLifespanRememberMe'?: number;
  'supportedLocales'?: Array<string>;
  'userFederationMappers'?: Array<UserFederationMapperRepresentation>;
  'userFederationProviders'?: Array<UserFederationProviderRepresentation>;
  'userManagedAccessAllowed'?: boolean;
  'users'?: Array<UserRepresentation>;
  'verifyEmail'?: boolean;
  'waitIncrementSeconds'?: number;
  'webAuthnPolicyAcceptableAaguids'?: Array<string>;
  'webAuthnPolicyAttestationConveyancePreference'?: string;
  'webAuthnPolicyAuthenticatorAttachment'?: string;
  'webAuthnPolicyAvoidSameAuthenticatorRegister'?: boolean;
  'webAuthnPolicyCreateTimeout'?: number;
  'webAuthnPolicyPasswordlessAcceptableAaguids'?: Array<string>;
  'webAuthnPolicyPasswordlessAttestationConveyancePreference'?: string;
  'webAuthnPolicyPasswordlessAuthenticatorAttachment'?: string;
  'webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister'?: boolean;
  'webAuthnPolicyPasswordlessCreateTimeout'?: number;
  'webAuthnPolicyPasswordlessRequireResidentKey'?: string;
  'webAuthnPolicyPasswordlessRpEntityName'?: string;
  'webAuthnPolicyPasswordlessRpId'?: string;
  'webAuthnPolicyPasswordlessSignatureAlgorithms'?: Array<string>;
  'webAuthnPolicyPasswordlessUserVerificationRequirement'?: string;
  'webAuthnPolicyRequireResidentKey'?: string;
  'webAuthnPolicyRpEntityName'?: string;
  'webAuthnPolicyRpId'?: string;
  'webAuthnPolicySignatureAlgorithms'?: Array<string>;
  'webAuthnPolicyUserVerificationRequirement'?: string;

  static discriminator: string | undefined = undefined;

  static attributeTypeMap: Array<{
    name: string;
    baseName: string;
    type: string;
  }> = [
    {
      name: 'accessCodeLifespan',
      baseName: 'accessCodeLifespan',
      type: 'number',
    },
    {
      name: 'accessCodeLifespanLogin',
      baseName: 'accessCodeLifespanLogin',
      type: 'number',
    },
    {
      name: 'accessCodeLifespanUserAction',
      baseName: 'accessCodeLifespanUserAction',
      type: 'number',
    },
    {
      name: 'accessTokenLifespan',
      baseName: 'accessTokenLifespan',
      type: 'number',
    },
    {
      name: 'accessTokenLifespanForImplicitFlow',
      baseName: 'accessTokenLifespanForImplicitFlow',
      type: 'number',
    },
    {
      name: 'accountTheme',
      baseName: 'accountTheme',
      type: 'string',
    },
    {
      name: 'actionTokenGeneratedByAdminLifespan',
      baseName: 'actionTokenGeneratedByAdminLifespan',
      type: 'number',
    },
    {
      name: 'actionTokenGeneratedByUserLifespan',
      baseName: 'actionTokenGeneratedByUserLifespan',
      type: 'number',
    },
    {
      name: 'adminEventsDetailsEnabled',
      baseName: 'adminEventsDetailsEnabled',
      type: 'boolean',
    },
    {
      name: 'adminEventsEnabled',
      baseName: 'adminEventsEnabled',
      type: 'boolean',
    },
    {
      name: 'adminTheme',
      baseName: 'adminTheme',
      type: 'string',
    },
    {
      name: 'attributes',
      baseName: 'attributes',
      type: '{ [key: string]: any; }',
    },
    {
      name: 'authenticationFlows',
      baseName: 'authenticationFlows',
      type: 'Array<AuthenticationFlowRepresentation>',
    },
    {
      name: 'authenticatorConfig',
      baseName: 'authenticatorConfig',
      type: 'Array<AuthenticatorConfigRepresentation>',
    },
    {
      name: 'browserFlow',
      baseName: 'browserFlow',
      type: 'string',
    },
    {
      name: 'browserSecurityHeaders',
      baseName: 'browserSecurityHeaders',
      type: '{ [key: string]: any; }',
    },
    {
      name: 'bruteForceProtected',
      baseName: 'bruteForceProtected',
      type: 'boolean',
    },
    {
      name: 'clientAuthenticationFlow',
      baseName: 'clientAuthenticationFlow',
      type: 'string',
    },
    {
      name: 'clientOfflineSessionIdleTimeout',
      baseName: 'clientOfflineSessionIdleTimeout',
      type: 'number',
    },
    {
      name: 'clientOfflineSessionMaxLifespan',
      baseName: 'clientOfflineSessionMaxLifespan',
      type: 'number',
    },
    {
      name: 'clientPolicies',
      baseName: 'clientPolicies',
      type: 'JsonNode',
    },
    {
      name: 'clientProfiles',
      baseName: 'clientProfiles',
      type: 'JsonNode',
    },
    {
      name: 'clientScopeMappings',
      baseName: 'clientScopeMappings',
      type: '{ [key: string]: any; }',
    },
    {
      name: 'clientScopes',
      baseName: 'clientScopes',
      type: 'Array<ClientScopeRepresentation>',
    },
    {
      name: 'clientSessionIdleTimeout',
      baseName: 'clientSessionIdleTimeout',
      type: 'number',
    },
    {
      name: 'clientSessionMaxLifespan',
      baseName: 'clientSessionMaxLifespan',
      type: 'number',
    },
    {
      name: 'clients',
      baseName: 'clients',
      type: 'Array<ClientRepresentation>',
    },
    {
      name: 'components',
      baseName: 'components',
      type: 'MultivaluedHashMap',
    },
    {
      name: 'defaultDefaultClientScopes',
      baseName: 'defaultDefaultClientScopes',
      type: 'Array<string>',
    },
    {
      name: 'defaultGroups',
      baseName: 'defaultGroups',
      type: 'Array<string>',
    },
    {
      name: 'defaultLocale',
      baseName: 'defaultLocale',
      type: 'string',
    },
    {
      name: 'defaultOptionalClientScopes',
      baseName: 'defaultOptionalClientScopes',
      type: 'Array<string>',
    },
    {
      name: 'defaultRole',
      baseName: 'defaultRole',
      type: 'RoleRepresentation',
    },
    {
      name: 'defaultSignatureAlgorithm',
      baseName: 'defaultSignatureAlgorithm',
      type: 'string',
    },
    {
      name: 'directGrantFlow',
      baseName: 'directGrantFlow',
      type: 'string',
    },
    {
      name: 'displayName',
      baseName: 'displayName',
      type: 'string',
    },
    {
      name: 'displayNameHtml',
      baseName: 'displayNameHtml',
      type: 'string',
    },
    {
      name: 'dockerAuthenticationFlow',
      baseName: 'dockerAuthenticationFlow',
      type: 'string',
    },
    {
      name: 'duplicateEmailsAllowed',
      baseName: 'duplicateEmailsAllowed',
      type: 'boolean',
    },
    {
      name: 'editUsernameAllowed',
      baseName: 'editUsernameAllowed',
      type: 'boolean',
    },
    {
      name: 'emailTheme',
      baseName: 'emailTheme',
      type: 'string',
    },
    {
      name: 'enabled',
      baseName: 'enabled',
      type: 'boolean',
    },
    {
      name: 'enabledEventTypes',
      baseName: 'enabledEventTypes',
      type: 'Array<string>',
    },
    {
      name: 'eventsEnabled',
      baseName: 'eventsEnabled',
      type: 'boolean',
    },
    {
      name: 'eventsExpiration',
      baseName: 'eventsExpiration',
      type: 'number',
    },
    {
      name: 'eventsListeners',
      baseName: 'eventsListeners',
      type: 'Array<string>',
    },
    {
      name: 'failureFactor',
      baseName: 'failureFactor',
      type: 'number',
    },
    {
      name: 'federatedUsers',
      baseName: 'federatedUsers',
      type: 'Array<UserRepresentation>',
    },
    {
      name: 'groups',
      baseName: 'groups',
      type: 'Array<GroupRepresentation>',
    },
    {
      name: 'id',
      baseName: 'id',
      type: 'string',
    },
    {
      name: 'identityProviderMappers',
      baseName: 'identityProviderMappers',
      type: 'Array<IdentityProviderMapperRepresentation>',
    },
    {
      name: 'identityProviders',
      baseName: 'identityProviders',
      type: 'Array<IdentityProviderRepresentation>',
    },
    {
      name: 'internationalizationEnabled',
      baseName: 'internationalizationEnabled',
      type: 'boolean',
    },
    {
      name: 'keycloakVersion',
      baseName: 'keycloakVersion',
      type: 'string',
    },
    {
      name: 'loginTheme',
      baseName: 'loginTheme',
      type: 'string',
    },
    {
      name: 'loginWithEmailAllowed',
      baseName: 'loginWithEmailAllowed',
      type: 'boolean',
    },
    {
      name: 'maxDeltaTimeSeconds',
      baseName: 'maxDeltaTimeSeconds',
      type: 'number',
    },
    {
      name: 'maxFailureWaitSeconds',
      baseName: 'maxFailureWaitSeconds',
      type: 'number',
    },
    {
      name: 'minimumQuickLoginWaitSeconds',
      baseName: 'minimumQuickLoginWaitSeconds',
      type: 'number',
    },
    {
      name: 'notBefore',
      baseName: 'notBefore',
      type: 'number',
    },
    {
      name: 'oAuth2DeviceCodeLifespan',
      baseName: 'oAuth2DeviceCodeLifespan',
      type: 'number',
    },
    {
      name: 'oAuth2DevicePollingInterval',
      baseName: 'oAuth2DevicePollingInterval',
      type: 'number',
    },
    {
      name: 'oauth2DeviceCodeLifespan',
      baseName: 'oauth2DeviceCodeLifespan',
      type: 'number',
    },
    {
      name: 'oauth2DevicePollingInterval',
      baseName: 'oauth2DevicePollingInterval',
      type: 'number',
    },
    {
      name: 'offlineSessionIdleTimeout',
      baseName: 'offlineSessionIdleTimeout',
      type: 'number',
    },
    {
      name: 'offlineSessionMaxLifespan',
      baseName: 'offlineSessionMaxLifespan',
      type: 'number',
    },
    {
      name: 'offlineSessionMaxLifespanEnabled',
      baseName: 'offlineSessionMaxLifespanEnabled',
      type: 'boolean',
    },
    {
      name: 'otpPolicyAlgorithm',
      baseName: 'otpPolicyAlgorithm',
      type: 'string',
    },
    {
      name: 'otpPolicyDigits',
      baseName: 'otpPolicyDigits',
      type: 'number',
    },
    {
      name: 'otpPolicyInitialCounter',
      baseName: 'otpPolicyInitialCounter',
      type: 'number',
    },
    {
      name: 'otpPolicyLookAheadWindow',
      baseName: 'otpPolicyLookAheadWindow',
      type: 'number',
    },
    {
      name: 'otpPolicyPeriod',
      baseName: 'otpPolicyPeriod',
      type: 'number',
    },
    {
      name: 'otpPolicyType',
      baseName: 'otpPolicyType',
      type: 'string',
    },
    {
      name: 'otpSupportedApplications',
      baseName: 'otpSupportedApplications',
      type: 'Array<string>',
    },
    {
      name: 'passwordPolicy',
      baseName: 'passwordPolicy',
      type: 'string',
    },
    {
      name: 'permanentLockout',
      baseName: 'permanentLockout',
      type: 'boolean',
    },
    {
      name: 'protocolMappers',
      baseName: 'protocolMappers',
      type: 'Array<ProtocolMapperRepresentation>',
    },
    {
      name: 'quickLoginCheckMilliSeconds',
      baseName: 'quickLoginCheckMilliSeconds',
      type: 'number',
    },
    {
      name: 'realm',
      baseName: 'realm',
      type: 'string',
    },
    {
      name: 'refreshTokenMaxReuse',
      baseName: 'refreshTokenMaxReuse',
      type: 'number',
    },
    {
      name: 'registrationAllowed',
      baseName: 'registrationAllowed',
      type: 'boolean',
    },
    {
      name: 'registrationEmailAsUsername',
      baseName: 'registrationEmailAsUsername',
      type: 'boolean',
    },
    {
      name: 'registrationFlow',
      baseName: 'registrationFlow',
      type: 'string',
    },
    {
      name: 'rememberMe',
      baseName: 'rememberMe',
      type: 'boolean',
    },
    {
      name: 'requiredActions',
      baseName: 'requiredActions',
      type: 'Array<RequiredActionProviderRepresentation>',
    },
    {
      name: 'resetCredentialsFlow',
      baseName: 'resetCredentialsFlow',
      type: 'string',
    },
    {
      name: 'resetPasswordAllowed',
      baseName: 'resetPasswordAllowed',
      type: 'boolean',
    },
    {
      name: 'revokeRefreshToken',
      baseName: 'revokeRefreshToken',
      type: 'boolean',
    },
    {
      name: 'roles',
      baseName: 'roles',
      type: 'RolesRepresentation',
    },
    {
      name: 'scopeMappings',
      baseName: 'scopeMappings',
      type: 'Array<ScopeMappingRepresentation>',
    },
    {
      name: 'smtpServer',
      baseName: 'smtpServer',
      type: '{ [key: string]: any; }',
    },
    {
      name: 'sslRequired',
      baseName: 'sslRequired',
      type: 'string',
    },
    {
      name: 'ssoSessionIdleTimeout',
      baseName: 'ssoSessionIdleTimeout',
      type: 'number',
    },
    {
      name: 'ssoSessionIdleTimeoutRememberMe',
      baseName: 'ssoSessionIdleTimeoutRememberMe',
      type: 'number',
    },
    {
      name: 'ssoSessionMaxLifespan',
      baseName: 'ssoSessionMaxLifespan',
      type: 'number',
    },
    {
      name: 'ssoSessionMaxLifespanRememberMe',
      baseName: 'ssoSessionMaxLifespanRememberMe',
      type: 'number',
    },
    {
      name: 'supportedLocales',
      baseName: 'supportedLocales',
      type: 'Array<string>',
    },
    {
      name: 'userFederationMappers',
      baseName: 'userFederationMappers',
      type: 'Array<UserFederationMapperRepresentation>',
    },
    {
      name: 'userFederationProviders',
      baseName: 'userFederationProviders',
      type: 'Array<UserFederationProviderRepresentation>',
    },
    {
      name: 'userManagedAccessAllowed',
      baseName: 'userManagedAccessAllowed',
      type: 'boolean',
    },
    {
      name: 'users',
      baseName: 'users',
      type: 'Array<UserRepresentation>',
    },
    {
      name: 'verifyEmail',
      baseName: 'verifyEmail',
      type: 'boolean',
    },
    {
      name: 'waitIncrementSeconds',
      baseName: 'waitIncrementSeconds',
      type: 'number',
    },
    {
      name: 'webAuthnPolicyAcceptableAaguids',
      baseName: 'webAuthnPolicyAcceptableAaguids',
      type: 'Array<string>',
    },
    {
      name: 'webAuthnPolicyAttestationConveyancePreference',
      baseName: 'webAuthnPolicyAttestationConveyancePreference',
      type: 'string',
    },
    {
      name: 'webAuthnPolicyAuthenticatorAttachment',
      baseName: 'webAuthnPolicyAuthenticatorAttachment',
      type: 'string',
    },
    {
      name: 'webAuthnPolicyAvoidSameAuthenticatorRegister',
      baseName: 'webAuthnPolicyAvoidSameAuthenticatorRegister',
      type: 'boolean',
    },
    {
      name: 'webAuthnPolicyCreateTimeout',
      baseName: 'webAuthnPolicyCreateTimeout',
      type: 'number',
    },
    {
      name: 'webAuthnPolicyPasswordlessAcceptableAaguids',
      baseName: 'webAuthnPolicyPasswordlessAcceptableAaguids',
      type: 'Array<string>',
    },
    {
      name: 'webAuthnPolicyPasswordlessAttestationConveyancePreference',
      baseName: 'webAuthnPolicyPasswordlessAttestationConveyancePreference',
      type: 'string',
    },
    {
      name: 'webAuthnPolicyPasswordlessAuthenticatorAttachment',
      baseName: 'webAuthnPolicyPasswordlessAuthenticatorAttachment',
      type: 'string',
    },
    {
      name: 'webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister',
      baseName: 'webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister',
      type: 'boolean',
    },
    {
      name: 'webAuthnPolicyPasswordlessCreateTimeout',
      baseName: 'webAuthnPolicyPasswordlessCreateTimeout',
      type: 'number',
    },
    {
      name: 'webAuthnPolicyPasswordlessRequireResidentKey',
      baseName: 'webAuthnPolicyPasswordlessRequireResidentKey',
      type: 'string',
    },
    {
      name: 'webAuthnPolicyPasswordlessRpEntityName',
      baseName: 'webAuthnPolicyPasswordlessRpEntityName',
      type: 'string',
    },
    {
      name: 'webAuthnPolicyPasswordlessRpId',
      baseName: 'webAuthnPolicyPasswordlessRpId',
      type: 'string',
    },
    {
      name: 'webAuthnPolicyPasswordlessSignatureAlgorithms',
      baseName: 'webAuthnPolicyPasswordlessSignatureAlgorithms',
      type: 'Array<string>',
    },
    {
      name: 'webAuthnPolicyPasswordlessUserVerificationRequirement',
      baseName: 'webAuthnPolicyPasswordlessUserVerificationRequirement',
      type: 'string',
    },
    {
      name: 'webAuthnPolicyRequireResidentKey',
      baseName: 'webAuthnPolicyRequireResidentKey',
      type: 'string',
    },
    {
      name: 'webAuthnPolicyRpEntityName',
      baseName: 'webAuthnPolicyRpEntityName',
      type: 'string',
    },
    {
      name: 'webAuthnPolicyRpId',
      baseName: 'webAuthnPolicyRpId',
      type: 'string',
    },
    {
      name: 'webAuthnPolicySignatureAlgorithms',
      baseName: 'webAuthnPolicySignatureAlgorithms',
      type: 'Array<string>',
    },
    {
      name: 'webAuthnPolicyUserVerificationRequirement',
      baseName: 'webAuthnPolicyUserVerificationRequirement',
      type: 'string',
    },
  ];

  static getAttributeTypeMap() {
    return RealmRepresentation.attributeTypeMap;
  }
}
