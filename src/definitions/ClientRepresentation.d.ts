/* eslint-disable */
/**
 * This file was automatically generated by `npm run gendef`.
 * DO NOT MODIFY IT BY HAND. Instead, update the script gendef within package.json,
 * and run `npm run gendef` to regenerate this file.
 */

export interface ClientRepresentation {
  access?: {
    [k: string]: string;
  };
  adminUrl?: string;
  alwaysDisplayInConsole?: boolean;
  attributes?: {
    [k: string]: string;
  };
  authenticationFlowBindingOverrides?: {
    [k: string]: string;
  };
  authorizationServicesEnabled?: boolean;
  authorizationSettings?: ResourceServerRepresentation;
  baseUrl?: string;
  bearerOnly?: boolean;
  clientAuthenticatorType?: string;
  clientId?: string;
  consentRequired?: boolean;
  defaultClientScopes?: string[];
  description?: string;
  directAccessGrantsEnabled?: boolean;
  enabled?: boolean;
  frontchannelLogout?: boolean;
  fullScopeAllowed?: boolean;
  id?: string;
  implicitFlowEnabled?: boolean;
  name?: string;
  nodeReRegistrationTimeout?: number;
  notBefore?: number;
  oauth2DeviceAuthorizationGrantEnabled?: boolean;
  optionalClientScopes?: string[];
  origin?: string;
  protocol?: string;
  protocolMappers?: ProtocolMapperRepresentation[];
  publicClient?: boolean;
  redirectUris?: string[];
  registeredNodes?: {
    [k: string]: string;
  };
  registrationAccessToken?: string;
  rootUrl?: string;
  secret?: string;
  serviceAccountsEnabled?: boolean;
  standardFlowEnabled?: boolean;
  surrogateAuthRequired?: boolean;
  webOrigins?: string[];
}
export interface ResourceServerRepresentation {
  allowRemoteResourceManagement?: boolean;
  clientId?: string;
  decisionStrategy?: "AFFIRMATIVE" | "UNANIMOUS" | "CONSENSUS";
  id?: string;
  name?: string;
  policies?: PolicyRepresentation[];
  policyEnforcementMode?: "ENFORCING" | "PERMISSIVE" | "DISABLED";
  resources?: ResourceRepresentation[];
  scopes?: ScopeRepresentation[];
}
export interface PolicyRepresentation {
  config?: {
    [k: string]: string;
  };
  decisionStrategy?: "AFFIRMATIVE" | "UNANIMOUS" | "CONSENSUS";
  description?: string;
  id?: string;
  logic?: "POSITIVE" | "NEGATIVE";
  name?: string;
  owner?: string;
  policies?: string[];
  resources?: string[];
  resourcesData?: ResourceRepresentation[];
  scopes?: string[];
  scopesData?: ScopeRepresentation[];
  type?: string;
}
export interface ResourceRepresentation {
  id: string;
  attributes?: {
    [k: string]: string;
  };
  displayName?: string;
  icon_uri?: string;
  name?: string;
  ownerManagedAccess?: boolean;
  scopes?: ScopeRepresentation[];
  type?: string;
  uris?: string[];
}
export interface ScopeRepresentation {
  displayName?: string;
  iconUri?: string;
  id?: string;
  name?: string;
  policies?: PolicyRepresentation[];
  resources?: ResourceRepresentation[];
}
export interface ProtocolMapperRepresentation {
  config?: {
    [k: string]: string;
  };
  id?: string;
  name?: string;
  protocol?: string;
  protocolMapper?: string;
}
