/* eslint-disable */
/**
 * This file was automatically generated by `npm run gendef`.
 * DO NOT MODIFY IT BY HAND. Instead, update the script gendef within package.json,
 * and run `npm run gendef` to regenerate this file.
 */

export interface PartialImportRepresentation {
  clients?: ClientRepresentation[];
  groups?: GroupRepresentation[];
  identityProviderMappers?: IdentityProviderMapperRepresentation[];
  identityProviders?: IdentityProviderRepresentation[];
  ifResourceExists?: string;
  policy?: "SKIP" | "OVERWRITE" | "FAIL";
  roles?: RolesRepresentation;
  users?: UserRepresentation[];
}
export interface ClientRepresentation {
  access?: {
    [k: string]: string;
  };
  adminUrl?: string;
  alwaysDisplayInConsole?: boolean;
  attributes?: {
    [k: string]: string;
  };
  authenticationFlowBindingOverrides?: {
    [k: string]: string;
  };
  authorizationServicesEnabled?: boolean;
  authorizationSettings?: ResourceServerRepresentation;
  baseUrl?: string;
  bearerOnly?: boolean;
  clientAuthenticatorType?: string;
  clientId?: string;
  consentRequired?: boolean;
  defaultClientScopes?: string[];
  description?: string;
  directAccessGrantsEnabled?: boolean;
  enabled?: boolean;
  frontchannelLogout?: boolean;
  fullScopeAllowed?: boolean;
  id?: string;
  implicitFlowEnabled?: boolean;
  name?: string;
  nodeReRegistrationTimeout?: number;
  notBefore?: number;
  oauth2DeviceAuthorizationGrantEnabled?: boolean;
  optionalClientScopes?: string[];
  origin?: string;
  protocol?: string;
  protocolMappers?: ProtocolMapperRepresentation[];
  publicClient?: boolean;
  redirectUris?: string[];
  registeredNodes?: {
    [k: string]: string;
  };
  registrationAccessToken?: string;
  rootUrl?: string;
  secret?: string;
  serviceAccountsEnabled?: boolean;
  standardFlowEnabled?: boolean;
  surrogateAuthRequired?: boolean;
  webOrigins?: string[];
}
export interface ResourceServerRepresentation {
  allowRemoteResourceManagement?: boolean;
  clientId?: string;
  decisionStrategy?: "AFFIRMATIVE" | "UNANIMOUS" | "CONSENSUS";
  id?: string;
  name?: string;
  policies?: PolicyRepresentation[];
  policyEnforcementMode?: "ENFORCING" | "PERMISSIVE" | "DISABLED";
  resources?: ResourceRepresentation[];
  scopes?: ScopeRepresentation[];
}
export interface PolicyRepresentation {
  config?: {
    [k: string]: string;
  };
  decisionStrategy?: "AFFIRMATIVE" | "UNANIMOUS" | "CONSENSUS";
  description?: string;
  id?: string;
  logic?: "POSITIVE" | "NEGATIVE";
  name?: string;
  owner?: string;
  policies?: string[];
  resources?: string[];
  resourcesData?: ResourceRepresentation[];
  scopes?: string[];
  scopesData?: ScopeRepresentation[];
  type?: string;
}
export interface ResourceRepresentation {
  id: string;
  attributes?: {
    [k: string]: string;
  };
  displayName?: string;
  icon_uri?: string;
  name?: string;
  ownerManagedAccess?: boolean;
  scopes?: ScopeRepresentation[];
  type?: string;
  uris?: string[];
}
export interface ScopeRepresentation {
  displayName?: string;
  iconUri?: string;
  id?: string;
  name?: string;
  policies?: PolicyRepresentation[];
  resources?: ResourceRepresentation[];
}
export interface ProtocolMapperRepresentation {
  config?: {
    [k: string]: string;
  };
  id?: string;
  name?: string;
  protocol?: string;
  protocolMapper?: string;
}
export interface GroupRepresentation {
  access?: {
    [k: string]: string;
  };
  attributes?: {
    [k: string]: string;
  };
  clientRoles?: {
    [k: string]: string;
  };
  id?: string;
  name?: string;
  path?: string;
  realmRoles?: string[];
  subGroups?: GroupRepresentation[];
}
export interface IdentityProviderMapperRepresentation {
  config?: {
    [k: string]: string;
  };
  id?: string;
  identityProviderAlias?: string;
  identityProviderMapper?: string;
  name?: string;
}
export interface IdentityProviderRepresentation {
  addReadTokenRoleOnCreate?: boolean;
  alias?: string;
  config?: {
    [k: string]: string;
  };
  displayName?: string;
  enabled?: boolean;
  firstBrokerLoginFlowAlias?: string;
  internalId?: string;
  linkOnly?: boolean;
  postBrokerLoginFlowAlias?: string;
  providerId?: string;
  storeToken?: boolean;
  trustEmail?: boolean;
}
export interface RolesRepresentation {
  client?: {
    [k: string]: string;
  };
  realm?: RoleRepresentation[];
}
export interface RoleRepresentation {
  attributes?: {
    [k: string]: string;
  };
  clientRole?: boolean;
  composite?: boolean;
  composites?: RoleRepresentationComposites;
  containerId?: string;
  description?: string;
  id?: string;
  name?: string;
}
export interface RoleRepresentationComposites {
  client?: {
    [k: string]: string;
  };
  realm?: string[];
}
export interface UserRepresentation {
  access?: {
    [k: string]: string;
  };
  attributes?: {
    [k: string]: string;
  };
  clientConsents?: UserConsentRepresentation[];
  clientRoles?: {
    [k: string]: string;
  };
  createdTimestamp?: number;
  credentials?: CredentialRepresentation[];
  disableableCredentialTypes?: string[];
  email?: string;
  emailVerified?: boolean;
  enabled?: boolean;
  federatedIdentities?: FederatedIdentityRepresentation[];
  federationLink?: string;
  firstName?: string;
  groups?: string[];
  id?: string;
  lastName?: string;
  notBefore?: number;
  origin?: string;
  realmRoles?: string[];
  requiredActions?: string[];
  self?: string;
  serviceAccountClientId?: string;
  username?: string;
}
export interface UserConsentRepresentation {
  clientId?: string;
  createdDate?: number;
  grantedClientScopes?: string[];
  lastUpdatedDate?: number;
}
export interface CredentialRepresentation {
  createdDate?: number;
  credentialData?: string;
  id?: string;
  priority?: number;
  secretData?: string;
  temporary?: boolean;
  type?: string;
  userLabel?: string;
  value?: string;
}
export interface FederatedIdentityRepresentation {
  identityProvider?: string;
  userId?: string;
  userName?: string;
}
