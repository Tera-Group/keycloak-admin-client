/* eslint-disable */
/**
 * This file was automatically generated by `npm run gendef`.
 * DO NOT MODIFY IT BY HAND. Instead, update the script gendef within package.json,
 * and run `npm run gendef` to regenerate this file.
 */

export interface RealmRepresentation {
  accessCodeLifespan?: number;
  accessCodeLifespanLogin?: number;
  accessCodeLifespanUserAction?: number;
  accessTokenLifespan?: number;
  accessTokenLifespanForImplicitFlow?: number;
  accountTheme?: string;
  actionTokenGeneratedByAdminLifespan?: number;
  actionTokenGeneratedByUserLifespan?: number;
  adminEventsDetailsEnabled?: boolean;
  adminEventsEnabled?: boolean;
  adminTheme?: string;
  attributes?: {
    [k: string]: string;
  };
  authenticationFlows?: AuthenticationFlowRepresentation[];
  authenticatorConfig?: AuthenticatorConfigRepresentation[];
  browserFlow?: string;
  browserSecurityHeaders?: {
    [k: string]: string;
  };
  bruteForceProtected?: boolean;
  clientAuthenticationFlow?: string;
  clientOfflineSessionIdleTimeout?: number;
  clientOfflineSessionMaxLifespan?: number;
  clientPolicies?: JsonNode;
  clientProfiles?: JsonNode;
  clientScopeMappings?: {
    [k: string]: string;
  };
  clientScopes?: ClientScopeRepresentation[];
  clientSessionIdleTimeout?: number;
  clientSessionMaxLifespan?: number;
  clients?: ClientRepresentation[];
  components?: MultivaluedHashMap;
  defaultDefaultClientScopes?: string[];
  defaultGroups?: string[];
  defaultLocale?: string;
  defaultOptionalClientScopes?: string[];
  defaultRole?: RoleRepresentation;
  defaultSignatureAlgorithm?: string;
  directGrantFlow?: string;
  displayName?: string;
  displayNameHtml?: string;
  dockerAuthenticationFlow?: string;
  duplicateEmailsAllowed?: boolean;
  editUsernameAllowed?: boolean;
  emailTheme?: string;
  enabled?: boolean;
  enabledEventTypes?: string[];
  eventsEnabled?: boolean;
  eventsExpiration?: number;
  eventsListeners?: string[];
  failureFactor?: number;
  federatedUsers?: UserRepresentation[];
  groups?: GroupRepresentation[];
  id?: string;
  identityProviderMappers?: IdentityProviderMapperRepresentation[];
  identityProviders?: IdentityProviderRepresentation[];
  internationalizationEnabled?: boolean;
  keycloakVersion?: string;
  loginTheme?: string;
  loginWithEmailAllowed?: boolean;
  maxDeltaTimeSeconds?: number;
  maxFailureWaitSeconds?: number;
  minimumQuickLoginWaitSeconds?: number;
  notBefore?: number;
  oAuth2DeviceCodeLifespan?: number;
  oAuth2DevicePollingInterval?: number;
  oauth2DeviceCodeLifespan?: number;
  oauth2DevicePollingInterval?: number;
  offlineSessionIdleTimeout?: number;
  offlineSessionMaxLifespan?: number;
  offlineSessionMaxLifespanEnabled?: boolean;
  otpPolicyAlgorithm?: string;
  otpPolicyDigits?: number;
  otpPolicyInitialCounter?: number;
  otpPolicyLookAheadWindow?: number;
  otpPolicyPeriod?: number;
  otpPolicyType?: string;
  otpSupportedApplications?: string[];
  passwordPolicy?: string;
  permanentLockout?: boolean;
  protocolMappers?: ProtocolMapperRepresentation[];
  quickLoginCheckMilliSeconds?: number;
  realm?: string;
  refreshTokenMaxReuse?: number;
  registrationAllowed?: boolean;
  registrationEmailAsUsername?: boolean;
  registrationFlow?: string;
  rememberMe?: boolean;
  requiredActions?: RequiredActionProviderRepresentation[];
  resetCredentialsFlow?: string;
  resetPasswordAllowed?: boolean;
  revokeRefreshToken?: boolean;
  roles?: RolesRepresentation;
  scopeMappings?: ScopeMappingRepresentation[];
  smtpServer?: {
    [k: string]: string;
  };
  sslRequired?: string;
  ssoSessionIdleTimeout?: number;
  ssoSessionIdleTimeoutRememberMe?: number;
  ssoSessionMaxLifespan?: number;
  ssoSessionMaxLifespanRememberMe?: number;
  supportedLocales?: string[];
  userFederationMappers?: UserFederationMapperRepresentation[];
  userFederationProviders?: UserFederationProviderRepresentation[];
  userManagedAccessAllowed?: boolean;
  users?: UserRepresentation[];
  verifyEmail?: boolean;
  waitIncrementSeconds?: number;
  webAuthnPolicyAcceptableAaguids?: string[];
  webAuthnPolicyAttestationConveyancePreference?: string;
  webAuthnPolicyAuthenticatorAttachment?: string;
  webAuthnPolicyAvoidSameAuthenticatorRegister?: boolean;
  webAuthnPolicyCreateTimeout?: number;
  webAuthnPolicyPasswordlessAcceptableAaguids?: string[];
  webAuthnPolicyPasswordlessAttestationConveyancePreference?: string;
  webAuthnPolicyPasswordlessAuthenticatorAttachment?: string;
  webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister?: boolean;
  webAuthnPolicyPasswordlessCreateTimeout?: number;
  webAuthnPolicyPasswordlessRequireResidentKey?: string;
  webAuthnPolicyPasswordlessRpEntityName?: string;
  webAuthnPolicyPasswordlessRpId?: string;
  webAuthnPolicyPasswordlessSignatureAlgorithms?: string[];
  webAuthnPolicyPasswordlessUserVerificationRequirement?: string;
  webAuthnPolicyRequireResidentKey?: string;
  webAuthnPolicyRpEntityName?: string;
  webAuthnPolicyRpId?: string;
  webAuthnPolicySignatureAlgorithms?: string[];
  webAuthnPolicyUserVerificationRequirement?: string;
}
export interface AuthenticationFlowRepresentation {
  alias?: string;
  authenticationExecutions?: AuthenticationExecutionExportRepresentation[];
  builtIn?: boolean;
  description?: string;
  id?: string;
  providerId?: string;
  topLevel?: boolean;
}
export interface AuthenticationExecutionExportRepresentation {
  authenticator?: string;
  authenticatorConfig?: string;
  authenticatorFlow?: boolean;
  flowAlias?: string;
  priority?: number;
  requirement?: string;
  userSetupAllowed?: boolean;
}
export interface AuthenticatorConfigRepresentation {
  alias?: string;
  config?: {
    [k: string]: string;
  };
  id?: string;
}
export interface JsonNode {
  array?: boolean;
  bigDecimal?: boolean;
  bigInteger?: boolean;
  binary?: boolean;
  boolean?: boolean;
  containerNode?: boolean;
  double?: boolean;
  empty?: boolean;
  float?: boolean;
  floatingPointNumber?: boolean;
  int?: boolean;
  integralNumber?: boolean;
  long?: boolean;
  missingNode?: boolean;
  nodeType?: "ARRAY" | "BINARY" | "BOOLEAN" | "MISSING" | "NULL" | "NUMBER" | "OBJECT" | "POJO" | "STRING";
  null?: boolean;
  number?: boolean;
  object?: boolean;
  pojo?: boolean;
  short?: boolean;
  textual?: boolean;
  valueNode?: boolean;
}
export interface ClientScopeRepresentation {
  attributes?: {
    [k: string]: string;
  };
  description?: string;
  id?: string;
  name?: string;
  protocol?: string;
  protocolMappers?: ProtocolMapperRepresentation[];
}
export interface ProtocolMapperRepresentation {
  config?: {
    [k: string]: string;
  };
  id?: string;
  name?: string;
  protocol?: string;
  protocolMapper?: string;
}
export interface ClientRepresentation {
  access?: {
    [k: string]: string;
  };
  adminUrl?: string;
  alwaysDisplayInConsole?: boolean;
  attributes?: {
    [k: string]: string;
  };
  authenticationFlowBindingOverrides?: {
    [k: string]: string;
  };
  authorizationServicesEnabled?: boolean;
  authorizationSettings?: ResourceServerRepresentation;
  baseUrl?: string;
  bearerOnly?: boolean;
  clientAuthenticatorType?: string;
  clientId?: string;
  consentRequired?: boolean;
  defaultClientScopes?: string[];
  description?: string;
  directAccessGrantsEnabled?: boolean;
  enabled?: boolean;
  frontchannelLogout?: boolean;
  fullScopeAllowed?: boolean;
  id?: string;
  implicitFlowEnabled?: boolean;
  name?: string;
  nodeReRegistrationTimeout?: number;
  notBefore?: number;
  oauth2DeviceAuthorizationGrantEnabled?: boolean;
  optionalClientScopes?: string[];
  origin?: string;
  protocol?: string;
  protocolMappers?: ProtocolMapperRepresentation[];
  publicClient?: boolean;
  redirectUris?: string[];
  registeredNodes?: {
    [k: string]: string;
  };
  registrationAccessToken?: string;
  rootUrl?: string;
  secret?: string;
  serviceAccountsEnabled?: boolean;
  standardFlowEnabled?: boolean;
  surrogateAuthRequired?: boolean;
  webOrigins?: string[];
}
export interface ResourceServerRepresentation {
  allowRemoteResourceManagement?: boolean;
  clientId?: string;
  decisionStrategy?: "AFFIRMATIVE" | "UNANIMOUS" | "CONSENSUS";
  id?: string;
  name?: string;
  policies?: PolicyRepresentation[];
  policyEnforcementMode?: "ENFORCING" | "PERMISSIVE" | "DISABLED";
  resources?: ResourceRepresentation[];
  scopes?: ScopeRepresentation[];
}
export interface PolicyRepresentation {
  config?: {
    [k: string]: string;
  };
  decisionStrategy?: "AFFIRMATIVE" | "UNANIMOUS" | "CONSENSUS";
  description?: string;
  id?: string;
  logic?: "POSITIVE" | "NEGATIVE";
  name?: string;
  owner?: string;
  policies?: string[];
  resources?: string[];
  resourcesData?: ResourceRepresentation[];
  scopes?: string[];
  scopesData?: ScopeRepresentation[];
  type?: string;
}
export interface ResourceRepresentation {
  id: string;
  attributes?: {
    [k: string]: string;
  };
  displayName?: string;
  icon_uri?: string;
  name?: string;
  ownerManagedAccess?: boolean;
  scopes?: ScopeRepresentation[];
  type?: string;
  uris?: string[];
}
export interface ScopeRepresentation {
  displayName?: string;
  iconUri?: string;
  id?: string;
  name?: string;
  policies?: PolicyRepresentation[];
  resources?: ResourceRepresentation[];
}
export interface MultivaluedHashMap {
  empty?: boolean;
  loadFactor?: number;
  threshold?: number;
}
export interface RoleRepresentation {
  attributes?: {
    [k: string]: string;
  };
  clientRole?: boolean;
  composite?: boolean;
  composites?: RoleRepresentationComposites;
  containerId?: string;
  description?: string;
  id?: string;
  name?: string;
}
export interface RoleRepresentationComposites {
  client?: {
    [k: string]: string;
  };
  realm?: string[];
}
export interface UserRepresentation {
  access?: {
    [k: string]: string;
  };
  attributes?: {
    [k: string]: string;
  };
  clientConsents?: UserConsentRepresentation[];
  clientRoles?: {
    [k: string]: string;
  };
  createdTimestamp?: number;
  credentials?: CredentialRepresentation[];
  disableableCredentialTypes?: string[];
  email?: string;
  emailVerified?: boolean;
  enabled?: boolean;
  federatedIdentities?: FederatedIdentityRepresentation[];
  federationLink?: string;
  firstName?: string;
  groups?: string[];
  id?: string;
  lastName?: string;
  notBefore?: number;
  origin?: string;
  realmRoles?: string[];
  requiredActions?: string[];
  self?: string;
  serviceAccountClientId?: string;
  username?: string;
}
export interface UserConsentRepresentation {
  clientId?: string;
  createdDate?: number;
  grantedClientScopes?: string[];
  lastUpdatedDate?: number;
}
export interface CredentialRepresentation {
  createdDate?: number;
  credentialData?: string;
  id?: string;
  priority?: number;
  secretData?: string;
  temporary?: boolean;
  type?: string;
  userLabel?: string;
  value?: string;
}
export interface FederatedIdentityRepresentation {
  identityProvider?: string;
  userId?: string;
  userName?: string;
}
export interface GroupRepresentation {
  access?: {
    [k: string]: string;
  };
  attributes?: {
    [k: string]: string;
  };
  clientRoles?: {
    [k: string]: string;
  };
  id?: string;
  name?: string;
  path?: string;
  realmRoles?: string[];
  subGroups?: GroupRepresentation[];
}
export interface IdentityProviderMapperRepresentation {
  config?: {
    [k: string]: string;
  };
  id?: string;
  identityProviderAlias?: string;
  identityProviderMapper?: string;
  name?: string;
}
export interface IdentityProviderRepresentation {
  addReadTokenRoleOnCreate?: boolean;
  alias?: string;
  config?: {
    [k: string]: string;
  };
  displayName?: string;
  enabled?: boolean;
  firstBrokerLoginFlowAlias?: string;
  internalId?: string;
  linkOnly?: boolean;
  postBrokerLoginFlowAlias?: string;
  providerId?: string;
  storeToken?: boolean;
  trustEmail?: boolean;
}
export interface RequiredActionProviderRepresentation {
  alias?: string;
  config?: {
    [k: string]: string;
  };
  defaultAction?: boolean;
  enabled?: boolean;
  name?: string;
  priority?: number;
  providerId?: string;
}
export interface RolesRepresentation {
  client?: {
    [k: string]: string;
  };
  realm?: RoleRepresentation[];
}
export interface ScopeMappingRepresentation {
  client?: string;
  clientScope?: string;
  roles?: string[];
  self?: string;
}
export interface UserFederationMapperRepresentation {
  config?: {
    [k: string]: string;
  };
  federationMapperType?: string;
  federationProviderDisplayName?: string;
  id?: string;
  name?: string;
}
export interface UserFederationProviderRepresentation {
  changedSyncPeriod?: number;
  config?: {
    [k: string]: string;
  };
  displayName?: string;
  fullSyncPeriod?: number;
  id?: string;
  lastSync?: number;
  priority?: number;
  providerName?: string;
}
