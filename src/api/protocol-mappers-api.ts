/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { ProtocolMapperRepresentation } from '../model';
/**
 * ProtocolMappersApi - axios parameter creator
 * @export
 */
export const ProtocolMappersApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Delete the mapper
     * @param {string} realm realm name (not id!)
     * @param {string} id1
     * @param {string} id2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientScopesId1ProtocolMappersModelsId2Delete: async (
      realm: string,
      id1: string,
      id2: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientScopesId1ProtocolMappersModelsId2Delete',
        'realm',
        realm
      );
      // verify required parameter 'id1' is not null or undefined
      assertParamExists(
        'realmClientScopesId1ProtocolMappersModelsId2Delete',
        'id1',
        id1
      );
      // verify required parameter 'id2' is not null or undefined
      assertParamExists(
        'realmClientScopesId1ProtocolMappersModelsId2Delete',
        'id2',
        id2
      );
      const localVarPath =
        `/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'id1'}}`, encodeURIComponent(String(id1)))
          .replace(`{${'id2'}}`, encodeURIComponent(String(id2)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get mapper by id
     * @param {string} realm realm name (not id!)
     * @param {string} id1
     * @param {string} id2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientScopesId1ProtocolMappersModelsId2Get: async (
      realm: string,
      id1: string,
      id2: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientScopesId1ProtocolMappersModelsId2Get',
        'realm',
        realm
      );
      // verify required parameter 'id1' is not null or undefined
      assertParamExists(
        'realmClientScopesId1ProtocolMappersModelsId2Get',
        'id1',
        id1
      );
      // verify required parameter 'id2' is not null or undefined
      assertParamExists(
        'realmClientScopesId1ProtocolMappersModelsId2Get',
        'id2',
        id2
      );
      const localVarPath =
        `/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'id1'}}`, encodeURIComponent(String(id1)))
          .replace(`{${'id2'}}`, encodeURIComponent(String(id2)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update the mapper
     * @param {string} realm realm name (not id!)
     * @param {string} id1
     * @param {string} id2
     * @param {ProtocolMapperRepresentation} protocolMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientScopesId1ProtocolMappersModelsId2Put: async (
      realm: string,
      id1: string,
      id2: string,
      protocolMapperRepresentation: ProtocolMapperRepresentation,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientScopesId1ProtocolMappersModelsId2Put',
        'realm',
        realm
      );
      // verify required parameter 'id1' is not null or undefined
      assertParamExists(
        'realmClientScopesId1ProtocolMappersModelsId2Put',
        'id1',
        id1
      );
      // verify required parameter 'id2' is not null or undefined
      assertParamExists(
        'realmClientScopesId1ProtocolMappersModelsId2Put',
        'id2',
        id2
      );
      // verify required parameter 'protocolMapperRepresentation' is not null or undefined
      assertParamExists(
        'realmClientScopesId1ProtocolMappersModelsId2Put',
        'protocolMapperRepresentation',
        protocolMapperRepresentation
      );
      const localVarPath =
        `/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'id1'}}`, encodeURIComponent(String(id1)))
          .replace(`{${'id2'}}`, encodeURIComponent(String(id2)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        protocolMapperRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create multiple mappers
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client scope (not name)
     * @param {Array<ProtocolMapperRepresentation>} protocolMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientScopesIdProtocolMappersAddModelsPost: async (
      realm: string,
      id: string,
      protocolMapperRepresentation: Array<ProtocolMapperRepresentation>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientScopesIdProtocolMappersAddModelsPost',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'realmClientScopesIdProtocolMappersAddModelsPost',
        'id',
        id
      );
      // verify required parameter 'protocolMapperRepresentation' is not null or undefined
      assertParamExists(
        'realmClientScopesIdProtocolMappersAddModelsPost',
        'protocolMapperRepresentation',
        protocolMapperRepresentation
      );
      const localVarPath =
        `/{realm}/client-scopes/{id}/protocol-mappers/add-models`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        protocolMapperRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get mappers
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client scope (not name)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientScopesIdProtocolMappersModelsGet: async (
      realm: string,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientScopesIdProtocolMappersModelsGet',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'realmClientScopesIdProtocolMappersModelsGet',
        'id',
        id
      );
      const localVarPath = `/{realm}/client-scopes/{id}/protocol-mappers/models`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a mapper
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client scope (not name)
     * @param {ProtocolMapperRepresentation} protocolMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientScopesIdProtocolMappersModelsPost: async (
      realm: string,
      id: string,
      protocolMapperRepresentation: ProtocolMapperRepresentation,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientScopesIdProtocolMappersModelsPost',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'realmClientScopesIdProtocolMappersModelsPost',
        'id',
        id
      );
      // verify required parameter 'protocolMapperRepresentation' is not null or undefined
      assertParamExists(
        'realmClientScopesIdProtocolMappersModelsPost',
        'protocolMapperRepresentation',
        protocolMapperRepresentation
      );
      const localVarPath = `/{realm}/client-scopes/{id}/protocol-mappers/models`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        protocolMapperRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get mappers by name for a specific protocol
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client scope (not name)
     * @param {string} protocol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientScopesIdProtocolMappersProtocolProtocolGet: async (
      realm: string,
      id: string,
      protocol: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientScopesIdProtocolMappersProtocolProtocolGet',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'realmClientScopesIdProtocolMappersProtocolProtocolGet',
        'id',
        id
      );
      // verify required parameter 'protocol' is not null or undefined
      assertParamExists(
        'realmClientScopesIdProtocolMappersProtocolProtocolGet',
        'protocol',
        protocol
      );
      const localVarPath =
        `/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'id'}}`, encodeURIComponent(String(id)))
          .replace(`{${'protocol'}}`, encodeURIComponent(String(protocol)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete the mapper
     * @param {string} realm realm name (not id!)
     * @param {string} id1
     * @param {string} id2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsId1ProtocolMappersModelsId2Delete: async (
      realm: string,
      id1: string,
      id2: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientsId1ProtocolMappersModelsId2Delete',
        'realm',
        realm
      );
      // verify required parameter 'id1' is not null or undefined
      assertParamExists(
        'realmClientsId1ProtocolMappersModelsId2Delete',
        'id1',
        id1
      );
      // verify required parameter 'id2' is not null or undefined
      assertParamExists(
        'realmClientsId1ProtocolMappersModelsId2Delete',
        'id2',
        id2
      );
      const localVarPath =
        `/{realm}/clients/{id1}/protocol-mappers/models/{id2}`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'id1'}}`, encodeURIComponent(String(id1)))
          .replace(`{${'id2'}}`, encodeURIComponent(String(id2)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get mapper by id
     * @param {string} realm realm name (not id!)
     * @param {string} id1
     * @param {string} id2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsId1ProtocolMappersModelsId2Get: async (
      realm: string,
      id1: string,
      id2: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientsId1ProtocolMappersModelsId2Get',
        'realm',
        realm
      );
      // verify required parameter 'id1' is not null or undefined
      assertParamExists(
        'realmClientsId1ProtocolMappersModelsId2Get',
        'id1',
        id1
      );
      // verify required parameter 'id2' is not null or undefined
      assertParamExists(
        'realmClientsId1ProtocolMappersModelsId2Get',
        'id2',
        id2
      );
      const localVarPath =
        `/{realm}/clients/{id1}/protocol-mappers/models/{id2}`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'id1'}}`, encodeURIComponent(String(id1)))
          .replace(`{${'id2'}}`, encodeURIComponent(String(id2)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update the mapper
     * @param {string} realm realm name (not id!)
     * @param {string} id1
     * @param {string} id2
     * @param {ProtocolMapperRepresentation} protocolMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsId1ProtocolMappersModelsId2Put: async (
      realm: string,
      id1: string,
      id2: string,
      protocolMapperRepresentation: ProtocolMapperRepresentation,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientsId1ProtocolMappersModelsId2Put',
        'realm',
        realm
      );
      // verify required parameter 'id1' is not null or undefined
      assertParamExists(
        'realmClientsId1ProtocolMappersModelsId2Put',
        'id1',
        id1
      );
      // verify required parameter 'id2' is not null or undefined
      assertParamExists(
        'realmClientsId1ProtocolMappersModelsId2Put',
        'id2',
        id2
      );
      // verify required parameter 'protocolMapperRepresentation' is not null or undefined
      assertParamExists(
        'realmClientsId1ProtocolMappersModelsId2Put',
        'protocolMapperRepresentation',
        protocolMapperRepresentation
      );
      const localVarPath =
        `/{realm}/clients/{id1}/protocol-mappers/models/{id2}`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'id1'}}`, encodeURIComponent(String(id1)))
          .replace(`{${'id2'}}`, encodeURIComponent(String(id2)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        protocolMapperRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create multiple mappers
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {Array<ProtocolMapperRepresentation>} protocolMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdProtocolMappersAddModelsPost: async (
      realm: string,
      id: string,
      protocolMapperRepresentation: Array<ProtocolMapperRepresentation>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientsIdProtocolMappersAddModelsPost',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmClientsIdProtocolMappersAddModelsPost', 'id', id);
      // verify required parameter 'protocolMapperRepresentation' is not null or undefined
      assertParamExists(
        'realmClientsIdProtocolMappersAddModelsPost',
        'protocolMapperRepresentation',
        protocolMapperRepresentation
      );
      const localVarPath = `/{realm}/clients/{id}/protocol-mappers/add-models`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        protocolMapperRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get mappers
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdProtocolMappersModelsGet: async (
      realm: string,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientsIdProtocolMappersModelsGet',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmClientsIdProtocolMappersModelsGet', 'id', id);
      const localVarPath = `/{realm}/clients/{id}/protocol-mappers/models`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a mapper
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {ProtocolMapperRepresentation} protocolMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdProtocolMappersModelsPost: async (
      realm: string,
      id: string,
      protocolMapperRepresentation: ProtocolMapperRepresentation,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientsIdProtocolMappersModelsPost',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmClientsIdProtocolMappersModelsPost', 'id', id);
      // verify required parameter 'protocolMapperRepresentation' is not null or undefined
      assertParamExists(
        'realmClientsIdProtocolMappersModelsPost',
        'protocolMapperRepresentation',
        protocolMapperRepresentation
      );
      const localVarPath = `/{realm}/clients/{id}/protocol-mappers/models`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        protocolMapperRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get mappers by name for a specific protocol
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} protocol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdProtocolMappersProtocolProtocolGet: async (
      realm: string,
      id: string,
      protocol: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientsIdProtocolMappersProtocolProtocolGet',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'realmClientsIdProtocolMappersProtocolProtocolGet',
        'id',
        id
      );
      // verify required parameter 'protocol' is not null or undefined
      assertParamExists(
        'realmClientsIdProtocolMappersProtocolProtocolGet',
        'protocol',
        protocol
      );
      const localVarPath =
        `/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'id'}}`, encodeURIComponent(String(id)))
          .replace(`{${'protocol'}}`, encodeURIComponent(String(protocol)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProtocolMappersApi - functional programming interface
 * @export
 */
export const ProtocolMappersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    ProtocolMappersApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Delete the mapper
     * @param {string} realm realm name (not id!)
     * @param {string} id1
     * @param {string} id2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientScopesId1ProtocolMappersModelsId2Delete(
      realm: string,
      id1: string,
      id2: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientScopesId1ProtocolMappersModelsId2Delete(
          realm,
          id1,
          id2,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get mapper by id
     * @param {string} realm realm name (not id!)
     * @param {string} id1
     * @param {string} id2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientScopesId1ProtocolMappersModelsId2Get(
      realm: string,
      id1: string,
      id2: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProtocolMapperRepresentation>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientScopesId1ProtocolMappersModelsId2Get(
          realm,
          id1,
          id2,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update the mapper
     * @param {string} realm realm name (not id!)
     * @param {string} id1
     * @param {string} id2
     * @param {ProtocolMapperRepresentation} protocolMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientScopesId1ProtocolMappersModelsId2Put(
      realm: string,
      id1: string,
      id2: string,
      protocolMapperRepresentation: ProtocolMapperRepresentation,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientScopesId1ProtocolMappersModelsId2Put(
          realm,
          id1,
          id2,
          protocolMapperRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create multiple mappers
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client scope (not name)
     * @param {Array<ProtocolMapperRepresentation>} protocolMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientScopesIdProtocolMappersAddModelsPost(
      realm: string,
      id: string,
      protocolMapperRepresentation: Array<ProtocolMapperRepresentation>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientScopesIdProtocolMappersAddModelsPost(
          realm,
          id,
          protocolMapperRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get mappers
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client scope (not name)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientScopesIdProtocolMappersModelsGet(
      realm: string,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientScopesIdProtocolMappersModelsGet(
          realm,
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create a mapper
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client scope (not name)
     * @param {ProtocolMapperRepresentation} protocolMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientScopesIdProtocolMappersModelsPost(
      realm: string,
      id: string,
      protocolMapperRepresentation: ProtocolMapperRepresentation,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientScopesIdProtocolMappersModelsPost(
          realm,
          id,
          protocolMapperRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get mappers by name for a specific protocol
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client scope (not name)
     * @param {string} protocol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientScopesIdProtocolMappersProtocolProtocolGet(
      realm: string,
      id: string,
      protocol: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientScopesIdProtocolMappersProtocolProtocolGet(
          realm,
          id,
          protocol,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete the mapper
     * @param {string} realm realm name (not id!)
     * @param {string} id1
     * @param {string} id2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsId1ProtocolMappersModelsId2Delete(
      realm: string,
      id1: string,
      id2: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsId1ProtocolMappersModelsId2Delete(
          realm,
          id1,
          id2,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get mapper by id
     * @param {string} realm realm name (not id!)
     * @param {string} id1
     * @param {string} id2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsId1ProtocolMappersModelsId2Get(
      realm: string,
      id1: string,
      id2: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProtocolMapperRepresentation>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsId1ProtocolMappersModelsId2Get(
          realm,
          id1,
          id2,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update the mapper
     * @param {string} realm realm name (not id!)
     * @param {string} id1
     * @param {string} id2
     * @param {ProtocolMapperRepresentation} protocolMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsId1ProtocolMappersModelsId2Put(
      realm: string,
      id1: string,
      id2: string,
      protocolMapperRepresentation: ProtocolMapperRepresentation,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsId1ProtocolMappersModelsId2Put(
          realm,
          id1,
          id2,
          protocolMapperRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create multiple mappers
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {Array<ProtocolMapperRepresentation>} protocolMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdProtocolMappersAddModelsPost(
      realm: string,
      id: string,
      protocolMapperRepresentation: Array<ProtocolMapperRepresentation>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdProtocolMappersAddModelsPost(
          realm,
          id,
          protocolMapperRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get mappers
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdProtocolMappersModelsGet(
      realm: string,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdProtocolMappersModelsGet(
          realm,
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create a mapper
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {ProtocolMapperRepresentation} protocolMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdProtocolMappersModelsPost(
      realm: string,
      id: string,
      protocolMapperRepresentation: ProtocolMapperRepresentation,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdProtocolMappersModelsPost(
          realm,
          id,
          protocolMapperRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get mappers by name for a specific protocol
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} protocol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdProtocolMappersProtocolProtocolGet(
      realm: string,
      id: string,
      protocol: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdProtocolMappersProtocolProtocolGet(
          realm,
          id,
          protocol,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ProtocolMappersApi - factory interface
 * @export
 */
export const ProtocolMappersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ProtocolMappersApiFp(configuration);
  return {
    /**
     *
     * @summary Delete the mapper
     * @param {string} realm realm name (not id!)
     * @param {string} id1
     * @param {string} id2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientScopesId1ProtocolMappersModelsId2Delete(
      realm: string,
      id1: string,
      id2: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmClientScopesId1ProtocolMappersModelsId2Delete(
          realm,
          id1,
          id2,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get mapper by id
     * @param {string} realm realm name (not id!)
     * @param {string} id1
     * @param {string} id2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientScopesId1ProtocolMappersModelsId2Get(
      realm: string,
      id1: string,
      id2: string,
      options?: any
    ): AxiosPromise<ProtocolMapperRepresentation> {
      return localVarFp
        .realmClientScopesId1ProtocolMappersModelsId2Get(
          realm,
          id1,
          id2,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update the mapper
     * @param {string} realm realm name (not id!)
     * @param {string} id1
     * @param {string} id2
     * @param {ProtocolMapperRepresentation} protocolMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientScopesId1ProtocolMappersModelsId2Put(
      realm: string,
      id1: string,
      id2: string,
      protocolMapperRepresentation: ProtocolMapperRepresentation,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmClientScopesId1ProtocolMappersModelsId2Put(
          realm,
          id1,
          id2,
          protocolMapperRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create multiple mappers
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client scope (not name)
     * @param {Array<ProtocolMapperRepresentation>} protocolMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientScopesIdProtocolMappersAddModelsPost(
      realm: string,
      id: string,
      protocolMapperRepresentation: Array<ProtocolMapperRepresentation>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmClientScopesIdProtocolMappersAddModelsPost(
          realm,
          id,
          protocolMapperRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get mappers
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client scope (not name)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientScopesIdProtocolMappersModelsGet(
      realm: string,
      id: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmClientScopesIdProtocolMappersModelsGet(realm, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a mapper
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client scope (not name)
     * @param {ProtocolMapperRepresentation} protocolMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientScopesIdProtocolMappersModelsPost(
      realm: string,
      id: string,
      protocolMapperRepresentation: ProtocolMapperRepresentation,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmClientScopesIdProtocolMappersModelsPost(
          realm,
          id,
          protocolMapperRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get mappers by name for a specific protocol
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client scope (not name)
     * @param {string} protocol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientScopesIdProtocolMappersProtocolProtocolGet(
      realm: string,
      id: string,
      protocol: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmClientScopesIdProtocolMappersProtocolProtocolGet(
          realm,
          id,
          protocol,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete the mapper
     * @param {string} realm realm name (not id!)
     * @param {string} id1
     * @param {string} id2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsId1ProtocolMappersModelsId2Delete(
      realm: string,
      id1: string,
      id2: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmClientsId1ProtocolMappersModelsId2Delete(realm, id1, id2, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get mapper by id
     * @param {string} realm realm name (not id!)
     * @param {string} id1
     * @param {string} id2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsId1ProtocolMappersModelsId2Get(
      realm: string,
      id1: string,
      id2: string,
      options?: any
    ): AxiosPromise<ProtocolMapperRepresentation> {
      return localVarFp
        .realmClientsId1ProtocolMappersModelsId2Get(realm, id1, id2, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update the mapper
     * @param {string} realm realm name (not id!)
     * @param {string} id1
     * @param {string} id2
     * @param {ProtocolMapperRepresentation} protocolMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsId1ProtocolMappersModelsId2Put(
      realm: string,
      id1: string,
      id2: string,
      protocolMapperRepresentation: ProtocolMapperRepresentation,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmClientsId1ProtocolMappersModelsId2Put(
          realm,
          id1,
          id2,
          protocolMapperRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create multiple mappers
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {Array<ProtocolMapperRepresentation>} protocolMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdProtocolMappersAddModelsPost(
      realm: string,
      id: string,
      protocolMapperRepresentation: Array<ProtocolMapperRepresentation>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmClientsIdProtocolMappersAddModelsPost(
          realm,
          id,
          protocolMapperRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get mappers
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdProtocolMappersModelsGet(
      realm: string,
      id: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmClientsIdProtocolMappersModelsGet(realm, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a mapper
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {ProtocolMapperRepresentation} protocolMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdProtocolMappersModelsPost(
      realm: string,
      id: string,
      protocolMapperRepresentation: ProtocolMapperRepresentation,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmClientsIdProtocolMappersModelsPost(
          realm,
          id,
          protocolMapperRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get mappers by name for a specific protocol
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} protocol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdProtocolMappersProtocolProtocolGet(
      realm: string,
      id: string,
      protocol: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmClientsIdProtocolMappersProtocolProtocolGet(
          realm,
          id,
          protocol,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ProtocolMappersApi - object-oriented interface
 * @export
 * @class ProtocolMappersApi
 * @extends {BaseAPI}
 */
export class ProtocolMappersApi extends BaseAPI {
  /**
   *
   * @summary Delete the mapper
   * @param {string} realm realm name (not id!)
   * @param {string} id1
   * @param {string} id2
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtocolMappersApi
   */
  public realmClientScopesId1ProtocolMappersModelsId2Delete(
    realm: string,
    id1: string,
    id2: string,
    options?: AxiosRequestConfig
  ) {
    return ProtocolMappersApiFp(this.configuration)
      .realmClientScopesId1ProtocolMappersModelsId2Delete(
        realm,
        id1,
        id2,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get mapper by id
   * @param {string} realm realm name (not id!)
   * @param {string} id1
   * @param {string} id2
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtocolMappersApi
   */
  public realmClientScopesId1ProtocolMappersModelsId2Get(
    realm: string,
    id1: string,
    id2: string,
    options?: AxiosRequestConfig
  ) {
    return ProtocolMappersApiFp(this.configuration)
      .realmClientScopesId1ProtocolMappersModelsId2Get(realm, id1, id2, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update the mapper
   * @param {string} realm realm name (not id!)
   * @param {string} id1
   * @param {string} id2
   * @param {ProtocolMapperRepresentation} protocolMapperRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtocolMappersApi
   */
  public realmClientScopesId1ProtocolMappersModelsId2Put(
    realm: string,
    id1: string,
    id2: string,
    protocolMapperRepresentation: ProtocolMapperRepresentation,
    options?: AxiosRequestConfig
  ) {
    return ProtocolMappersApiFp(this.configuration)
      .realmClientScopesId1ProtocolMappersModelsId2Put(
        realm,
        id1,
        id2,
        protocolMapperRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create multiple mappers
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client scope (not name)
   * @param {Array<ProtocolMapperRepresentation>} protocolMapperRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtocolMappersApi
   */
  public realmClientScopesIdProtocolMappersAddModelsPost(
    realm: string,
    id: string,
    protocolMapperRepresentation: Array<ProtocolMapperRepresentation>,
    options?: AxiosRequestConfig
  ) {
    return ProtocolMappersApiFp(this.configuration)
      .realmClientScopesIdProtocolMappersAddModelsPost(
        realm,
        id,
        protocolMapperRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get mappers
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client scope (not name)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtocolMappersApi
   */
  public realmClientScopesIdProtocolMappersModelsGet(
    realm: string,
    id: string,
    options?: AxiosRequestConfig
  ) {
    return ProtocolMappersApiFp(this.configuration)
      .realmClientScopesIdProtocolMappersModelsGet(realm, id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a mapper
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client scope (not name)
   * @param {ProtocolMapperRepresentation} protocolMapperRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtocolMappersApi
   */
  public realmClientScopesIdProtocolMappersModelsPost(
    realm: string,
    id: string,
    protocolMapperRepresentation: ProtocolMapperRepresentation,
    options?: AxiosRequestConfig
  ) {
    return ProtocolMappersApiFp(this.configuration)
      .realmClientScopesIdProtocolMappersModelsPost(
        realm,
        id,
        protocolMapperRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get mappers by name for a specific protocol
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client scope (not name)
   * @param {string} protocol
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtocolMappersApi
   */
  public realmClientScopesIdProtocolMappersProtocolProtocolGet(
    realm: string,
    id: string,
    protocol: string,
    options?: AxiosRequestConfig
  ) {
    return ProtocolMappersApiFp(this.configuration)
      .realmClientScopesIdProtocolMappersProtocolProtocolGet(
        realm,
        id,
        protocol,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete the mapper
   * @param {string} realm realm name (not id!)
   * @param {string} id1
   * @param {string} id2
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtocolMappersApi
   */
  public realmClientsId1ProtocolMappersModelsId2Delete(
    realm: string,
    id1: string,
    id2: string,
    options?: AxiosRequestConfig
  ) {
    return ProtocolMappersApiFp(this.configuration)
      .realmClientsId1ProtocolMappersModelsId2Delete(realm, id1, id2, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get mapper by id
   * @param {string} realm realm name (not id!)
   * @param {string} id1
   * @param {string} id2
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtocolMappersApi
   */
  public realmClientsId1ProtocolMappersModelsId2Get(
    realm: string,
    id1: string,
    id2: string,
    options?: AxiosRequestConfig
  ) {
    return ProtocolMappersApiFp(this.configuration)
      .realmClientsId1ProtocolMappersModelsId2Get(realm, id1, id2, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update the mapper
   * @param {string} realm realm name (not id!)
   * @param {string} id1
   * @param {string} id2
   * @param {ProtocolMapperRepresentation} protocolMapperRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtocolMappersApi
   */
  public realmClientsId1ProtocolMappersModelsId2Put(
    realm: string,
    id1: string,
    id2: string,
    protocolMapperRepresentation: ProtocolMapperRepresentation,
    options?: AxiosRequestConfig
  ) {
    return ProtocolMappersApiFp(this.configuration)
      .realmClientsId1ProtocolMappersModelsId2Put(
        realm,
        id1,
        id2,
        protocolMapperRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create multiple mappers
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {Array<ProtocolMapperRepresentation>} protocolMapperRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtocolMappersApi
   */
  public realmClientsIdProtocolMappersAddModelsPost(
    realm: string,
    id: string,
    protocolMapperRepresentation: Array<ProtocolMapperRepresentation>,
    options?: AxiosRequestConfig
  ) {
    return ProtocolMappersApiFp(this.configuration)
      .realmClientsIdProtocolMappersAddModelsPost(
        realm,
        id,
        protocolMapperRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get mappers
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtocolMappersApi
   */
  public realmClientsIdProtocolMappersModelsGet(
    realm: string,
    id: string,
    options?: AxiosRequestConfig
  ) {
    return ProtocolMappersApiFp(this.configuration)
      .realmClientsIdProtocolMappersModelsGet(realm, id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a mapper
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {ProtocolMapperRepresentation} protocolMapperRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtocolMappersApi
   */
  public realmClientsIdProtocolMappersModelsPost(
    realm: string,
    id: string,
    protocolMapperRepresentation: ProtocolMapperRepresentation,
    options?: AxiosRequestConfig
  ) {
    return ProtocolMappersApiFp(this.configuration)
      .realmClientsIdProtocolMappersModelsPost(
        realm,
        id,
        protocolMapperRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get mappers by name for a specific protocol
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {string} protocol
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProtocolMappersApi
   */
  public realmClientsIdProtocolMappersProtocolProtocolGet(
    realm: string,
    id: string,
    protocol: string,
    options?: AxiosRequestConfig
  ) {
    return ProtocolMappersApiFp(this.configuration)
      .realmClientsIdProtocolMappersProtocolProtocolGet(
        realm,
        id,
        protocol,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
