/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { AuthenticationExecutionInfoRepresentation } from '../model/authenticationExecutionInfoRepresentation';
import { AuthenticationExecutionRepresentation } from '../model/authenticationExecutionRepresentation';
import { AuthenticationFlowRepresentation } from '../model/authenticationFlowRepresentation';
import { AuthenticatorConfigInfoRepresentation } from '../model/authenticatorConfigInfoRepresentation';
import { AuthenticatorConfigRepresentation } from '../model/authenticatorConfigRepresentation';
import { RequiredActionProviderRepresentation } from '../model/requiredActionProviderRepresentation';

import {
  ObjectSerializer,
  Authentication,
  VoidAuth,
  Interceptor,
} from '../model/models';
import {
  HttpBasicAuth,
  HttpBearerAuth,
  ApiKeyAuth,
  OAuth,
} from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'http://localhost';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum AuthenticationManagementApiApiKeys {}

export class AuthenticationManagementApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    access_token: new HttpBearerAuth(),
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(
    basePathOrUsername: string,
    password?: string,
    basePath?: string
  ) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: AuthenticationManagementApiApiKeys, value: string) {
    (this.authentications as any)[
      AuthenticationManagementApiApiKeys[key]
    ].apiKey = value;
  }

  set accessToken(accessToken: string | (() => string)) {
    this.authentications.access_token.accessToken = accessToken;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   *
   * @summary Get authenticator providers   Returns a stream of authenticator providers.
   * @param realm realm name (not id!)
   */
  public async realmAuthenticationAuthenticatorProvidersGet(
    realm: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: Array<{ [key: string]: any }>;
  }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/authenticator-providers'.replace(
        '{' + 'realm' + '}',
        encodeURIComponent(String(realm))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationAuthenticatorProvidersGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: Array<{ [key: string]: any }>;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'Array<{ [key: string]: any; }>'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Get client authenticator providers   Returns a stream of client authenticator providers.
   * @param realm realm name (not id!)
   */
  public async realmAuthenticationClientAuthenticatorProvidersGet(
    realm: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: Array<{ [key: string]: any }>;
  }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/client-authenticator-providers'.replace(
        '{' + 'realm' + '}',
        encodeURIComponent(String(realm))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationClientAuthenticatorProvidersGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: Array<{ [key: string]: any }>;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'Array<{ [key: string]: any; }>'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Get authenticator providerâ€™s configuration description
   * @param realm realm name (not id!)
   * @param providerId
   */
  public async realmAuthenticationConfigDescriptionProviderIdGet(
    realm: string,
    providerId: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: AuthenticatorConfigInfoRepresentation;
  }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/config-description/{providerId}'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace(
          '{' + 'providerId' + '}',
          encodeURIComponent(String(providerId))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationConfigDescriptionProviderIdGet.'
      );
    }

    // verify required parameter 'providerId' is not null or undefined
    if (providerId === null || providerId === undefined) {
      throw new Error(
        'Required parameter providerId was null or undefined when calling realmAuthenticationConfigDescriptionProviderIdGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: AuthenticatorConfigInfoRepresentation;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'AuthenticatorConfigInfoRepresentation'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Delete authenticator configuration
   * @param realm realm name (not id!)
   * @param id Configuration id
   */
  public async realmAuthenticationConfigIdDelete(
    realm: string,
    id: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/config/{id}'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationConfigIdDelete.'
      );
    }

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling realmAuthenticationConfigIdDelete.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'DELETE',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Get authenticator configuration
   * @param realm realm name (not id!)
   * @param id Configuration id
   */
  public async realmAuthenticationConfigIdGet(
    realm: string,
    id: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: AuthenticatorConfigRepresentation;
  }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/config/{id}'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationConfigIdGet.'
      );
    }

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling realmAuthenticationConfigIdGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: AuthenticatorConfigRepresentation;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'AuthenticatorConfigRepresentation'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Update authenticator configuration
   * @param realm realm name (not id!)
   * @param id Configuration id
   * @param authenticatorConfigRepresentation JSON describing new state of authenticator configuration
   */
  public async realmAuthenticationConfigIdPut(
    realm: string,
    id: string,
    authenticatorConfigRepresentation: AuthenticatorConfigRepresentation,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/config/{id}'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationConfigIdPut.'
      );
    }

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling realmAuthenticationConfigIdPut.'
      );
    }

    // verify required parameter 'authenticatorConfigRepresentation' is not null or undefined
    if (
      authenticatorConfigRepresentation === null ||
      authenticatorConfigRepresentation === undefined
    ) {
      throw new Error(
        'Required parameter authenticatorConfigRepresentation was null or undefined when calling realmAuthenticationConfigIdPut.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'PUT',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        authenticatorConfigRepresentation,
        'AuthenticatorConfigRepresentation'
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Update execution with new configuration
   * @param realm realm name (not id!)
   * @param executionId Execution id
   * @param authenticatorConfigRepresentation JSON with new configuration
   */
  public async realmAuthenticationExecutionsExecutionIdConfigPost(
    realm: string,
    executionId: string,
    authenticatorConfigRepresentation: AuthenticatorConfigRepresentation,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/executions/{executionId}/config'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace(
          '{' + 'executionId' + '}',
          encodeURIComponent(String(executionId))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationExecutionsExecutionIdConfigPost.'
      );
    }

    // verify required parameter 'executionId' is not null or undefined
    if (executionId === null || executionId === undefined) {
      throw new Error(
        'Required parameter executionId was null or undefined when calling realmAuthenticationExecutionsExecutionIdConfigPost.'
      );
    }

    // verify required parameter 'authenticatorConfigRepresentation' is not null or undefined
    if (
      authenticatorConfigRepresentation === null ||
      authenticatorConfigRepresentation === undefined
    ) {
      throw new Error(
        'Required parameter authenticatorConfigRepresentation was null or undefined when calling realmAuthenticationExecutionsExecutionIdConfigPost.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        authenticatorConfigRepresentation,
        'AuthenticatorConfigRepresentation'
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Delete execution
   * @param realm realm name (not id!)
   * @param executionId Execution id
   */
  public async realmAuthenticationExecutionsExecutionIdDelete(
    realm: string,
    executionId: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/executions/{executionId}'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace(
          '{' + 'executionId' + '}',
          encodeURIComponent(String(executionId))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationExecutionsExecutionIdDelete.'
      );
    }

    // verify required parameter 'executionId' is not null or undefined
    if (executionId === null || executionId === undefined) {
      throw new Error(
        'Required parameter executionId was null or undefined when calling realmAuthenticationExecutionsExecutionIdDelete.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'DELETE',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Get Single Execution
   * @param realm realm name (not id!)
   * @param executionId Execution id
   */
  public async realmAuthenticationExecutionsExecutionIdGet(
    realm: string,
    executionId: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/executions/{executionId}'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace(
          '{' + 'executionId' + '}',
          encodeURIComponent(String(executionId))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationExecutionsExecutionIdGet.'
      );
    }

    // verify required parameter 'executionId' is not null or undefined
    if (executionId === null || executionId === undefined) {
      throw new Error(
        'Required parameter executionId was null or undefined when calling realmAuthenticationExecutionsExecutionIdGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Lower executionâ€™s priority
   * @param realm realm name (not id!)
   * @param executionId Execution id
   */
  public async realmAuthenticationExecutionsExecutionIdLowerPriorityPost(
    realm: string,
    executionId: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/executions/{executionId}/lower-priority'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace(
          '{' + 'executionId' + '}',
          encodeURIComponent(String(executionId))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationExecutionsExecutionIdLowerPriorityPost.'
      );
    }

    // verify required parameter 'executionId' is not null or undefined
    if (executionId === null || executionId === undefined) {
      throw new Error(
        'Required parameter executionId was null or undefined when calling realmAuthenticationExecutionsExecutionIdLowerPriorityPost.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Raise executionâ€™s priority
   * @param realm realm name (not id!)
   * @param executionId Execution id
   */
  public async realmAuthenticationExecutionsExecutionIdRaisePriorityPost(
    realm: string,
    executionId: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/executions/{executionId}/raise-priority'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace(
          '{' + 'executionId' + '}',
          encodeURIComponent(String(executionId))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationExecutionsExecutionIdRaisePriorityPost.'
      );
    }

    // verify required parameter 'executionId' is not null or undefined
    if (executionId === null || executionId === undefined) {
      throw new Error(
        'Required parameter executionId was null or undefined when calling realmAuthenticationExecutionsExecutionIdRaisePriorityPost.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Add new authentication execution
   * @param realm realm name (not id!)
   * @param authenticationExecutionRepresentation JSON model describing authentication execution
   */
  public async realmAuthenticationExecutionsPost(
    realm: string,
    authenticationExecutionRepresentation: AuthenticationExecutionRepresentation,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/executions'.replace(
        '{' + 'realm' + '}',
        encodeURIComponent(String(realm))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationExecutionsPost.'
      );
    }

    // verify required parameter 'authenticationExecutionRepresentation' is not null or undefined
    if (
      authenticationExecutionRepresentation === null ||
      authenticationExecutionRepresentation === undefined
    ) {
      throw new Error(
        'Required parameter authenticationExecutionRepresentation was null or undefined when calling realmAuthenticationExecutionsPost.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        authenticationExecutionRepresentation,
        'AuthenticationExecutionRepresentation'
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Copy existing authentication flow under a new name   The new name is given as \'newName\' attribute of the passed JSON object
   * @param realm realm name (not id!)
   * @param flowAlias Name of the existing authentication flow
   * @param requestBody JSON containing \&#39;newName\&#39; attribute
   */
  public async realmAuthenticationFlowsFlowAliasCopyPost(
    realm: string,
    flowAlias: string,
    requestBody: { [key: string]: any },
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/flows/{flowAlias}/copy'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace(
          '{' + 'flowAlias' + '}',
          encodeURIComponent(String(flowAlias))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationFlowsFlowAliasCopyPost.'
      );
    }

    // verify required parameter 'flowAlias' is not null or undefined
    if (flowAlias === null || flowAlias === undefined) {
      throw new Error(
        'Required parameter flowAlias was null or undefined when calling realmAuthenticationFlowsFlowAliasCopyPost.'
      );
    }

    // verify required parameter 'requestBody' is not null or undefined
    if (requestBody === null || requestBody === undefined) {
      throw new Error(
        'Required parameter requestBody was null or undefined when calling realmAuthenticationFlowsFlowAliasCopyPost.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(requestBody, '{ [key: string]: any; }'),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Add new authentication execution to a flow
   * @param realm realm name (not id!)
   * @param flowAlias Alias of parent flow
   * @param requestBody New execution JSON data containing \&#39;provider\&#39; attribute
   */
  public async realmAuthenticationFlowsFlowAliasExecutionsExecutionPost(
    realm: string,
    flowAlias: string,
    requestBody: { [key: string]: any },
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/flows/{flowAlias}/executions/execution'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace(
          '{' + 'flowAlias' + '}',
          encodeURIComponent(String(flowAlias))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsExecutionPost.'
      );
    }

    // verify required parameter 'flowAlias' is not null or undefined
    if (flowAlias === null || flowAlias === undefined) {
      throw new Error(
        'Required parameter flowAlias was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsExecutionPost.'
      );
    }

    // verify required parameter 'requestBody' is not null or undefined
    if (requestBody === null || requestBody === undefined) {
      throw new Error(
        'Required parameter requestBody was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsExecutionPost.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(requestBody, '{ [key: string]: any; }'),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Add new flow with new execution to existing flow
   * @param realm realm name (not id!)
   * @param flowAlias Alias of parent authentication flow
   * @param requestBody New authentication flow / execution JSON data containing \&#39;alias\&#39;, \&#39;type\&#39;, \&#39;provider\&#39;, and \&#39;description\&#39; attributes
   */
  public async realmAuthenticationFlowsFlowAliasExecutionsFlowPost(
    realm: string,
    flowAlias: string,
    requestBody: { [key: string]: any },
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/flows/{flowAlias}/executions/flow'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace(
          '{' + 'flowAlias' + '}',
          encodeURIComponent(String(flowAlias))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsFlowPost.'
      );
    }

    // verify required parameter 'flowAlias' is not null or undefined
    if (flowAlias === null || flowAlias === undefined) {
      throw new Error(
        'Required parameter flowAlias was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsFlowPost.'
      );
    }

    // verify required parameter 'requestBody' is not null or undefined
    if (requestBody === null || requestBody === undefined) {
      throw new Error(
        'Required parameter requestBody was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsFlowPost.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(requestBody, '{ [key: string]: any; }'),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Get authentication executions for a flow
   * @param realm realm name (not id!)
   * @param flowAlias Flow alias
   */
  public async realmAuthenticationFlowsFlowAliasExecutionsGet(
    realm: string,
    flowAlias: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/flows/{flowAlias}/executions'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace(
          '{' + 'flowAlias' + '}',
          encodeURIComponent(String(flowAlias))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsGet.'
      );
    }

    // verify required parameter 'flowAlias' is not null or undefined
    if (flowAlias === null || flowAlias === undefined) {
      throw new Error(
        'Required parameter flowAlias was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Update authentication executions of a Flow
   * @param realm realm name (not id!)
   * @param flowAlias Flow alias
   * @param authenticationExecutionInfoRepresentation AuthenticationExecutionInfoRepresentation
   */
  public async realmAuthenticationFlowsFlowAliasExecutionsPut(
    realm: string,
    flowAlias: string,
    authenticationExecutionInfoRepresentation: AuthenticationExecutionInfoRepresentation,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/flows/{flowAlias}/executions'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace(
          '{' + 'flowAlias' + '}',
          encodeURIComponent(String(flowAlias))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsPut.'
      );
    }

    // verify required parameter 'flowAlias' is not null or undefined
    if (flowAlias === null || flowAlias === undefined) {
      throw new Error(
        'Required parameter flowAlias was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsPut.'
      );
    }

    // verify required parameter 'authenticationExecutionInfoRepresentation' is not null or undefined
    if (
      authenticationExecutionInfoRepresentation === null ||
      authenticationExecutionInfoRepresentation === undefined
    ) {
      throw new Error(
        'Required parameter authenticationExecutionInfoRepresentation was null or undefined when calling realmAuthenticationFlowsFlowAliasExecutionsPut.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'PUT',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        authenticationExecutionInfoRepresentation,
        'AuthenticationExecutionInfoRepresentation'
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Get authentication flows   Returns a stream of authentication flows.
   * @param realm realm name (not id!)
   */
  public async realmAuthenticationFlowsGet(
    realm: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: Array<{ [key: string]: any }>;
  }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/flows'.replace(
        '{' + 'realm' + '}',
        encodeURIComponent(String(realm))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationFlowsGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: Array<{ [key: string]: any }>;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'Array<{ [key: string]: any; }>'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Delete an authentication flow
   * @param realm realm name (not id!)
   * @param id Flow id
   */
  public async realmAuthenticationFlowsIdDelete(
    realm: string,
    id: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/flows/{id}'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationFlowsIdDelete.'
      );
    }

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling realmAuthenticationFlowsIdDelete.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'DELETE',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Get authentication flow for id
   * @param realm realm name (not id!)
   * @param id Flow id
   */
  public async realmAuthenticationFlowsIdGet(
    realm: string,
    id: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: AuthenticationFlowRepresentation;
  }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/flows/{id}'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationFlowsIdGet.'
      );
    }

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling realmAuthenticationFlowsIdGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: AuthenticationFlowRepresentation;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'AuthenticationFlowRepresentation'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Update an authentication flow
   * @param realm realm name (not id!)
   * @param id Flow id
   * @param authenticationFlowRepresentation Authentication flow representation
   */
  public async realmAuthenticationFlowsIdPut(
    realm: string,
    id: string,
    authenticationFlowRepresentation: AuthenticationFlowRepresentation,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/flows/{id}'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationFlowsIdPut.'
      );
    }

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling realmAuthenticationFlowsIdPut.'
      );
    }

    // verify required parameter 'authenticationFlowRepresentation' is not null or undefined
    if (
      authenticationFlowRepresentation === null ||
      authenticationFlowRepresentation === undefined
    ) {
      throw new Error(
        'Required parameter authenticationFlowRepresentation was null or undefined when calling realmAuthenticationFlowsIdPut.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'PUT',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        authenticationFlowRepresentation,
        'AuthenticationFlowRepresentation'
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Create a new authentication flow
   * @param realm realm name (not id!)
   * @param authenticationFlowRepresentation Authentication flow representation
   */
  public async realmAuthenticationFlowsPost(
    realm: string,
    authenticationFlowRepresentation: AuthenticationFlowRepresentation,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/flows'.replace(
        '{' + 'realm' + '}',
        encodeURIComponent(String(realm))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationFlowsPost.'
      );
    }

    // verify required parameter 'authenticationFlowRepresentation' is not null or undefined
    if (
      authenticationFlowRepresentation === null ||
      authenticationFlowRepresentation === undefined
    ) {
      throw new Error(
        'Required parameter authenticationFlowRepresentation was null or undefined when calling realmAuthenticationFlowsPost.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        authenticationFlowRepresentation,
        'AuthenticationFlowRepresentation'
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Get form action providers   Returns a stream of form action providers.
   * @param realm realm name (not id!)
   */
  public async realmAuthenticationFormActionProvidersGet(
    realm: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: Array<{ [key: string]: any }>;
  }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/form-action-providers'.replace(
        '{' + 'realm' + '}',
        encodeURIComponent(String(realm))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationFormActionProvidersGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: Array<{ [key: string]: any }>;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'Array<{ [key: string]: any; }>'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Get form providers   Returns a stream of form providers.
   * @param realm realm name (not id!)
   */
  public async realmAuthenticationFormProvidersGet(
    realm: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: Array<{ [key: string]: any }>;
  }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/form-providers'.replace(
        '{' + 'realm' + '}',
        encodeURIComponent(String(realm))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationFormProvidersGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: Array<{ [key: string]: any }>;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'Array<{ [key: string]: any; }>'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Get configuration descriptions for all clients
   * @param realm realm name (not id!)
   */
  public async realmAuthenticationPerClientConfigDescriptionGet(
    realm: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: { [key: string]: any } }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/per-client-config-description'.replace(
        '{' + 'realm' + '}',
        encodeURIComponent(String(realm))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationPerClientConfigDescriptionGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: { [key: string]: any };
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                '{ [key: string]: any; }'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Register a new required actions
   * @param realm realm name (not id!)
   * @param requestBody JSON containing \&#39;providerId\&#39;, and \&#39;name\&#39; attributes.
   */
  public async realmAuthenticationRegisterRequiredActionPost(
    realm: string,
    requestBody: { [key: string]: any },
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/register-required-action'.replace(
        '{' + 'realm' + '}',
        encodeURIComponent(String(realm))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationRegisterRequiredActionPost.'
      );
    }

    // verify required parameter 'requestBody' is not null or undefined
    if (requestBody === null || requestBody === undefined) {
      throw new Error(
        'Required parameter requestBody was null or undefined when calling realmAuthenticationRegisterRequiredActionPost.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(requestBody, '{ [key: string]: any; }'),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Delete required action
   * @param realm realm name (not id!)
   * @param alias Alias of required action
   */
  public async realmAuthenticationRequiredActionsAliasDelete(
    realm: string,
    alias: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/required-actions/{alias}'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'alias' + '}', encodeURIComponent(String(alias)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationRequiredActionsAliasDelete.'
      );
    }

    // verify required parameter 'alias' is not null or undefined
    if (alias === null || alias === undefined) {
      throw new Error(
        'Required parameter alias was null or undefined when calling realmAuthenticationRequiredActionsAliasDelete.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'DELETE',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Get required action for alias
   * @param realm realm name (not id!)
   * @param alias Alias of required action
   */
  public async realmAuthenticationRequiredActionsAliasGet(
    realm: string,
    alias: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: RequiredActionProviderRepresentation;
  }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/required-actions/{alias}'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'alias' + '}', encodeURIComponent(String(alias)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationRequiredActionsAliasGet.'
      );
    }

    // verify required parameter 'alias' is not null or undefined
    if (alias === null || alias === undefined) {
      throw new Error(
        'Required parameter alias was null or undefined when calling realmAuthenticationRequiredActionsAliasGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: RequiredActionProviderRepresentation;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'RequiredActionProviderRepresentation'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Lower required actionâ€™s priority
   * @param realm realm name (not id!)
   * @param alias Alias of required action
   */
  public async realmAuthenticationRequiredActionsAliasLowerPriorityPost(
    realm: string,
    alias: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/required-actions/{alias}/lower-priority'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'alias' + '}', encodeURIComponent(String(alias)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationRequiredActionsAliasLowerPriorityPost.'
      );
    }

    // verify required parameter 'alias' is not null or undefined
    if (alias === null || alias === undefined) {
      throw new Error(
        'Required parameter alias was null or undefined when calling realmAuthenticationRequiredActionsAliasLowerPriorityPost.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Update required action
   * @param realm realm name (not id!)
   * @param alias Alias of required action
   * @param requiredActionProviderRepresentation JSON describing new state of required action
   */
  public async realmAuthenticationRequiredActionsAliasPut(
    realm: string,
    alias: string,
    requiredActionProviderRepresentation: RequiredActionProviderRepresentation,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/required-actions/{alias}'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'alias' + '}', encodeURIComponent(String(alias)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationRequiredActionsAliasPut.'
      );
    }

    // verify required parameter 'alias' is not null or undefined
    if (alias === null || alias === undefined) {
      throw new Error(
        'Required parameter alias was null or undefined when calling realmAuthenticationRequiredActionsAliasPut.'
      );
    }

    // verify required parameter 'requiredActionProviderRepresentation' is not null or undefined
    if (
      requiredActionProviderRepresentation === null ||
      requiredActionProviderRepresentation === undefined
    ) {
      throw new Error(
        'Required parameter requiredActionProviderRepresentation was null or undefined when calling realmAuthenticationRequiredActionsAliasPut.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'PUT',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        requiredActionProviderRepresentation,
        'RequiredActionProviderRepresentation'
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Raise required actionâ€™s priority
   * @param realm realm name (not id!)
   * @param alias Alias of required action
   */
  public async realmAuthenticationRequiredActionsAliasRaisePriorityPost(
    realm: string,
    alias: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/required-actions/{alias}/raise-priority'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'alias' + '}', encodeURIComponent(String(alias)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationRequiredActionsAliasRaisePriorityPost.'
      );
    }

    // verify required parameter 'alias' is not null or undefined
    if (alias === null || alias === undefined) {
      throw new Error(
        'Required parameter alias was null or undefined when calling realmAuthenticationRequiredActionsAliasRaisePriorityPost.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Get required actions   Returns a stream of required actions.
   * @param realm realm name (not id!)
   */
  public async realmAuthenticationRequiredActionsGet(
    realm: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: Array<{ [key: string]: any }>;
  }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/required-actions'.replace(
        '{' + 'realm' + '}',
        encodeURIComponent(String(realm))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationRequiredActionsGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: Array<{ [key: string]: any }>;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'Array<{ [key: string]: any; }>'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Get unregistered required actions   Returns a stream of unregistered required actions.
   * @param realm realm name (not id!)
   */
  public async realmAuthenticationUnregisteredRequiredActionsGet(
    realm: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: Array<{ [key: string]: any }>;
  }> {
    const localVarPath =
      this.basePath +
      '/{realm}/authentication/unregistered-required-actions'.replace(
        '{' + 'realm' + '}',
        encodeURIComponent(String(realm))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmAuthenticationUnregisteredRequiredActionsGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: Array<{ [key: string]: any }>;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'Array<{ [key: string]: any; }>'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
}
