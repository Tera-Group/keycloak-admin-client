/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { IdentityProviderMapperRepresentation } from '../model/identityProviderMapperRepresentation';
import { IdentityProviderRepresentation } from '../model/identityProviderRepresentation';
import { ManagementPermissionReference } from '../model/managementPermissionReference';

import {
  ObjectSerializer,
  Authentication,
  VoidAuth,
  Interceptor,
} from '../model/models';
import {
  HttpBasicAuth,
  HttpBearerAuth,
  ApiKeyAuth,
  OAuth,
} from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'http://localhost';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum IdentityProvidersApiApiKeys {}

export class IdentityProvidersApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
    access_token: new HttpBearerAuth(),
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(
    basePathOrUsername: string,
    password?: string,
    basePath?: string
  ) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: IdentityProvidersApiApiKeys, value: string) {
    (this.authentications as any)[
      IdentityProvidersApiApiKeys[key]
    ].apiKey = value;
  }

  set accessToken(accessToken: string | (() => string)) {
    this.authentications.access_token.accessToken = accessToken;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   *
   * @summary Import identity provider from uploaded JSON file
   * @param realm realm name (not id!)
   */
  public async realmIdentityProviderImportConfigPost(
    realm: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: { [key: string]: any } }> {
    const localVarPath =
      this.basePath +
      '/{realm}/identity-provider/import-config'.replace(
        '{' + 'realm' + '}',
        encodeURIComponent(String(realm))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmIdentityProviderImportConfigPost.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: { [key: string]: any };
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                '{ [key: string]: any; }'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Delete the identity provider
   * @param realm realm name (not id!)
   * @param alias
   */
  public async realmIdentityProviderInstancesAliasDelete(
    realm: string,
    alias: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/identity-provider/instances/{alias}'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'alias' + '}', encodeURIComponent(String(alias)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasDelete.'
      );
    }

    // verify required parameter 'alias' is not null or undefined
    if (alias === null || alias === undefined) {
      throw new Error(
        'Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasDelete.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'DELETE',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Export public broker configuration for identity provider
   * @param realm realm name (not id!)
   * @param alias
   * @param format Format to use
   */
  public async realmIdentityProviderInstancesAliasExportGet(
    realm: string,
    alias: string,
    format?: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/identity-provider/instances/{alias}/export'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'alias' + '}', encodeURIComponent(String(alias)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasExportGet.'
      );
    }

    // verify required parameter 'alias' is not null or undefined
    if (alias === null || alias === undefined) {
      throw new Error(
        'Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasExportGet.'
      );
    }

    if (format !== undefined) {
      localVarQueryParameters['format'] = ObjectSerializer.serialize(
        format,
        'string'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Get the identity provider
   * @param realm realm name (not id!)
   * @param alias
   */
  public async realmIdentityProviderInstancesAliasGet(
    realm: string,
    alias: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: IdentityProviderRepresentation;
  }> {
    const localVarPath =
      this.basePath +
      '/{realm}/identity-provider/instances/{alias}'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'alias' + '}', encodeURIComponent(String(alias)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasGet.'
      );
    }

    // verify required parameter 'alias' is not null or undefined
    if (alias === null || alias === undefined) {
      throw new Error(
        'Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: IdentityProviderRepresentation;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'IdentityProviderRepresentation'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
   * @param realm realm name (not id!)
   * @param alias
   */
  public async realmIdentityProviderInstancesAliasManagementPermissionsGet(
    realm: string,
    alias: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: ManagementPermissionReference;
  }> {
    const localVarPath =
      this.basePath +
      '/{realm}/identity-provider/instances/{alias}/management/permissions'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'alias' + '}', encodeURIComponent(String(alias)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasManagementPermissionsGet.'
      );
    }

    // verify required parameter 'alias' is not null or undefined
    if (alias === null || alias === undefined) {
      throw new Error(
        'Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasManagementPermissionsGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: ManagementPermissionReference;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'ManagementPermissionReference'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
   * @param realm realm name (not id!)
   * @param alias
   * @param managementPermissionReference
   */
  public async realmIdentityProviderInstancesAliasManagementPermissionsPut(
    realm: string,
    alias: string,
    managementPermissionReference: ManagementPermissionReference,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: ManagementPermissionReference;
  }> {
    const localVarPath =
      this.basePath +
      '/{realm}/identity-provider/instances/{alias}/management/permissions'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'alias' + '}', encodeURIComponent(String(alias)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasManagementPermissionsPut.'
      );
    }

    // verify required parameter 'alias' is not null or undefined
    if (alias === null || alias === undefined) {
      throw new Error(
        'Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasManagementPermissionsPut.'
      );
    }

    // verify required parameter 'managementPermissionReference' is not null or undefined
    if (
      managementPermissionReference === null ||
      managementPermissionReference === undefined
    ) {
      throw new Error(
        'Required parameter managementPermissionReference was null or undefined when calling realmIdentityProviderInstancesAliasManagementPermissionsPut.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'PUT',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        managementPermissionReference,
        'ManagementPermissionReference'
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: ManagementPermissionReference;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'ManagementPermissionReference'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Get mapper types for identity provider
   * @param realm realm name (not id!)
   * @param alias
   */
  public async realmIdentityProviderInstancesAliasMapperTypesGet(
    realm: string,
    alias: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/identity-provider/instances/{alias}/mapper-types'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'alias' + '}', encodeURIComponent(String(alias)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasMapperTypesGet.'
      );
    }

    // verify required parameter 'alias' is not null or undefined
    if (alias === null || alias === undefined) {
      throw new Error(
        'Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasMapperTypesGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Get mappers for identity provider
   * @param realm realm name (not id!)
   * @param alias
   */
  public async realmIdentityProviderInstancesAliasMappersGet(
    realm: string,
    alias: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: Array<{ [key: string]: any }>;
  }> {
    const localVarPath =
      this.basePath +
      '/{realm}/identity-provider/instances/{alias}/mappers'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'alias' + '}', encodeURIComponent(String(alias)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasMappersGet.'
      );
    }

    // verify required parameter 'alias' is not null or undefined
    if (alias === null || alias === undefined) {
      throw new Error(
        'Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasMappersGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: Array<{ [key: string]: any }>;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'Array<{ [key: string]: any; }>'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Delete a mapper for the identity provider
   * @param realm realm name (not id!)
   * @param alias
   * @param id Mapper id
   */
  public async realmIdentityProviderInstancesAliasMappersIdDelete(
    realm: string,
    alias: string,
    id: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/identity-provider/instances/{alias}/mappers/{id}'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'alias' + '}', encodeURIComponent(String(alias)))
        .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasMappersIdDelete.'
      );
    }

    // verify required parameter 'alias' is not null or undefined
    if (alias === null || alias === undefined) {
      throw new Error(
        'Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasMappersIdDelete.'
      );
    }

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling realmIdentityProviderInstancesAliasMappersIdDelete.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'DELETE',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Get mapper by id for the identity provider
   * @param realm realm name (not id!)
   * @param alias
   * @param id Mapper id
   */
  public async realmIdentityProviderInstancesAliasMappersIdGet(
    realm: string,
    alias: string,
    id: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: IdentityProviderMapperRepresentation;
  }> {
    const localVarPath =
      this.basePath +
      '/{realm}/identity-provider/instances/{alias}/mappers/{id}'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'alias' + '}', encodeURIComponent(String(alias)))
        .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasMappersIdGet.'
      );
    }

    // verify required parameter 'alias' is not null or undefined
    if (alias === null || alias === undefined) {
      throw new Error(
        'Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasMappersIdGet.'
      );
    }

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling realmIdentityProviderInstancesAliasMappersIdGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: IdentityProviderMapperRepresentation;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'IdentityProviderMapperRepresentation'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Update a mapper for the identity provider
   * @param realm realm name (not id!)
   * @param alias
   * @param id Mapper id
   * @param identityProviderMapperRepresentation
   */
  public async realmIdentityProviderInstancesAliasMappersIdPut(
    realm: string,
    alias: string,
    id: string,
    identityProviderMapperRepresentation: IdentityProviderMapperRepresentation,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/identity-provider/instances/{alias}/mappers/{id}'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'alias' + '}', encodeURIComponent(String(alias)))
        .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasMappersIdPut.'
      );
    }

    // verify required parameter 'alias' is not null or undefined
    if (alias === null || alias === undefined) {
      throw new Error(
        'Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasMappersIdPut.'
      );
    }

    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling realmIdentityProviderInstancesAliasMappersIdPut.'
      );
    }

    // verify required parameter 'identityProviderMapperRepresentation' is not null or undefined
    if (
      identityProviderMapperRepresentation === null ||
      identityProviderMapperRepresentation === undefined
    ) {
      throw new Error(
        'Required parameter identityProviderMapperRepresentation was null or undefined when calling realmIdentityProviderInstancesAliasMappersIdPut.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'PUT',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        identityProviderMapperRepresentation,
        'IdentityProviderMapperRepresentation'
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Add a mapper to identity provider
   * @param realm realm name (not id!)
   * @param alias
   * @param identityProviderMapperRepresentation
   */
  public async realmIdentityProviderInstancesAliasMappersPost(
    realm: string,
    alias: string,
    identityProviderMapperRepresentation: IdentityProviderMapperRepresentation,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/identity-provider/instances/{alias}/mappers'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'alias' + '}', encodeURIComponent(String(alias)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasMappersPost.'
      );
    }

    // verify required parameter 'alias' is not null or undefined
    if (alias === null || alias === undefined) {
      throw new Error(
        'Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasMappersPost.'
      );
    }

    // verify required parameter 'identityProviderMapperRepresentation' is not null or undefined
    if (
      identityProviderMapperRepresentation === null ||
      identityProviderMapperRepresentation === undefined
    ) {
      throw new Error(
        'Required parameter identityProviderMapperRepresentation was null or undefined when calling realmIdentityProviderInstancesAliasMappersPost.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        identityProviderMapperRepresentation,
        'IdentityProviderMapperRepresentation'
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Update the identity provider
   * @param realm realm name (not id!)
   * @param alias
   * @param identityProviderRepresentation
   */
  public async realmIdentityProviderInstancesAliasPut(
    realm: string,
    alias: string,
    identityProviderRepresentation: IdentityProviderRepresentation,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/identity-provider/instances/{alias}'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace('{' + 'alias' + '}', encodeURIComponent(String(alias)));
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmIdentityProviderInstancesAliasPut.'
      );
    }

    // verify required parameter 'alias' is not null or undefined
    if (alias === null || alias === undefined) {
      throw new Error(
        'Required parameter alias was null or undefined when calling realmIdentityProviderInstancesAliasPut.'
      );
    }

    // verify required parameter 'identityProviderRepresentation' is not null or undefined
    if (
      identityProviderRepresentation === null ||
      identityProviderRepresentation === undefined
    ) {
      throw new Error(
        'Required parameter identityProviderRepresentation was null or undefined when calling realmIdentityProviderInstancesAliasPut.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'PUT',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        identityProviderRepresentation,
        'IdentityProviderRepresentation'
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Get identity providers
   * @param realm realm name (not id!)
   */
  public async realmIdentityProviderInstancesGet(
    realm: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{
    response: http.IncomingMessage;
    body: Array<{ [key: string]: any }>;
  }> {
    const localVarPath =
      this.basePath +
      '/{realm}/identity-provider/instances'.replace(
        '{' + 'realm' + '}',
        encodeURIComponent(String(realm))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmIdentityProviderInstancesGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{
        response: http.IncomingMessage;
        body: Array<{ [key: string]: any }>;
      }>((resolve, reject) => {
        localVarRequest(localVarRequestOptions, (error, response, body) => {
          if (error) {
            reject(error);
          } else {
            if (
              response.statusCode &&
              response.statusCode >= 200 &&
              response.statusCode <= 299
            ) {
              body = ObjectSerializer.deserialize(
                body,
                'Array<{ [key: string]: any; }>'
              );
              resolve({ response: response, body: body });
            } else {
              reject(new HttpError(response, body, response.statusCode));
            }
          }
        });
      });
    });
  }
  /**
   *
   * @summary Create a new identity provider
   * @param realm realm name (not id!)
   * @param identityProviderRepresentation JSON body
   */
  public async realmIdentityProviderInstancesPost(
    realm: string,
    identityProviderRepresentation: IdentityProviderRepresentation,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/identity-provider/instances'.replace(
        '{' + 'realm' + '}',
        encodeURIComponent(String(realm))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmIdentityProviderInstancesPost.'
      );
    }

    // verify required parameter 'identityProviderRepresentation' is not null or undefined
    if (
      identityProviderRepresentation === null ||
      identityProviderRepresentation === undefined
    ) {
      throw new Error(
        'Required parameter identityProviderRepresentation was null or undefined when calling realmIdentityProviderInstancesPost.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(
        identityProviderRepresentation,
        'IdentityProviderRepresentation'
      ),
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Get identity providers
   * @param realm realm name (not id!)
   * @param providerId Provider id
   */
  public async realmIdentityProviderProvidersProviderIdGet(
    realm: string,
    providerId: string,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body?: any }> {
    const localVarPath =
      this.basePath +
      '/{realm}/identity-provider/providers/{provider_id}'
        .replace('{' + 'realm' + '}', encodeURIComponent(String(realm)))
        .replace(
          '{' + 'provider_id' + '}',
          encodeURIComponent(String(providerId))
        );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign(
      {},
      this._defaultHeaders
    );
    let localVarFormParams: any = {};

    // verify required parameter 'realm' is not null or undefined
    if (realm === null || realm === undefined) {
      throw new Error(
        'Required parameter realm was null or undefined when calling realmIdentityProviderProvidersProviderIdGet.'
      );
    }

    // verify required parameter 'providerId' is not null or undefined
    if (providerId === null || providerId === undefined) {
      throw new Error(
        'Required parameter providerId was null or undefined when calling realmIdentityProviderProvidersProviderIdGet.'
      );
    }

    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'GET',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
    };

    let authenticationPromise = Promise.resolve();
    if (this.authentications.access_token.accessToken) {
      authenticationPromise = authenticationPromise.then(() =>
        this.authentications.access_token.applyToRequest(localVarRequestOptions)
      );
    }
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() =>
        interceptor(localVarRequestOptions)
      );
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body?: any }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              if (
                response.statusCode &&
                response.statusCode >= 200 &&
                response.statusCode <= 299
              ) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
}
