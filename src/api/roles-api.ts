/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { ManagementPermissionReference } from '../model';
// @ts-ignore
import { RoleRepresentation } from '../model';
/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Get all roles for the realm or client
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {boolean} [briefRepresentation]
     * @param {number} [first]
     * @param {number} [max]
     * @param {string} [search]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesGet: async (
      realm: string,
      id: string,
      briefRepresentation?: boolean,
      first?: number,
      max?: number,
      search?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmClientsIdRolesGet', 'realm', realm);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmClientsIdRolesGet', 'id', id);
      const localVarPath = `/{realm}/clients/{id}/roles`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (briefRepresentation !== undefined) {
        localVarQueryParameter['briefRepresentation'] = briefRepresentation;
      }

      if (first !== undefined) {
        localVarQueryParameter['first'] = first;
      }

      if (max !== undefined) {
        localVarQueryParameter['max'] = max;
      }

      if (search !== undefined) {
        localVarQueryParameter['search'] = search;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new role for the realm or client
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {RoleRepresentation} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesPost: async (
      realm: string,
      id: string,
      roleRepresentation: RoleRepresentation,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmClientsIdRolesPost', 'realm', realm);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmClientsIdRolesPost', 'id', id);
      // verify required parameter 'roleRepresentation' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesPost',
        'roleRepresentation',
        roleRepresentation
      );
      const localVarPath = `/{realm}/clients/{id}/roles`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get client-level roles for the client that are in the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {string} clientUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameCompositesClientsClientUuidGet: async (
      realm: string,
      id: string,
      roleName: string,
      clientUuid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameCompositesClientsClientUuidGet',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameCompositesClientsClientUuidGet',
        'id',
        id
      );
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameCompositesClientsClientUuidGet',
        'roleName',
        roleName
      );
      // verify required parameter 'clientUuid' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameCompositesClientsClientUuidGet',
        'clientUuid',
        clientUuid
      );
      const localVarPath =
        `/{realm}/clients/{id}/roles/{role-name}/composites/clients/{clientUuid}`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'id'}}`, encodeURIComponent(String(id)))
          .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)))
          .replace(`{${'clientUuid'}}`, encodeURIComponent(String(clientUuid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove roles from the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {Array<RoleRepresentation>} roleRepresentation roles to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameCompositesDelete: async (
      realm: string,
      id: string,
      roleName: string,
      roleRepresentation: Array<RoleRepresentation>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameCompositesDelete',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameCompositesDelete',
        'id',
        id
      );
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameCompositesDelete',
        'roleName',
        roleName
      );
      // verify required parameter 'roleRepresentation' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameCompositesDelete',
        'roleRepresentation',
        roleRepresentation
      );
      const localVarPath = `/{realm}/clients/{id}/roles/{role-name}/composites`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get composites of the role
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameCompositesGet: async (
      realm: string,
      id: string,
      roleName: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameCompositesGet',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmClientsIdRolesRoleNameCompositesGet', 'id', id);
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameCompositesGet',
        'roleName',
        roleName
      );
      const localVarPath = `/{realm}/clients/{id}/roles/{role-name}/composites`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a composite to the role
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameCompositesPost: async (
      realm: string,
      id: string,
      roleName: string,
      roleRepresentation: Array<RoleRepresentation>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameCompositesPost',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmClientsIdRolesRoleNameCompositesPost', 'id', id);
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameCompositesPost',
        'roleName',
        roleName
      );
      // verify required parameter 'roleRepresentation' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameCompositesPost',
        'roleRepresentation',
        roleRepresentation
      );
      const localVarPath = `/{realm}/clients/{id}/roles/{role-name}/composites`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get realm-level roles of the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameCompositesRealmGet: async (
      realm: string,
      id: string,
      roleName: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameCompositesRealmGet',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameCompositesRealmGet',
        'id',
        id
      );
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameCompositesRealmGet',
        'roleName',
        roleName
      );
      const localVarPath =
        `/{realm}/clients/{id}/roles/{role-name}/composites/realm`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'id'}}`, encodeURIComponent(String(id)))
          .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a role by name
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameDelete: async (
      realm: string,
      id: string,
      roleName: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmClientsIdRolesRoleNameDelete', 'realm', realm);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmClientsIdRolesRoleNameDelete', 'id', id);
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameDelete',
        'roleName',
        roleName
      );
      const localVarPath = `/{realm}/clients/{id}/roles/{role-name}`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a role by name
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameGet: async (
      realm: string,
      id: string,
      roleName: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmClientsIdRolesRoleNameGet', 'realm', realm);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmClientsIdRolesRoleNameGet', 'id', id);
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists('realmClientsIdRolesRoleNameGet', 'roleName', roleName);
      const localVarPath = `/{realm}/clients/{id}/roles/{role-name}`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Returns a stream of groups that have the specified role name
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName the role name.
     * @param {boolean} [briefRepresentation] if false, return a full representation of the {@code GroupRepresentation} objects.
     * @param {number} [first] first result to return. Ignored if negative or {@code null}.
     * @param {number} [max] maximum number of results to return. Ignored if negative or {@code null}.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameGroupsGet: async (
      realm: string,
      id: string,
      roleName: string,
      briefRepresentation?: boolean,
      first?: number,
      max?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmClientsIdRolesRoleNameGroupsGet', 'realm', realm);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmClientsIdRolesRoleNameGroupsGet', 'id', id);
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameGroupsGet',
        'roleName',
        roleName
      );
      const localVarPath = `/{realm}/clients/{id}/roles/{role-name}/groups`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (briefRepresentation !== undefined) {
        localVarQueryParameter['briefRepresentation'] = briefRepresentation;
      }

      if (first !== undefined) {
        localVarQueryParameter['first'] = first;
      }

      if (max !== undefined) {
        localVarQueryParameter['max'] = max;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameManagementPermissionsGet: async (
      realm: string,
      id: string,
      roleName: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameManagementPermissionsGet',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameManagementPermissionsGet',
        'id',
        id
      );
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameManagementPermissionsGet',
        'roleName',
        roleName
      );
      const localVarPath =
        `/{realm}/clients/{id}/roles/{role-name}/management/permissions`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'id'}}`, encodeURIComponent(String(id)))
          .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName
     * @param {ManagementPermissionReference} managementPermissionReference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameManagementPermissionsPut: async (
      realm: string,
      id: string,
      roleName: string,
      managementPermissionReference: ManagementPermissionReference,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameManagementPermissionsPut',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameManagementPermissionsPut',
        'id',
        id
      );
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameManagementPermissionsPut',
        'roleName',
        roleName
      );
      // verify required parameter 'managementPermissionReference' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameManagementPermissionsPut',
        'managementPermissionReference',
        managementPermissionReference
      );
      const localVarPath =
        `/{realm}/clients/{id}/roles/{role-name}/management/permissions`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'id'}}`, encodeURIComponent(String(id)))
          .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        managementPermissionReference,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a role by name
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {RoleRepresentation} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNamePut: async (
      realm: string,
      id: string,
      roleName: string,
      roleRepresentation: RoleRepresentation,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmClientsIdRolesRoleNamePut', 'realm', realm);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmClientsIdRolesRoleNamePut', 'id', id);
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists('realmClientsIdRolesRoleNamePut', 'roleName', roleName);
      // verify required parameter 'roleRepresentation' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNamePut',
        'roleRepresentation',
        roleRepresentation
      );
      const localVarPath = `/{realm}/clients/{id}/roles/{role-name}`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Returns a stream of users that have the specified role name.
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName the role name.
     * @param {number} [first] first result to return. Ignored if negative or {@code null}.
     * @param {number} [max] maximum number of results to return. Ignored if negative or {@code null}.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameUsersGet: async (
      realm: string,
      id: string,
      roleName: string,
      first?: number,
      max?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmClientsIdRolesRoleNameUsersGet', 'realm', realm);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmClientsIdRolesRoleNameUsersGet', 'id', id);
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists(
        'realmClientsIdRolesRoleNameUsersGet',
        'roleName',
        roleName
      );
      const localVarPath = `/{realm}/clients/{id}/roles/{role-name}/users`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (first !== undefined) {
        localVarQueryParameter['first'] = first;
      }

      if (max !== undefined) {
        localVarQueryParameter['max'] = max;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all roles for the realm or client
     * @param {string} realm realm name (not id!)
     * @param {boolean} [briefRepresentation]
     * @param {number} [first]
     * @param {number} [max]
     * @param {string} [search]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesGet: async (
      realm: string,
      briefRepresentation?: boolean,
      first?: number,
      max?: number,
      search?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmRolesGet', 'realm', realm);
      const localVarPath = `/{realm}/roles`.replace(
        `{${'realm'}}`,
        encodeURIComponent(String(realm))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (briefRepresentation !== undefined) {
        localVarQueryParameter['briefRepresentation'] = briefRepresentation;
      }

      if (first !== undefined) {
        localVarQueryParameter['first'] = first;
      }

      if (max !== undefined) {
        localVarQueryParameter['max'] = max;
      }

      if (search !== undefined) {
        localVarQueryParameter['search'] = search;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new role for the realm or client
     * @param {string} realm realm name (not id!)
     * @param {RoleRepresentation} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesPost: async (
      realm: string,
      roleRepresentation: RoleRepresentation,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmRolesPost', 'realm', realm);
      // verify required parameter 'roleRepresentation' is not null or undefined
      assertParamExists(
        'realmRolesPost',
        'roleRepresentation',
        roleRepresentation
      );
      const localVarPath = `/{realm}/roles`.replace(
        `{${'realm'}}`,
        encodeURIComponent(String(realm))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get client-level roles for the client that are in the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {string} clientUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameCompositesClientsClientUuidGet: async (
      realm: string,
      roleName: string,
      clientUuid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmRolesRoleNameCompositesClientsClientUuidGet',
        'realm',
        realm
      );
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists(
        'realmRolesRoleNameCompositesClientsClientUuidGet',
        'roleName',
        roleName
      );
      // verify required parameter 'clientUuid' is not null or undefined
      assertParamExists(
        'realmRolesRoleNameCompositesClientsClientUuidGet',
        'clientUuid',
        clientUuid
      );
      const localVarPath =
        `/{realm}/roles/{role-name}/composites/clients/{clientUuid}`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)))
          .replace(`{${'clientUuid'}}`, encodeURIComponent(String(clientUuid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove roles from the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {Array<RoleRepresentation>} roleRepresentation roles to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameCompositesDelete: async (
      realm: string,
      roleName: string,
      roleRepresentation: Array<RoleRepresentation>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmRolesRoleNameCompositesDelete', 'realm', realm);
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists(
        'realmRolesRoleNameCompositesDelete',
        'roleName',
        roleName
      );
      // verify required parameter 'roleRepresentation' is not null or undefined
      assertParamExists(
        'realmRolesRoleNameCompositesDelete',
        'roleRepresentation',
        roleRepresentation
      );
      const localVarPath = `/{realm}/roles/{role-name}/composites`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get composites of the role
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameCompositesGet: async (
      realm: string,
      roleName: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmRolesRoleNameCompositesGet', 'realm', realm);
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists(
        'realmRolesRoleNameCompositesGet',
        'roleName',
        roleName
      );
      const localVarPath = `/{realm}/roles/{role-name}/composites`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a composite to the role
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameCompositesPost: async (
      realm: string,
      roleName: string,
      roleRepresentation: Array<RoleRepresentation>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmRolesRoleNameCompositesPost', 'realm', realm);
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists(
        'realmRolesRoleNameCompositesPost',
        'roleName',
        roleName
      );
      // verify required parameter 'roleRepresentation' is not null or undefined
      assertParamExists(
        'realmRolesRoleNameCompositesPost',
        'roleRepresentation',
        roleRepresentation
      );
      const localVarPath = `/{realm}/roles/{role-name}/composites`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get realm-level roles of the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameCompositesRealmGet: async (
      realm: string,
      roleName: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmRolesRoleNameCompositesRealmGet', 'realm', realm);
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists(
        'realmRolesRoleNameCompositesRealmGet',
        'roleName',
        roleName
      );
      const localVarPath = `/{realm}/roles/{role-name}/composites/realm`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a role by name
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameDelete: async (
      realm: string,
      roleName: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmRolesRoleNameDelete', 'realm', realm);
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists('realmRolesRoleNameDelete', 'roleName', roleName);
      const localVarPath = `/{realm}/roles/{role-name}`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a role by name
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameGet: async (
      realm: string,
      roleName: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmRolesRoleNameGet', 'realm', realm);
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists('realmRolesRoleNameGet', 'roleName', roleName);
      const localVarPath = `/{realm}/roles/{role-name}`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Returns a stream of groups that have the specified role name
     * @param {string} realm realm name (not id!)
     * @param {string} roleName the role name.
     * @param {boolean} [briefRepresentation] if false, return a full representation of the {@code GroupRepresentation} objects.
     * @param {number} [first] first result to return. Ignored if negative or {@code null}.
     * @param {number} [max] maximum number of results to return. Ignored if negative or {@code null}.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameGroupsGet: async (
      realm: string,
      roleName: string,
      briefRepresentation?: boolean,
      first?: number,
      max?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmRolesRoleNameGroupsGet', 'realm', realm);
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists('realmRolesRoleNameGroupsGet', 'roleName', roleName);
      const localVarPath = `/{realm}/roles/{role-name}/groups`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (briefRepresentation !== undefined) {
        localVarQueryParameter['briefRepresentation'] = briefRepresentation;
      }

      if (first !== undefined) {
        localVarQueryParameter['first'] = first;
      }

      if (max !== undefined) {
        localVarQueryParameter['max'] = max;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} roleName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameManagementPermissionsGet: async (
      realm: string,
      roleName: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmRolesRoleNameManagementPermissionsGet',
        'realm',
        realm
      );
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists(
        'realmRolesRoleNameManagementPermissionsGet',
        'roleName',
        roleName
      );
      const localVarPath = `/{realm}/roles/{role-name}/management/permissions`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} roleName
     * @param {ManagementPermissionReference} managementPermissionReference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameManagementPermissionsPut: async (
      realm: string,
      roleName: string,
      managementPermissionReference: ManagementPermissionReference,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmRolesRoleNameManagementPermissionsPut',
        'realm',
        realm
      );
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists(
        'realmRolesRoleNameManagementPermissionsPut',
        'roleName',
        roleName
      );
      // verify required parameter 'managementPermissionReference' is not null or undefined
      assertParamExists(
        'realmRolesRoleNameManagementPermissionsPut',
        'managementPermissionReference',
        managementPermissionReference
      );
      const localVarPath = `/{realm}/roles/{role-name}/management/permissions`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        managementPermissionReference,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a role by name
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {RoleRepresentation} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNamePut: async (
      realm: string,
      roleName: string,
      roleRepresentation: RoleRepresentation,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmRolesRoleNamePut', 'realm', realm);
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists('realmRolesRoleNamePut', 'roleName', roleName);
      // verify required parameter 'roleRepresentation' is not null or undefined
      assertParamExists(
        'realmRolesRoleNamePut',
        'roleRepresentation',
        roleRepresentation
      );
      const localVarPath = `/{realm}/roles/{role-name}`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Returns a stream of users that have the specified role name.
     * @param {string} realm realm name (not id!)
     * @param {string} roleName the role name.
     * @param {number} [first] first result to return. Ignored if negative or {@code null}.
     * @param {number} [max] maximum number of results to return. Ignored if negative or {@code null}.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameUsersGet: async (
      realm: string,
      roleName: string,
      first?: number,
      max?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmRolesRoleNameUsersGet', 'realm', realm);
      // verify required parameter 'roleName' is not null or undefined
      assertParamExists('realmRolesRoleNameUsersGet', 'roleName', roleName);
      const localVarPath = `/{realm}/roles/{role-name}/users`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'role-name'}}`, encodeURIComponent(String(roleName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (first !== undefined) {
        localVarQueryParameter['first'] = first;
      }

      if (max !== undefined) {
        localVarQueryParameter['max'] = max;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get all roles for the realm or client
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {boolean} [briefRepresentation]
     * @param {number} [first]
     * @param {number} [max]
     * @param {string} [search]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdRolesGet(
      realm: string,
      id: string,
      briefRepresentation?: boolean,
      first?: number,
      max?: number,
      search?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdRolesGet(
          realm,
          id,
          briefRepresentation,
          first,
          max,
          search,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create a new role for the realm or client
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {RoleRepresentation} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdRolesPost(
      realm: string,
      id: string,
      roleRepresentation: RoleRepresentation,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdRolesPost(
          realm,
          id,
          roleRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get client-level roles for the client that are in the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {string} clientUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdRolesRoleNameCompositesClientsClientUuidGet(
      realm: string,
      id: string,
      roleName: string,
      clientUuid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdRolesRoleNameCompositesClientsClientUuidGet(
          realm,
          id,
          roleName,
          clientUuid,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove roles from the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {Array<RoleRepresentation>} roleRepresentation roles to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdRolesRoleNameCompositesDelete(
      realm: string,
      id: string,
      roleName: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdRolesRoleNameCompositesDelete(
          realm,
          id,
          roleName,
          roleRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get composites of the role
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdRolesRoleNameCompositesGet(
      realm: string,
      id: string,
      roleName: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdRolesRoleNameCompositesGet(
          realm,
          id,
          roleName,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Add a composite to the role
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdRolesRoleNameCompositesPost(
      realm: string,
      id: string,
      roleName: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdRolesRoleNameCompositesPost(
          realm,
          id,
          roleName,
          roleRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get realm-level roles of the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdRolesRoleNameCompositesRealmGet(
      realm: string,
      id: string,
      roleName: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdRolesRoleNameCompositesRealmGet(
          realm,
          id,
          roleName,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete a role by name
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdRolesRoleNameDelete(
      realm: string,
      id: string,
      roleName: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdRolesRoleNameDelete(
          realm,
          id,
          roleName,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get a role by name
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdRolesRoleNameGet(
      realm: string,
      id: string,
      roleName: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<RoleRepresentation>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdRolesRoleNameGet(
          realm,
          id,
          roleName,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Returns a stream of groups that have the specified role name
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName the role name.
     * @param {boolean} [briefRepresentation] if false, return a full representation of the {@code GroupRepresentation} objects.
     * @param {number} [first] first result to return. Ignored if negative or {@code null}.
     * @param {number} [max] maximum number of results to return. Ignored if negative or {@code null}.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdRolesRoleNameGroupsGet(
      realm: string,
      id: string,
      roleName: string,
      briefRepresentation?: boolean,
      first?: number,
      max?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdRolesRoleNameGroupsGet(
          realm,
          id,
          roleName,
          briefRepresentation,
          first,
          max,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdRolesRoleNameManagementPermissionsGet(
      realm: string,
      id: string,
      roleName: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ManagementPermissionReference>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdRolesRoleNameManagementPermissionsGet(
          realm,
          id,
          roleName,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName
     * @param {ManagementPermissionReference} managementPermissionReference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdRolesRoleNameManagementPermissionsPut(
      realm: string,
      id: string,
      roleName: string,
      managementPermissionReference: ManagementPermissionReference,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ManagementPermissionReference>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdRolesRoleNameManagementPermissionsPut(
          realm,
          id,
          roleName,
          managementPermissionReference,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update a role by name
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {RoleRepresentation} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdRolesRoleNamePut(
      realm: string,
      id: string,
      roleName: string,
      roleRepresentation: RoleRepresentation,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdRolesRoleNamePut(
          realm,
          id,
          roleName,
          roleRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Returns a stream of users that have the specified role name.
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName the role name.
     * @param {number} [first] first result to return. Ignored if negative or {@code null}.
     * @param {number} [max] maximum number of results to return. Ignored if negative or {@code null}.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdRolesRoleNameUsersGet(
      realm: string,
      id: string,
      roleName: string,
      first?: number,
      max?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdRolesRoleNameUsersGet(
          realm,
          id,
          roleName,
          first,
          max,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get all roles for the realm or client
     * @param {string} realm realm name (not id!)
     * @param {boolean} [briefRepresentation]
     * @param {number} [first]
     * @param {number} [max]
     * @param {string} [search]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesGet(
      realm: string,
      briefRepresentation?: boolean,
      first?: number,
      max?: number,
      search?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.realmRolesGet(
        realm,
        briefRepresentation,
        first,
        max,
        search,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create a new role for the realm or client
     * @param {string} realm realm name (not id!)
     * @param {RoleRepresentation} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesPost(
      realm: string,
      roleRepresentation: RoleRepresentation,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.realmRolesPost(
        realm,
        roleRepresentation,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get client-level roles for the client that are in the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {string} clientUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesRoleNameCompositesClientsClientUuidGet(
      realm: string,
      roleName: string,
      clientUuid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesRoleNameCompositesClientsClientUuidGet(
          realm,
          roleName,
          clientUuid,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove roles from the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {Array<RoleRepresentation>} roleRepresentation roles to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesRoleNameCompositesDelete(
      realm: string,
      roleName: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesRoleNameCompositesDelete(
          realm,
          roleName,
          roleRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get composites of the role
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesRoleNameCompositesGet(
      realm: string,
      roleName: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesRoleNameCompositesGet(
          realm,
          roleName,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Add a composite to the role
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesRoleNameCompositesPost(
      realm: string,
      roleName: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesRoleNameCompositesPost(
          realm,
          roleName,
          roleRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get realm-level roles of the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesRoleNameCompositesRealmGet(
      realm: string,
      roleName: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesRoleNameCompositesRealmGet(
          realm,
          roleName,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete a role by name
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesRoleNameDelete(
      realm: string,
      roleName: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesRoleNameDelete(
          realm,
          roleName,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get a role by name
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesRoleNameGet(
      realm: string,
      roleName: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<RoleRepresentation>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesRoleNameGet(
          realm,
          roleName,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Returns a stream of groups that have the specified role name
     * @param {string} realm realm name (not id!)
     * @param {string} roleName the role name.
     * @param {boolean} [briefRepresentation] if false, return a full representation of the {@code GroupRepresentation} objects.
     * @param {number} [first] first result to return. Ignored if negative or {@code null}.
     * @param {number} [max] maximum number of results to return. Ignored if negative or {@code null}.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesRoleNameGroupsGet(
      realm: string,
      roleName: string,
      briefRepresentation?: boolean,
      first?: number,
      max?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesRoleNameGroupsGet(
          realm,
          roleName,
          briefRepresentation,
          first,
          max,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} roleName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesRoleNameManagementPermissionsGet(
      realm: string,
      roleName: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ManagementPermissionReference>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesRoleNameManagementPermissionsGet(
          realm,
          roleName,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} roleName
     * @param {ManagementPermissionReference} managementPermissionReference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesRoleNameManagementPermissionsPut(
      realm: string,
      roleName: string,
      managementPermissionReference: ManagementPermissionReference,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ManagementPermissionReference>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesRoleNameManagementPermissionsPut(
          realm,
          roleName,
          managementPermissionReference,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update a role by name
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {RoleRepresentation} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesRoleNamePut(
      realm: string,
      roleName: string,
      roleRepresentation: RoleRepresentation,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesRoleNamePut(
          realm,
          roleName,
          roleRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Returns a stream of users that have the specified role name.
     * @param {string} realm realm name (not id!)
     * @param {string} roleName the role name.
     * @param {number} [first] first result to return. Ignored if negative or {@code null}.
     * @param {number} [max] maximum number of results to return. Ignored if negative or {@code null}.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesRoleNameUsersGet(
      realm: string,
      roleName: string,
      first?: number,
      max?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesRoleNameUsersGet(
          realm,
          roleName,
          first,
          max,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = RolesApiFp(configuration);
  return {
    /**
     *
     * @summary Get all roles for the realm or client
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {boolean} [briefRepresentation]
     * @param {number} [first]
     * @param {number} [max]
     * @param {string} [search]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesGet(
      realm: string,
      id: string,
      briefRepresentation?: boolean,
      first?: number,
      max?: number,
      search?: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmClientsIdRolesGet(
          realm,
          id,
          briefRepresentation,
          first,
          max,
          search,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new role for the realm or client
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {RoleRepresentation} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesPost(
      realm: string,
      id: string,
      roleRepresentation: RoleRepresentation,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmClientsIdRolesPost(realm, id, roleRepresentation, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get client-level roles for the client that are in the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {string} clientUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameCompositesClientsClientUuidGet(
      realm: string,
      id: string,
      roleName: string,
      clientUuid: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmClientsIdRolesRoleNameCompositesClientsClientUuidGet(
          realm,
          id,
          roleName,
          clientUuid,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove roles from the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {Array<RoleRepresentation>} roleRepresentation roles to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameCompositesDelete(
      realm: string,
      id: string,
      roleName: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmClientsIdRolesRoleNameCompositesDelete(
          realm,
          id,
          roleName,
          roleRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get composites of the role
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameCompositesGet(
      realm: string,
      id: string,
      roleName: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmClientsIdRolesRoleNameCompositesGet(realm, id, roleName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a composite to the role
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameCompositesPost(
      realm: string,
      id: string,
      roleName: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmClientsIdRolesRoleNameCompositesPost(
          realm,
          id,
          roleName,
          roleRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get realm-level roles of the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameCompositesRealmGet(
      realm: string,
      id: string,
      roleName: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmClientsIdRolesRoleNameCompositesRealmGet(
          realm,
          id,
          roleName,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a role by name
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameDelete(
      realm: string,
      id: string,
      roleName: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmClientsIdRolesRoleNameDelete(realm, id, roleName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a role by name
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameGet(
      realm: string,
      id: string,
      roleName: string,
      options?: any
    ): AxiosPromise<RoleRepresentation> {
      return localVarFp
        .realmClientsIdRolesRoleNameGet(realm, id, roleName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Returns a stream of groups that have the specified role name
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName the role name.
     * @param {boolean} [briefRepresentation] if false, return a full representation of the {@code GroupRepresentation} objects.
     * @param {number} [first] first result to return. Ignored if negative or {@code null}.
     * @param {number} [max] maximum number of results to return. Ignored if negative or {@code null}.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameGroupsGet(
      realm: string,
      id: string,
      roleName: string,
      briefRepresentation?: boolean,
      first?: number,
      max?: number,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmClientsIdRolesRoleNameGroupsGet(
          realm,
          id,
          roleName,
          briefRepresentation,
          first,
          max,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameManagementPermissionsGet(
      realm: string,
      id: string,
      roleName: string,
      options?: any
    ): AxiosPromise<ManagementPermissionReference> {
      return localVarFp
        .realmClientsIdRolesRoleNameManagementPermissionsGet(
          realm,
          id,
          roleName,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName
     * @param {ManagementPermissionReference} managementPermissionReference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameManagementPermissionsPut(
      realm: string,
      id: string,
      roleName: string,
      managementPermissionReference: ManagementPermissionReference,
      options?: any
    ): AxiosPromise<ManagementPermissionReference> {
      return localVarFp
        .realmClientsIdRolesRoleNameManagementPermissionsPut(
          realm,
          id,
          roleName,
          managementPermissionReference,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a role by name
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName role’s name (not id!)
     * @param {RoleRepresentation} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNamePut(
      realm: string,
      id: string,
      roleName: string,
      roleRepresentation: RoleRepresentation,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmClientsIdRolesRoleNamePut(
          realm,
          id,
          roleName,
          roleRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Returns a stream of users that have the specified role name.
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} roleName the role name.
     * @param {number} [first] first result to return. Ignored if negative or {@code null}.
     * @param {number} [max] maximum number of results to return. Ignored if negative or {@code null}.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdRolesRoleNameUsersGet(
      realm: string,
      id: string,
      roleName: string,
      first?: number,
      max?: number,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmClientsIdRolesRoleNameUsersGet(
          realm,
          id,
          roleName,
          first,
          max,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all roles for the realm or client
     * @param {string} realm realm name (not id!)
     * @param {boolean} [briefRepresentation]
     * @param {number} [first]
     * @param {number} [max]
     * @param {string} [search]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesGet(
      realm: string,
      briefRepresentation?: boolean,
      first?: number,
      max?: number,
      search?: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmRolesGet(realm, briefRepresentation, first, max, search, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new role for the realm or client
     * @param {string} realm realm name (not id!)
     * @param {RoleRepresentation} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesPost(
      realm: string,
      roleRepresentation: RoleRepresentation,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmRolesPost(realm, roleRepresentation, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get client-level roles for the client that are in the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {string} clientUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameCompositesClientsClientUuidGet(
      realm: string,
      roleName: string,
      clientUuid: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmRolesRoleNameCompositesClientsClientUuidGet(
          realm,
          roleName,
          clientUuid,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove roles from the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {Array<RoleRepresentation>} roleRepresentation roles to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameCompositesDelete(
      realm: string,
      roleName: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmRolesRoleNameCompositesDelete(
          realm,
          roleName,
          roleRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get composites of the role
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameCompositesGet(
      realm: string,
      roleName: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmRolesRoleNameCompositesGet(realm, roleName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a composite to the role
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameCompositesPost(
      realm: string,
      roleName: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmRolesRoleNameCompositesPost(
          realm,
          roleName,
          roleRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get realm-level roles of the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameCompositesRealmGet(
      realm: string,
      roleName: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmRolesRoleNameCompositesRealmGet(realm, roleName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a role by name
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameDelete(
      realm: string,
      roleName: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmRolesRoleNameDelete(realm, roleName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a role by name
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameGet(
      realm: string,
      roleName: string,
      options?: any
    ): AxiosPromise<RoleRepresentation> {
      return localVarFp
        .realmRolesRoleNameGet(realm, roleName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Returns a stream of groups that have the specified role name
     * @param {string} realm realm name (not id!)
     * @param {string} roleName the role name.
     * @param {boolean} [briefRepresentation] if false, return a full representation of the {@code GroupRepresentation} objects.
     * @param {number} [first] first result to return. Ignored if negative or {@code null}.
     * @param {number} [max] maximum number of results to return. Ignored if negative or {@code null}.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameGroupsGet(
      realm: string,
      roleName: string,
      briefRepresentation?: boolean,
      first?: number,
      max?: number,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmRolesRoleNameGroupsGet(
          realm,
          roleName,
          briefRepresentation,
          first,
          max,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} roleName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameManagementPermissionsGet(
      realm: string,
      roleName: string,
      options?: any
    ): AxiosPromise<ManagementPermissionReference> {
      return localVarFp
        .realmRolesRoleNameManagementPermissionsGet(realm, roleName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} roleName
     * @param {ManagementPermissionReference} managementPermissionReference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameManagementPermissionsPut(
      realm: string,
      roleName: string,
      managementPermissionReference: ManagementPermissionReference,
      options?: any
    ): AxiosPromise<ManagementPermissionReference> {
      return localVarFp
        .realmRolesRoleNameManagementPermissionsPut(
          realm,
          roleName,
          managementPermissionReference,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a role by name
     * @param {string} realm realm name (not id!)
     * @param {string} roleName role’s name (not id!)
     * @param {RoleRepresentation} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNamePut(
      realm: string,
      roleName: string,
      roleRepresentation: RoleRepresentation,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmRolesRoleNamePut(realm, roleName, roleRepresentation, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Returns a stream of users that have the specified role name.
     * @param {string} realm realm name (not id!)
     * @param {string} roleName the role name.
     * @param {number} [first] first result to return. Ignored if negative or {@code null}.
     * @param {number} [max] maximum number of results to return. Ignored if negative or {@code null}.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesRoleNameUsersGet(
      realm: string,
      roleName: string,
      first?: number,
      max?: number,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmRolesRoleNameUsersGet(realm, roleName, first, max, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI {
  /**
   *
   * @summary Get all roles for the realm or client
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {boolean} [briefRepresentation]
   * @param {number} [first]
   * @param {number} [max]
   * @param {string} [search]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmClientsIdRolesGet(
    realm: string,
    id: string,
    briefRepresentation?: boolean,
    first?: number,
    max?: number,
    search?: string,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmClientsIdRolesGet(
        realm,
        id,
        briefRepresentation,
        first,
        max,
        search,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new role for the realm or client
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {RoleRepresentation} roleRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmClientsIdRolesPost(
    realm: string,
    id: string,
    roleRepresentation: RoleRepresentation,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmClientsIdRolesPost(realm, id, roleRepresentation, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get client-level roles for the client that are in the role’s composite
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {string} roleName role’s name (not id!)
   * @param {string} clientUuid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmClientsIdRolesRoleNameCompositesClientsClientUuidGet(
    realm: string,
    id: string,
    roleName: string,
    clientUuid: string,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmClientsIdRolesRoleNameCompositesClientsClientUuidGet(
        realm,
        id,
        roleName,
        clientUuid,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove roles from the role’s composite
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {string} roleName role’s name (not id!)
   * @param {Array<RoleRepresentation>} roleRepresentation roles to remove
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmClientsIdRolesRoleNameCompositesDelete(
    realm: string,
    id: string,
    roleName: string,
    roleRepresentation: Array<RoleRepresentation>,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmClientsIdRolesRoleNameCompositesDelete(
        realm,
        id,
        roleName,
        roleRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get composites of the role
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {string} roleName role’s name (not id!)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmClientsIdRolesRoleNameCompositesGet(
    realm: string,
    id: string,
    roleName: string,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmClientsIdRolesRoleNameCompositesGet(realm, id, roleName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add a composite to the role
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {string} roleName role’s name (not id!)
   * @param {Array<RoleRepresentation>} roleRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmClientsIdRolesRoleNameCompositesPost(
    realm: string,
    id: string,
    roleName: string,
    roleRepresentation: Array<RoleRepresentation>,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmClientsIdRolesRoleNameCompositesPost(
        realm,
        id,
        roleName,
        roleRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get realm-level roles of the role’s composite
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {string} roleName role’s name (not id!)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmClientsIdRolesRoleNameCompositesRealmGet(
    realm: string,
    id: string,
    roleName: string,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmClientsIdRolesRoleNameCompositesRealmGet(
        realm,
        id,
        roleName,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a role by name
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {string} roleName role’s name (not id!)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmClientsIdRolesRoleNameDelete(
    realm: string,
    id: string,
    roleName: string,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmClientsIdRolesRoleNameDelete(realm, id, roleName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a role by name
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {string} roleName role’s name (not id!)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmClientsIdRolesRoleNameGet(
    realm: string,
    id: string,
    roleName: string,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmClientsIdRolesRoleNameGet(realm, id, roleName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Returns a stream of groups that have the specified role name
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {string} roleName the role name.
   * @param {boolean} [briefRepresentation] if false, return a full representation of the {@code GroupRepresentation} objects.
   * @param {number} [first] first result to return. Ignored if negative or {@code null}.
   * @param {number} [max] maximum number of results to return. Ignored if negative or {@code null}.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmClientsIdRolesRoleNameGroupsGet(
    realm: string,
    id: string,
    roleName: string,
    briefRepresentation?: boolean,
    first?: number,
    max?: number,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmClientsIdRolesRoleNameGroupsGet(
        realm,
        id,
        roleName,
        briefRepresentation,
        first,
        max,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {string} roleName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmClientsIdRolesRoleNameManagementPermissionsGet(
    realm: string,
    id: string,
    roleName: string,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmClientsIdRolesRoleNameManagementPermissionsGet(
        realm,
        id,
        roleName,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {string} roleName
   * @param {ManagementPermissionReference} managementPermissionReference
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmClientsIdRolesRoleNameManagementPermissionsPut(
    realm: string,
    id: string,
    roleName: string,
    managementPermissionReference: ManagementPermissionReference,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmClientsIdRolesRoleNameManagementPermissionsPut(
        realm,
        id,
        roleName,
        managementPermissionReference,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a role by name
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {string} roleName role’s name (not id!)
   * @param {RoleRepresentation} roleRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmClientsIdRolesRoleNamePut(
    realm: string,
    id: string,
    roleName: string,
    roleRepresentation: RoleRepresentation,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmClientsIdRolesRoleNamePut(
        realm,
        id,
        roleName,
        roleRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Returns a stream of users that have the specified role name.
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {string} roleName the role name.
   * @param {number} [first] first result to return. Ignored if negative or {@code null}.
   * @param {number} [max] maximum number of results to return. Ignored if negative or {@code null}.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmClientsIdRolesRoleNameUsersGet(
    realm: string,
    id: string,
    roleName: string,
    first?: number,
    max?: number,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmClientsIdRolesRoleNameUsersGet(
        realm,
        id,
        roleName,
        first,
        max,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all roles for the realm or client
   * @param {string} realm realm name (not id!)
   * @param {boolean} [briefRepresentation]
   * @param {number} [first]
   * @param {number} [max]
   * @param {string} [search]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmRolesGet(
    realm: string,
    briefRepresentation?: boolean,
    first?: number,
    max?: number,
    search?: string,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmRolesGet(realm, briefRepresentation, first, max, search, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new role for the realm or client
   * @param {string} realm realm name (not id!)
   * @param {RoleRepresentation} roleRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmRolesPost(
    realm: string,
    roleRepresentation: RoleRepresentation,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmRolesPost(realm, roleRepresentation, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get client-level roles for the client that are in the role’s composite
   * @param {string} realm realm name (not id!)
   * @param {string} roleName role’s name (not id!)
   * @param {string} clientUuid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmRolesRoleNameCompositesClientsClientUuidGet(
    realm: string,
    roleName: string,
    clientUuid: string,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmRolesRoleNameCompositesClientsClientUuidGet(
        realm,
        roleName,
        clientUuid,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove roles from the role’s composite
   * @param {string} realm realm name (not id!)
   * @param {string} roleName role’s name (not id!)
   * @param {Array<RoleRepresentation>} roleRepresentation roles to remove
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmRolesRoleNameCompositesDelete(
    realm: string,
    roleName: string,
    roleRepresentation: Array<RoleRepresentation>,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmRolesRoleNameCompositesDelete(
        realm,
        roleName,
        roleRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get composites of the role
   * @param {string} realm realm name (not id!)
   * @param {string} roleName role’s name (not id!)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmRolesRoleNameCompositesGet(
    realm: string,
    roleName: string,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmRolesRoleNameCompositesGet(realm, roleName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add a composite to the role
   * @param {string} realm realm name (not id!)
   * @param {string} roleName role’s name (not id!)
   * @param {Array<RoleRepresentation>} roleRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmRolesRoleNameCompositesPost(
    realm: string,
    roleName: string,
    roleRepresentation: Array<RoleRepresentation>,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmRolesRoleNameCompositesPost(
        realm,
        roleName,
        roleRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get realm-level roles of the role’s composite
   * @param {string} realm realm name (not id!)
   * @param {string} roleName role’s name (not id!)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmRolesRoleNameCompositesRealmGet(
    realm: string,
    roleName: string,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmRolesRoleNameCompositesRealmGet(realm, roleName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a role by name
   * @param {string} realm realm name (not id!)
   * @param {string} roleName role’s name (not id!)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmRolesRoleNameDelete(
    realm: string,
    roleName: string,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmRolesRoleNameDelete(realm, roleName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a role by name
   * @param {string} realm realm name (not id!)
   * @param {string} roleName role’s name (not id!)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmRolesRoleNameGet(
    realm: string,
    roleName: string,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmRolesRoleNameGet(realm, roleName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Returns a stream of groups that have the specified role name
   * @param {string} realm realm name (not id!)
   * @param {string} roleName the role name.
   * @param {boolean} [briefRepresentation] if false, return a full representation of the {@code GroupRepresentation} objects.
   * @param {number} [first] first result to return. Ignored if negative or {@code null}.
   * @param {number} [max] maximum number of results to return. Ignored if negative or {@code null}.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmRolesRoleNameGroupsGet(
    realm: string,
    roleName: string,
    briefRepresentation?: boolean,
    first?: number,
    max?: number,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmRolesRoleNameGroupsGet(
        realm,
        roleName,
        briefRepresentation,
        first,
        max,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
   * @param {string} realm realm name (not id!)
   * @param {string} roleName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmRolesRoleNameManagementPermissionsGet(
    realm: string,
    roleName: string,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmRolesRoleNameManagementPermissionsGet(realm, roleName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Return object stating whether role Authorization permissions have been initialized or not and a reference
   * @param {string} realm realm name (not id!)
   * @param {string} roleName
   * @param {ManagementPermissionReference} managementPermissionReference
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmRolesRoleNameManagementPermissionsPut(
    realm: string,
    roleName: string,
    managementPermissionReference: ManagementPermissionReference,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmRolesRoleNameManagementPermissionsPut(
        realm,
        roleName,
        managementPermissionReference,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a role by name
   * @param {string} realm realm name (not id!)
   * @param {string} roleName role’s name (not id!)
   * @param {RoleRepresentation} roleRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmRolesRoleNamePut(
    realm: string,
    roleName: string,
    roleRepresentation: RoleRepresentation,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmRolesRoleNamePut(realm, roleName, roleRepresentation, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Returns a stream of users that have the specified role name.
   * @param {string} realm realm name (not id!)
   * @param {string} roleName the role name.
   * @param {number} [first] first result to return. Ignored if negative or {@code null}.
   * @param {number} [max] maximum number of results to return. Ignored if negative or {@code null}.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesApi
   */
  public realmRolesRoleNameUsersGet(
    realm: string,
    roleName: string,
    first?: number,
    max?: number,
    options?: AxiosRequestConfig
  ) {
    return RolesApiFp(this.configuration)
      .realmRolesRoleNameUsersGet(realm, roleName, first, max, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
