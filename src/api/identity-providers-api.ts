/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { IdentityProviderMapperRepresentation } from '../model';
// @ts-ignore
import { IdentityProviderRepresentation } from '../model';
// @ts-ignore
import { ManagementPermissionReference } from '../model';
/**
 * IdentityProvidersApi - axios parameter creator
 * @export
 */
export const IdentityProvidersApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Import identity provider from uploaded JSON file
     * @param {string} realm realm name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderImportConfigPost: async (
      realm: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmIdentityProviderImportConfigPost',
        'realm',
        realm
      );
      const localVarPath = `/{realm}/identity-provider/import-config`.replace(
        `{${'realm'}}`,
        encodeURIComponent(String(realm))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete the identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasDelete: async (
      realm: string,
      alias: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasDelete',
        'realm',
        realm
      );
      // verify required parameter 'alias' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasDelete',
        'alias',
        alias
      );
      const localVarPath = `/{realm}/identity-provider/instances/{alias}`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'alias'}}`, encodeURIComponent(String(alias)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Export public broker configuration for identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {string} [format] Format to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasExportGet: async (
      realm: string,
      alias: string,
      format?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasExportGet',
        'realm',
        realm
      );
      // verify required parameter 'alias' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasExportGet',
        'alias',
        alias
      );
      const localVarPath = `/{realm}/identity-provider/instances/{alias}/export`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'alias'}}`, encodeURIComponent(String(alias)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (format !== undefined) {
        localVarQueryParameter['format'] = format;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasGet: async (
      realm: string,
      alias: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasGet',
        'realm',
        realm
      );
      // verify required parameter 'alias' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasGet',
        'alias',
        alias
      );
      const localVarPath = `/{realm}/identity-provider/instances/{alias}`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'alias'}}`, encodeURIComponent(String(alias)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasManagementPermissionsGet: async (
      realm: string,
      alias: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasManagementPermissionsGet',
        'realm',
        realm
      );
      // verify required parameter 'alias' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasManagementPermissionsGet',
        'alias',
        alias
      );
      const localVarPath =
        `/{realm}/identity-provider/instances/{alias}/management/permissions`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'alias'}}`, encodeURIComponent(String(alias)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {ManagementPermissionReference} managementPermissionReference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasManagementPermissionsPut: async (
      realm: string,
      alias: string,
      managementPermissionReference: ManagementPermissionReference,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasManagementPermissionsPut',
        'realm',
        realm
      );
      // verify required parameter 'alias' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasManagementPermissionsPut',
        'alias',
        alias
      );
      // verify required parameter 'managementPermissionReference' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasManagementPermissionsPut',
        'managementPermissionReference',
        managementPermissionReference
      );
      const localVarPath =
        `/{realm}/identity-provider/instances/{alias}/management/permissions`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'alias'}}`, encodeURIComponent(String(alias)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        managementPermissionReference,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get mapper types for identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasMapperTypesGet: async (
      realm: string,
      alias: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasMapperTypesGet',
        'realm',
        realm
      );
      // verify required parameter 'alias' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasMapperTypesGet',
        'alias',
        alias
      );
      const localVarPath =
        `/{realm}/identity-provider/instances/{alias}/mapper-types`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'alias'}}`, encodeURIComponent(String(alias)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get mappers for identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasMappersGet: async (
      realm: string,
      alias: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasMappersGet',
        'realm',
        realm
      );
      // verify required parameter 'alias' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasMappersGet',
        'alias',
        alias
      );
      const localVarPath =
        `/{realm}/identity-provider/instances/{alias}/mappers`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'alias'}}`, encodeURIComponent(String(alias)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a mapper for the identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {string} id Mapper id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasMappersIdDelete: async (
      realm: string,
      alias: string,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasMappersIdDelete',
        'realm',
        realm
      );
      // verify required parameter 'alias' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasMappersIdDelete',
        'alias',
        alias
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasMappersIdDelete',
        'id',
        id
      );
      const localVarPath =
        `/{realm}/identity-provider/instances/{alias}/mappers/{id}`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'alias'}}`, encodeURIComponent(String(alias)))
          .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get mapper by id for the identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {string} id Mapper id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasMappersIdGet: async (
      realm: string,
      alias: string,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasMappersIdGet',
        'realm',
        realm
      );
      // verify required parameter 'alias' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasMappersIdGet',
        'alias',
        alias
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasMappersIdGet',
        'id',
        id
      );
      const localVarPath =
        `/{realm}/identity-provider/instances/{alias}/mappers/{id}`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'alias'}}`, encodeURIComponent(String(alias)))
          .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a mapper for the identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {string} id Mapper id
     * @param {IdentityProviderMapperRepresentation} identityProviderMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasMappersIdPut: async (
      realm: string,
      alias: string,
      id: string,
      identityProviderMapperRepresentation: IdentityProviderMapperRepresentation,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasMappersIdPut',
        'realm',
        realm
      );
      // verify required parameter 'alias' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasMappersIdPut',
        'alias',
        alias
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasMappersIdPut',
        'id',
        id
      );
      // verify required parameter 'identityProviderMapperRepresentation' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasMappersIdPut',
        'identityProviderMapperRepresentation',
        identityProviderMapperRepresentation
      );
      const localVarPath =
        `/{realm}/identity-provider/instances/{alias}/mappers/{id}`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'alias'}}`, encodeURIComponent(String(alias)))
          .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        identityProviderMapperRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add a mapper to identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {IdentityProviderMapperRepresentation} identityProviderMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasMappersPost: async (
      realm: string,
      alias: string,
      identityProviderMapperRepresentation: IdentityProviderMapperRepresentation,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasMappersPost',
        'realm',
        realm
      );
      // verify required parameter 'alias' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasMappersPost',
        'alias',
        alias
      );
      // verify required parameter 'identityProviderMapperRepresentation' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasMappersPost',
        'identityProviderMapperRepresentation',
        identityProviderMapperRepresentation
      );
      const localVarPath =
        `/{realm}/identity-provider/instances/{alias}/mappers`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'alias'}}`, encodeURIComponent(String(alias)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        identityProviderMapperRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update the identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {IdentityProviderRepresentation} identityProviderRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasPut: async (
      realm: string,
      alias: string,
      identityProviderRepresentation: IdentityProviderRepresentation,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasPut',
        'realm',
        realm
      );
      // verify required parameter 'alias' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasPut',
        'alias',
        alias
      );
      // verify required parameter 'identityProviderRepresentation' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesAliasPut',
        'identityProviderRepresentation',
        identityProviderRepresentation
      );
      const localVarPath = `/{realm}/identity-provider/instances/{alias}`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'alias'}}`, encodeURIComponent(String(alias)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        identityProviderRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get identity providers
     * @param {string} realm realm name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesGet: async (
      realm: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmIdentityProviderInstancesGet', 'realm', realm);
      const localVarPath = `/{realm}/identity-provider/instances`.replace(
        `{${'realm'}}`,
        encodeURIComponent(String(realm))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new identity provider
     * @param {string} realm realm name (not id!)
     * @param {IdentityProviderRepresentation} identityProviderRepresentation JSON body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesPost: async (
      realm: string,
      identityProviderRepresentation: IdentityProviderRepresentation,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmIdentityProviderInstancesPost', 'realm', realm);
      // verify required parameter 'identityProviderRepresentation' is not null or undefined
      assertParamExists(
        'realmIdentityProviderInstancesPost',
        'identityProviderRepresentation',
        identityProviderRepresentation
      );
      const localVarPath = `/{realm}/identity-provider/instances`.replace(
        `{${'realm'}}`,
        encodeURIComponent(String(realm))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        identityProviderRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get identity providers
     * @param {string} realm realm name (not id!)
     * @param {string} providerId Provider id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderProvidersProviderIdGet: async (
      realm: string,
      providerId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmIdentityProviderProvidersProviderIdGet',
        'realm',
        realm
      );
      // verify required parameter 'providerId' is not null or undefined
      assertParamExists(
        'realmIdentityProviderProvidersProviderIdGet',
        'providerId',
        providerId
      );
      const localVarPath = `/{realm}/identity-provider/providers/{provider_id}`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'provider_id'}}`, encodeURIComponent(String(providerId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * IdentityProvidersApi - functional programming interface
 * @export
 */
export const IdentityProvidersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    IdentityProvidersApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Import identity provider from uploaded JSON file
     * @param {string} realm realm name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmIdentityProviderImportConfigPost(
      realm: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<{ [key: string]: any }>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmIdentityProviderImportConfigPost(
          realm,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete the identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmIdentityProviderInstancesAliasDelete(
      realm: string,
      alias: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmIdentityProviderInstancesAliasDelete(
          realm,
          alias,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Export public broker configuration for identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {string} [format] Format to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmIdentityProviderInstancesAliasExportGet(
      realm: string,
      alias: string,
      format?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmIdentityProviderInstancesAliasExportGet(
          realm,
          alias,
          format,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get the identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmIdentityProviderInstancesAliasGet(
      realm: string,
      alias: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<IdentityProviderRepresentation>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmIdentityProviderInstancesAliasGet(
          realm,
          alias,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmIdentityProviderInstancesAliasManagementPermissionsGet(
      realm: string,
      alias: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ManagementPermissionReference>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmIdentityProviderInstancesAliasManagementPermissionsGet(
          realm,
          alias,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {ManagementPermissionReference} managementPermissionReference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmIdentityProviderInstancesAliasManagementPermissionsPut(
      realm: string,
      alias: string,
      managementPermissionReference: ManagementPermissionReference,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ManagementPermissionReference>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmIdentityProviderInstancesAliasManagementPermissionsPut(
          realm,
          alias,
          managementPermissionReference,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get mapper types for identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmIdentityProviderInstancesAliasMapperTypesGet(
      realm: string,
      alias: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmIdentityProviderInstancesAliasMapperTypesGet(
          realm,
          alias,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get mappers for identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmIdentityProviderInstancesAliasMappersGet(
      realm: string,
      alias: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmIdentityProviderInstancesAliasMappersGet(
          realm,
          alias,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete a mapper for the identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {string} id Mapper id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmIdentityProviderInstancesAliasMappersIdDelete(
      realm: string,
      alias: string,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmIdentityProviderInstancesAliasMappersIdDelete(
          realm,
          alias,
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get mapper by id for the identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {string} id Mapper id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmIdentityProviderInstancesAliasMappersIdGet(
      realm: string,
      alias: string,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<IdentityProviderMapperRepresentation>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmIdentityProviderInstancesAliasMappersIdGet(
          realm,
          alias,
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update a mapper for the identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {string} id Mapper id
     * @param {IdentityProviderMapperRepresentation} identityProviderMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmIdentityProviderInstancesAliasMappersIdPut(
      realm: string,
      alias: string,
      id: string,
      identityProviderMapperRepresentation: IdentityProviderMapperRepresentation,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmIdentityProviderInstancesAliasMappersIdPut(
          realm,
          alias,
          id,
          identityProviderMapperRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Add a mapper to identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {IdentityProviderMapperRepresentation} identityProviderMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmIdentityProviderInstancesAliasMappersPost(
      realm: string,
      alias: string,
      identityProviderMapperRepresentation: IdentityProviderMapperRepresentation,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmIdentityProviderInstancesAliasMappersPost(
          realm,
          alias,
          identityProviderMapperRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update the identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {IdentityProviderRepresentation} identityProviderRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmIdentityProviderInstancesAliasPut(
      realm: string,
      alias: string,
      identityProviderRepresentation: IdentityProviderRepresentation,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmIdentityProviderInstancesAliasPut(
          realm,
          alias,
          identityProviderRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get identity providers
     * @param {string} realm realm name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmIdentityProviderInstancesGet(
      realm: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmIdentityProviderInstancesGet(
          realm,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create a new identity provider
     * @param {string} realm realm name (not id!)
     * @param {IdentityProviderRepresentation} identityProviderRepresentation JSON body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmIdentityProviderInstancesPost(
      realm: string,
      identityProviderRepresentation: IdentityProviderRepresentation,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmIdentityProviderInstancesPost(
          realm,
          identityProviderRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get identity providers
     * @param {string} realm realm name (not id!)
     * @param {string} providerId Provider id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmIdentityProviderProvidersProviderIdGet(
      realm: string,
      providerId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmIdentityProviderProvidersProviderIdGet(
          realm,
          providerId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * IdentityProvidersApi - factory interface
 * @export
 */
export const IdentityProvidersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = IdentityProvidersApiFp(configuration);
  return {
    /**
     *
     * @summary Import identity provider from uploaded JSON file
     * @param {string} realm realm name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderImportConfigPost(
      realm: string,
      options?: any
    ): AxiosPromise<{ [key: string]: any }> {
      return localVarFp
        .realmIdentityProviderImportConfigPost(realm, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete the identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasDelete(
      realm: string,
      alias: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmIdentityProviderInstancesAliasDelete(realm, alias, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Export public broker configuration for identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {string} [format] Format to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasExportGet(
      realm: string,
      alias: string,
      format?: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmIdentityProviderInstancesAliasExportGet(
          realm,
          alias,
          format,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasGet(
      realm: string,
      alias: string,
      options?: any
    ): AxiosPromise<IdentityProviderRepresentation> {
      return localVarFp
        .realmIdentityProviderInstancesAliasGet(realm, alias, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasManagementPermissionsGet(
      realm: string,
      alias: string,
      options?: any
    ): AxiosPromise<ManagementPermissionReference> {
      return localVarFp
        .realmIdentityProviderInstancesAliasManagementPermissionsGet(
          realm,
          alias,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {ManagementPermissionReference} managementPermissionReference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasManagementPermissionsPut(
      realm: string,
      alias: string,
      managementPermissionReference: ManagementPermissionReference,
      options?: any
    ): AxiosPromise<ManagementPermissionReference> {
      return localVarFp
        .realmIdentityProviderInstancesAliasManagementPermissionsPut(
          realm,
          alias,
          managementPermissionReference,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get mapper types for identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasMapperTypesGet(
      realm: string,
      alias: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmIdentityProviderInstancesAliasMapperTypesGet(
          realm,
          alias,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get mappers for identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasMappersGet(
      realm: string,
      alias: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmIdentityProviderInstancesAliasMappersGet(realm, alias, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a mapper for the identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {string} id Mapper id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasMappersIdDelete(
      realm: string,
      alias: string,
      id: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmIdentityProviderInstancesAliasMappersIdDelete(
          realm,
          alias,
          id,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get mapper by id for the identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {string} id Mapper id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasMappersIdGet(
      realm: string,
      alias: string,
      id: string,
      options?: any
    ): AxiosPromise<IdentityProviderMapperRepresentation> {
      return localVarFp
        .realmIdentityProviderInstancesAliasMappersIdGet(
          realm,
          alias,
          id,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a mapper for the identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {string} id Mapper id
     * @param {IdentityProviderMapperRepresentation} identityProviderMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasMappersIdPut(
      realm: string,
      alias: string,
      id: string,
      identityProviderMapperRepresentation: IdentityProviderMapperRepresentation,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmIdentityProviderInstancesAliasMappersIdPut(
          realm,
          alias,
          id,
          identityProviderMapperRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add a mapper to identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {IdentityProviderMapperRepresentation} identityProviderMapperRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasMappersPost(
      realm: string,
      alias: string,
      identityProviderMapperRepresentation: IdentityProviderMapperRepresentation,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmIdentityProviderInstancesAliasMappersPost(
          realm,
          alias,
          identityProviderMapperRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update the identity provider
     * @param {string} realm realm name (not id!)
     * @param {string} alias
     * @param {IdentityProviderRepresentation} identityProviderRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesAliasPut(
      realm: string,
      alias: string,
      identityProviderRepresentation: IdentityProviderRepresentation,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmIdentityProviderInstancesAliasPut(
          realm,
          alias,
          identityProviderRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get identity providers
     * @param {string} realm realm name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesGet(
      realm: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmIdentityProviderInstancesGet(realm, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new identity provider
     * @param {string} realm realm name (not id!)
     * @param {IdentityProviderRepresentation} identityProviderRepresentation JSON body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderInstancesPost(
      realm: string,
      identityProviderRepresentation: IdentityProviderRepresentation,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmIdentityProviderInstancesPost(
          realm,
          identityProviderRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get identity providers
     * @param {string} realm realm name (not id!)
     * @param {string} providerId Provider id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmIdentityProviderProvidersProviderIdGet(
      realm: string,
      providerId: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmIdentityProviderProvidersProviderIdGet(realm, providerId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * IdentityProvidersApi - object-oriented interface
 * @export
 * @class IdentityProvidersApi
 * @extends {BaseAPI}
 */
export class IdentityProvidersApi extends BaseAPI {
  /**
   *
   * @summary Import identity provider from uploaded JSON file
   * @param {string} realm realm name (not id!)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityProvidersApi
   */
  public realmIdentityProviderImportConfigPost(
    realm: string,
    options?: AxiosRequestConfig
  ) {
    return IdentityProvidersApiFp(this.configuration)
      .realmIdentityProviderImportConfigPost(realm, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete the identity provider
   * @param {string} realm realm name (not id!)
   * @param {string} alias
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityProvidersApi
   */
  public realmIdentityProviderInstancesAliasDelete(
    realm: string,
    alias: string,
    options?: AxiosRequestConfig
  ) {
    return IdentityProvidersApiFp(this.configuration)
      .realmIdentityProviderInstancesAliasDelete(realm, alias, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Export public broker configuration for identity provider
   * @param {string} realm realm name (not id!)
   * @param {string} alias
   * @param {string} [format] Format to use
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityProvidersApi
   */
  public realmIdentityProviderInstancesAliasExportGet(
    realm: string,
    alias: string,
    format?: string,
    options?: AxiosRequestConfig
  ) {
    return IdentityProvidersApiFp(this.configuration)
      .realmIdentityProviderInstancesAliasExportGet(
        realm,
        alias,
        format,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get the identity provider
   * @param {string} realm realm name (not id!)
   * @param {string} alias
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityProvidersApi
   */
  public realmIdentityProviderInstancesAliasGet(
    realm: string,
    alias: string,
    options?: AxiosRequestConfig
  ) {
    return IdentityProvidersApiFp(this.configuration)
      .realmIdentityProviderInstancesAliasGet(realm, alias, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
   * @param {string} realm realm name (not id!)
   * @param {string} alias
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityProvidersApi
   */
  public realmIdentityProviderInstancesAliasManagementPermissionsGet(
    realm: string,
    alias: string,
    options?: AxiosRequestConfig
  ) {
    return IdentityProvidersApiFp(this.configuration)
      .realmIdentityProviderInstancesAliasManagementPermissionsGet(
        realm,
        alias,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Return object stating whether client Authorization permissions have been initialized or not and a reference
   * @param {string} realm realm name (not id!)
   * @param {string} alias
   * @param {ManagementPermissionReference} managementPermissionReference
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityProvidersApi
   */
  public realmIdentityProviderInstancesAliasManagementPermissionsPut(
    realm: string,
    alias: string,
    managementPermissionReference: ManagementPermissionReference,
    options?: AxiosRequestConfig
  ) {
    return IdentityProvidersApiFp(this.configuration)
      .realmIdentityProviderInstancesAliasManagementPermissionsPut(
        realm,
        alias,
        managementPermissionReference,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get mapper types for identity provider
   * @param {string} realm realm name (not id!)
   * @param {string} alias
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityProvidersApi
   */
  public realmIdentityProviderInstancesAliasMapperTypesGet(
    realm: string,
    alias: string,
    options?: AxiosRequestConfig
  ) {
    return IdentityProvidersApiFp(this.configuration)
      .realmIdentityProviderInstancesAliasMapperTypesGet(realm, alias, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get mappers for identity provider
   * @param {string} realm realm name (not id!)
   * @param {string} alias
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityProvidersApi
   */
  public realmIdentityProviderInstancesAliasMappersGet(
    realm: string,
    alias: string,
    options?: AxiosRequestConfig
  ) {
    return IdentityProvidersApiFp(this.configuration)
      .realmIdentityProviderInstancesAliasMappersGet(realm, alias, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a mapper for the identity provider
   * @param {string} realm realm name (not id!)
   * @param {string} alias
   * @param {string} id Mapper id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityProvidersApi
   */
  public realmIdentityProviderInstancesAliasMappersIdDelete(
    realm: string,
    alias: string,
    id: string,
    options?: AxiosRequestConfig
  ) {
    return IdentityProvidersApiFp(this.configuration)
      .realmIdentityProviderInstancesAliasMappersIdDelete(
        realm,
        alias,
        id,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get mapper by id for the identity provider
   * @param {string} realm realm name (not id!)
   * @param {string} alias
   * @param {string} id Mapper id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityProvidersApi
   */
  public realmIdentityProviderInstancesAliasMappersIdGet(
    realm: string,
    alias: string,
    id: string,
    options?: AxiosRequestConfig
  ) {
    return IdentityProvidersApiFp(this.configuration)
      .realmIdentityProviderInstancesAliasMappersIdGet(
        realm,
        alias,
        id,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a mapper for the identity provider
   * @param {string} realm realm name (not id!)
   * @param {string} alias
   * @param {string} id Mapper id
   * @param {IdentityProviderMapperRepresentation} identityProviderMapperRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityProvidersApi
   */
  public realmIdentityProviderInstancesAliasMappersIdPut(
    realm: string,
    alias: string,
    id: string,
    identityProviderMapperRepresentation: IdentityProviderMapperRepresentation,
    options?: AxiosRequestConfig
  ) {
    return IdentityProvidersApiFp(this.configuration)
      .realmIdentityProviderInstancesAliasMappersIdPut(
        realm,
        alias,
        id,
        identityProviderMapperRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add a mapper to identity provider
   * @param {string} realm realm name (not id!)
   * @param {string} alias
   * @param {IdentityProviderMapperRepresentation} identityProviderMapperRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityProvidersApi
   */
  public realmIdentityProviderInstancesAliasMappersPost(
    realm: string,
    alias: string,
    identityProviderMapperRepresentation: IdentityProviderMapperRepresentation,
    options?: AxiosRequestConfig
  ) {
    return IdentityProvidersApiFp(this.configuration)
      .realmIdentityProviderInstancesAliasMappersPost(
        realm,
        alias,
        identityProviderMapperRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update the identity provider
   * @param {string} realm realm name (not id!)
   * @param {string} alias
   * @param {IdentityProviderRepresentation} identityProviderRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityProvidersApi
   */
  public realmIdentityProviderInstancesAliasPut(
    realm: string,
    alias: string,
    identityProviderRepresentation: IdentityProviderRepresentation,
    options?: AxiosRequestConfig
  ) {
    return IdentityProvidersApiFp(this.configuration)
      .realmIdentityProviderInstancesAliasPut(
        realm,
        alias,
        identityProviderRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get identity providers
   * @param {string} realm realm name (not id!)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityProvidersApi
   */
  public realmIdentityProviderInstancesGet(
    realm: string,
    options?: AxiosRequestConfig
  ) {
    return IdentityProvidersApiFp(this.configuration)
      .realmIdentityProviderInstancesGet(realm, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new identity provider
   * @param {string} realm realm name (not id!)
   * @param {IdentityProviderRepresentation} identityProviderRepresentation JSON body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityProvidersApi
   */
  public realmIdentityProviderInstancesPost(
    realm: string,
    identityProviderRepresentation: IdentityProviderRepresentation,
    options?: AxiosRequestConfig
  ) {
    return IdentityProvidersApiFp(this.configuration)
      .realmIdentityProviderInstancesPost(
        realm,
        identityProviderRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get identity providers
   * @param {string} realm realm name (not id!)
   * @param {string} providerId Provider id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IdentityProvidersApi
   */
  public realmIdentityProviderProvidersProviderIdGet(
    realm: string,
    providerId: string,
    options?: AxiosRequestConfig
  ) {
    return IdentityProvidersApiFp(this.configuration)
      .realmIdentityProviderProvidersProviderIdGet(realm, providerId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
