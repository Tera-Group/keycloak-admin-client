/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { MappingsRepresentation } from '../model';
// @ts-ignore
import { RoleRepresentation } from '../model';
/**
 * RoleMapperApi - axios parameter creator
 * @export
 */
export const RoleMapperApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Get role mappings
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsGet: async (
      realm: string,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmGroupsIdRoleMappingsGet', 'realm', realm);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmGroupsIdRoleMappingsGet', 'id', id);
      const localVarPath = `/{realm}/groups/{id}/role-mappings`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get realm-level roles that can be mapped
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsRealmAvailableGet: async (
      realm: string,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmGroupsIdRoleMappingsRealmAvailableGet',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmGroupsIdRoleMappingsRealmAvailableGet', 'id', id);
      const localVarPath = `/{realm}/groups/{id}/role-mappings/realm/available`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get effective realm-level role mappings   This will recurse all composite roles to get the result.
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {boolean} [briefRepresentation] if false, return roles with their attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsRealmCompositeGet: async (
      realm: string,
      id: string,
      briefRepresentation?: boolean,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmGroupsIdRoleMappingsRealmCompositeGet',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmGroupsIdRoleMappingsRealmCompositeGet', 'id', id);
      const localVarPath = `/{realm}/groups/{id}/role-mappings/realm/composite`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (briefRepresentation !== undefined) {
        localVarQueryParameter['briefRepresentation'] = briefRepresentation;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete realm-level role mappings
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsRealmDelete: async (
      realm: string,
      id: string,
      roleRepresentation: Array<RoleRepresentation>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmGroupsIdRoleMappingsRealmDelete', 'realm', realm);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmGroupsIdRoleMappingsRealmDelete', 'id', id);
      // verify required parameter 'roleRepresentation' is not null or undefined
      assertParamExists(
        'realmGroupsIdRoleMappingsRealmDelete',
        'roleRepresentation',
        roleRepresentation
      );
      const localVarPath = `/{realm}/groups/{id}/role-mappings/realm`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get realm-level role mappings
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsRealmGet: async (
      realm: string,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmGroupsIdRoleMappingsRealmGet', 'realm', realm);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmGroupsIdRoleMappingsRealmGet', 'id', id);
      const localVarPath = `/{realm}/groups/{id}/role-mappings/realm`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add realm-level role mappings to the user
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {Array<RoleRepresentation>} roleRepresentation Roles to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsRealmPost: async (
      realm: string,
      id: string,
      roleRepresentation: Array<RoleRepresentation>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmGroupsIdRoleMappingsRealmPost', 'realm', realm);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmGroupsIdRoleMappingsRealmPost', 'id', id);
      // verify required parameter 'roleRepresentation' is not null or undefined
      assertParamExists(
        'realmGroupsIdRoleMappingsRealmPost',
        'roleRepresentation',
        roleRepresentation
      );
      const localVarPath = `/{realm}/groups/{id}/role-mappings/realm`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get role mappings
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsGet: async (
      realm: string,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmUsersIdRoleMappingsGet', 'realm', realm);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmUsersIdRoleMappingsGet', 'id', id);
      const localVarPath = `/{realm}/users/{id}/role-mappings`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get realm-level roles that can be mapped
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsRealmAvailableGet: async (
      realm: string,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmUsersIdRoleMappingsRealmAvailableGet',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmUsersIdRoleMappingsRealmAvailableGet', 'id', id);
      const localVarPath = `/{realm}/users/{id}/role-mappings/realm/available`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get effective realm-level role mappings   This will recurse all composite roles to get the result.
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {boolean} [briefRepresentation] if false, return roles with their attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsRealmCompositeGet: async (
      realm: string,
      id: string,
      briefRepresentation?: boolean,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmUsersIdRoleMappingsRealmCompositeGet',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmUsersIdRoleMappingsRealmCompositeGet', 'id', id);
      const localVarPath = `/{realm}/users/{id}/role-mappings/realm/composite`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (briefRepresentation !== undefined) {
        localVarQueryParameter['briefRepresentation'] = briefRepresentation;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete realm-level role mappings
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsRealmDelete: async (
      realm: string,
      id: string,
      roleRepresentation: Array<RoleRepresentation>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmUsersIdRoleMappingsRealmDelete', 'realm', realm);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmUsersIdRoleMappingsRealmDelete', 'id', id);
      // verify required parameter 'roleRepresentation' is not null or undefined
      assertParamExists(
        'realmUsersIdRoleMappingsRealmDelete',
        'roleRepresentation',
        roleRepresentation
      );
      const localVarPath = `/{realm}/users/{id}/role-mappings/realm`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get realm-level role mappings
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsRealmGet: async (
      realm: string,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmUsersIdRoleMappingsRealmGet', 'realm', realm);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmUsersIdRoleMappingsRealmGet', 'id', id);
      const localVarPath = `/{realm}/users/{id}/role-mappings/realm`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add realm-level role mappings to the user
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {Array<RoleRepresentation>} roleRepresentation Roles to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsRealmPost: async (
      realm: string,
      id: string,
      roleRepresentation: Array<RoleRepresentation>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmUsersIdRoleMappingsRealmPost', 'realm', realm);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmUsersIdRoleMappingsRealmPost', 'id', id);
      // verify required parameter 'roleRepresentation' is not null or undefined
      assertParamExists(
        'realmUsersIdRoleMappingsRealmPost',
        'roleRepresentation',
        roleRepresentation
      );
      const localVarPath = `/{realm}/users/{id}/role-mappings/realm`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RoleMapperApi - functional programming interface
 * @export
 */
export const RoleMapperApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    RoleMapperApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get role mappings
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmGroupsIdRoleMappingsGet(
      realm: string,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<MappingsRepresentation>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmGroupsIdRoleMappingsGet(
          realm,
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get realm-level roles that can be mapped
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmGroupsIdRoleMappingsRealmAvailableGet(
      realm: string,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmGroupsIdRoleMappingsRealmAvailableGet(
          realm,
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get effective realm-level role mappings   This will recurse all composite roles to get the result.
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {boolean} [briefRepresentation] if false, return roles with their attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmGroupsIdRoleMappingsRealmCompositeGet(
      realm: string,
      id: string,
      briefRepresentation?: boolean,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmGroupsIdRoleMappingsRealmCompositeGet(
          realm,
          id,
          briefRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete realm-level role mappings
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmGroupsIdRoleMappingsRealmDelete(
      realm: string,
      id: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmGroupsIdRoleMappingsRealmDelete(
          realm,
          id,
          roleRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get realm-level role mappings
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmGroupsIdRoleMappingsRealmGet(
      realm: string,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmGroupsIdRoleMappingsRealmGet(
          realm,
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Add realm-level role mappings to the user
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {Array<RoleRepresentation>} roleRepresentation Roles to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmGroupsIdRoleMappingsRealmPost(
      realm: string,
      id: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmGroupsIdRoleMappingsRealmPost(
          realm,
          id,
          roleRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get role mappings
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmUsersIdRoleMappingsGet(
      realm: string,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<MappingsRepresentation>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmUsersIdRoleMappingsGet(
          realm,
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get realm-level roles that can be mapped
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmUsersIdRoleMappingsRealmAvailableGet(
      realm: string,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmUsersIdRoleMappingsRealmAvailableGet(
          realm,
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get effective realm-level role mappings   This will recurse all composite roles to get the result.
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {boolean} [briefRepresentation] if false, return roles with their attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmUsersIdRoleMappingsRealmCompositeGet(
      realm: string,
      id: string,
      briefRepresentation?: boolean,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmUsersIdRoleMappingsRealmCompositeGet(
          realm,
          id,
          briefRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete realm-level role mappings
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmUsersIdRoleMappingsRealmDelete(
      realm: string,
      id: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmUsersIdRoleMappingsRealmDelete(
          realm,
          id,
          roleRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get realm-level role mappings
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmUsersIdRoleMappingsRealmGet(
      realm: string,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmUsersIdRoleMappingsRealmGet(
          realm,
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Add realm-level role mappings to the user
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {Array<RoleRepresentation>} roleRepresentation Roles to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmUsersIdRoleMappingsRealmPost(
      realm: string,
      id: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmUsersIdRoleMappingsRealmPost(
          realm,
          id,
          roleRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * RoleMapperApi - factory interface
 * @export
 */
export const RoleMapperApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = RoleMapperApiFp(configuration);
  return {
    /**
     *
     * @summary Get role mappings
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsGet(
      realm: string,
      id: string,
      options?: any
    ): AxiosPromise<MappingsRepresentation> {
      return localVarFp
        .realmGroupsIdRoleMappingsGet(realm, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get realm-level roles that can be mapped
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsRealmAvailableGet(
      realm: string,
      id: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmGroupsIdRoleMappingsRealmAvailableGet(realm, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get effective realm-level role mappings   This will recurse all composite roles to get the result.
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {boolean} [briefRepresentation] if false, return roles with their attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsRealmCompositeGet(
      realm: string,
      id: string,
      briefRepresentation?: boolean,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmGroupsIdRoleMappingsRealmCompositeGet(
          realm,
          id,
          briefRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete realm-level role mappings
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsRealmDelete(
      realm: string,
      id: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmGroupsIdRoleMappingsRealmDelete(
          realm,
          id,
          roleRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get realm-level role mappings
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsRealmGet(
      realm: string,
      id: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmGroupsIdRoleMappingsRealmGet(realm, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add realm-level role mappings to the user
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {Array<RoleRepresentation>} roleRepresentation Roles to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsRealmPost(
      realm: string,
      id: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmGroupsIdRoleMappingsRealmPost(
          realm,
          id,
          roleRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get role mappings
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsGet(
      realm: string,
      id: string,
      options?: any
    ): AxiosPromise<MappingsRepresentation> {
      return localVarFp
        .realmUsersIdRoleMappingsGet(realm, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get realm-level roles that can be mapped
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsRealmAvailableGet(
      realm: string,
      id: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmUsersIdRoleMappingsRealmAvailableGet(realm, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get effective realm-level role mappings   This will recurse all composite roles to get the result.
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {boolean} [briefRepresentation] if false, return roles with their attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsRealmCompositeGet(
      realm: string,
      id: string,
      briefRepresentation?: boolean,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmUsersIdRoleMappingsRealmCompositeGet(
          realm,
          id,
          briefRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete realm-level role mappings
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsRealmDelete(
      realm: string,
      id: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmUsersIdRoleMappingsRealmDelete(
          realm,
          id,
          roleRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get realm-level role mappings
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsRealmGet(
      realm: string,
      id: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmUsersIdRoleMappingsRealmGet(realm, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add realm-level role mappings to the user
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {Array<RoleRepresentation>} roleRepresentation Roles to add
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsRealmPost(
      realm: string,
      id: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmUsersIdRoleMappingsRealmPost(
          realm,
          id,
          roleRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RoleMapperApi - object-oriented interface
 * @export
 * @class RoleMapperApi
 * @extends {BaseAPI}
 */
export class RoleMapperApi extends BaseAPI {
  /**
   *
   * @summary Get role mappings
   * @param {string} realm realm name (not id!)
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleMapperApi
   */
  public realmGroupsIdRoleMappingsGet(
    realm: string,
    id: string,
    options?: AxiosRequestConfig
  ) {
    return RoleMapperApiFp(this.configuration)
      .realmGroupsIdRoleMappingsGet(realm, id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get realm-level roles that can be mapped
   * @param {string} realm realm name (not id!)
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleMapperApi
   */
  public realmGroupsIdRoleMappingsRealmAvailableGet(
    realm: string,
    id: string,
    options?: AxiosRequestConfig
  ) {
    return RoleMapperApiFp(this.configuration)
      .realmGroupsIdRoleMappingsRealmAvailableGet(realm, id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get effective realm-level role mappings   This will recurse all composite roles to get the result.
   * @param {string} realm realm name (not id!)
   * @param {string} id
   * @param {boolean} [briefRepresentation] if false, return roles with their attributes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleMapperApi
   */
  public realmGroupsIdRoleMappingsRealmCompositeGet(
    realm: string,
    id: string,
    briefRepresentation?: boolean,
    options?: AxiosRequestConfig
  ) {
    return RoleMapperApiFp(this.configuration)
      .realmGroupsIdRoleMappingsRealmCompositeGet(
        realm,
        id,
        briefRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete realm-level role mappings
   * @param {string} realm realm name (not id!)
   * @param {string} id
   * @param {Array<RoleRepresentation>} roleRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleMapperApi
   */
  public realmGroupsIdRoleMappingsRealmDelete(
    realm: string,
    id: string,
    roleRepresentation: Array<RoleRepresentation>,
    options?: AxiosRequestConfig
  ) {
    return RoleMapperApiFp(this.configuration)
      .realmGroupsIdRoleMappingsRealmDelete(
        realm,
        id,
        roleRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get realm-level role mappings
   * @param {string} realm realm name (not id!)
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleMapperApi
   */
  public realmGroupsIdRoleMappingsRealmGet(
    realm: string,
    id: string,
    options?: AxiosRequestConfig
  ) {
    return RoleMapperApiFp(this.configuration)
      .realmGroupsIdRoleMappingsRealmGet(realm, id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add realm-level role mappings to the user
   * @param {string} realm realm name (not id!)
   * @param {string} id
   * @param {Array<RoleRepresentation>} roleRepresentation Roles to add
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleMapperApi
   */
  public realmGroupsIdRoleMappingsRealmPost(
    realm: string,
    id: string,
    roleRepresentation: Array<RoleRepresentation>,
    options?: AxiosRequestConfig
  ) {
    return RoleMapperApiFp(this.configuration)
      .realmGroupsIdRoleMappingsRealmPost(
        realm,
        id,
        roleRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get role mappings
   * @param {string} realm realm name (not id!)
   * @param {string} id User id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleMapperApi
   */
  public realmUsersIdRoleMappingsGet(
    realm: string,
    id: string,
    options?: AxiosRequestConfig
  ) {
    return RoleMapperApiFp(this.configuration)
      .realmUsersIdRoleMappingsGet(realm, id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get realm-level roles that can be mapped
   * @param {string} realm realm name (not id!)
   * @param {string} id User id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleMapperApi
   */
  public realmUsersIdRoleMappingsRealmAvailableGet(
    realm: string,
    id: string,
    options?: AxiosRequestConfig
  ) {
    return RoleMapperApiFp(this.configuration)
      .realmUsersIdRoleMappingsRealmAvailableGet(realm, id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get effective realm-level role mappings   This will recurse all composite roles to get the result.
   * @param {string} realm realm name (not id!)
   * @param {string} id User id
   * @param {boolean} [briefRepresentation] if false, return roles with their attributes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleMapperApi
   */
  public realmUsersIdRoleMappingsRealmCompositeGet(
    realm: string,
    id: string,
    briefRepresentation?: boolean,
    options?: AxiosRequestConfig
  ) {
    return RoleMapperApiFp(this.configuration)
      .realmUsersIdRoleMappingsRealmCompositeGet(
        realm,
        id,
        briefRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete realm-level role mappings
   * @param {string} realm realm name (not id!)
   * @param {string} id User id
   * @param {Array<RoleRepresentation>} roleRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleMapperApi
   */
  public realmUsersIdRoleMappingsRealmDelete(
    realm: string,
    id: string,
    roleRepresentation: Array<RoleRepresentation>,
    options?: AxiosRequestConfig
  ) {
    return RoleMapperApiFp(this.configuration)
      .realmUsersIdRoleMappingsRealmDelete(
        realm,
        id,
        roleRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get realm-level role mappings
   * @param {string} realm realm name (not id!)
   * @param {string} id User id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleMapperApi
   */
  public realmUsersIdRoleMappingsRealmGet(
    realm: string,
    id: string,
    options?: AxiosRequestConfig
  ) {
    return RoleMapperApiFp(this.configuration)
      .realmUsersIdRoleMappingsRealmGet(realm, id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add realm-level role mappings to the user
   * @param {string} realm realm name (not id!)
   * @param {string} id User id
   * @param {Array<RoleRepresentation>} roleRepresentation Roles to add
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleMapperApi
   */
  public realmUsersIdRoleMappingsRealmPost(
    realm: string,
    id: string,
    roleRepresentation: Array<RoleRepresentation>,
    options?: AxiosRequestConfig
  ) {
    return RoleMapperApiFp(this.configuration)
      .realmUsersIdRoleMappingsRealmPost(realm, id, roleRepresentation, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
