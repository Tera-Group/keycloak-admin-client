/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { RoleRepresentation } from '../model';
/**
 * ClientRoleMappingsApi - axios parameter creator
 * @export
 */
export const ClientRoleMappingsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Get available client-level roles that can be mapped to the user
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {string} client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsClientsClientAvailableGet: async (
      realm: string,
      id: string,
      client: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmGroupsIdRoleMappingsClientsClientAvailableGet',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'realmGroupsIdRoleMappingsClientsClientAvailableGet',
        'id',
        id
      );
      // verify required parameter 'client' is not null or undefined
      assertParamExists(
        'realmGroupsIdRoleMappingsClientsClientAvailableGet',
        'client',
        client
      );
      const localVarPath =
        `/{realm}/groups/{id}/role-mappings/clients/{client}/available`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'id'}}`, encodeURIComponent(String(id)))
          .replace(`{${'client'}}`, encodeURIComponent(String(client)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get effective client-level role mappings   This recurses any composite roles
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {string} client
     * @param {boolean} [briefRepresentation] if false, return roles with their attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsClientsClientCompositeGet: async (
      realm: string,
      id: string,
      client: string,
      briefRepresentation?: boolean,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmGroupsIdRoleMappingsClientsClientCompositeGet',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'realmGroupsIdRoleMappingsClientsClientCompositeGet',
        'id',
        id
      );
      // verify required parameter 'client' is not null or undefined
      assertParamExists(
        'realmGroupsIdRoleMappingsClientsClientCompositeGet',
        'client',
        client
      );
      const localVarPath =
        `/{realm}/groups/{id}/role-mappings/clients/{client}/composite`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'id'}}`, encodeURIComponent(String(id)))
          .replace(`{${'client'}}`, encodeURIComponent(String(client)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (briefRepresentation !== undefined) {
        localVarQueryParameter['briefRepresentation'] = briefRepresentation;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete client-level roles from user role mapping
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {string} client
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsClientsClientDelete: async (
      realm: string,
      id: string,
      client: string,
      roleRepresentation: Array<RoleRepresentation>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmGroupsIdRoleMappingsClientsClientDelete',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'realmGroupsIdRoleMappingsClientsClientDelete',
        'id',
        id
      );
      // verify required parameter 'client' is not null or undefined
      assertParamExists(
        'realmGroupsIdRoleMappingsClientsClientDelete',
        'client',
        client
      );
      // verify required parameter 'roleRepresentation' is not null or undefined
      assertParamExists(
        'realmGroupsIdRoleMappingsClientsClientDelete',
        'roleRepresentation',
        roleRepresentation
      );
      const localVarPath = `/{realm}/groups/{id}/role-mappings/clients/{client}`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'client'}}`, encodeURIComponent(String(client)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get client-level role mappings for the user, and the app
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {string} client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsClientsClientGet: async (
      realm: string,
      id: string,
      client: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmGroupsIdRoleMappingsClientsClientGet',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmGroupsIdRoleMappingsClientsClientGet', 'id', id);
      // verify required parameter 'client' is not null or undefined
      assertParamExists(
        'realmGroupsIdRoleMappingsClientsClientGet',
        'client',
        client
      );
      const localVarPath = `/{realm}/groups/{id}/role-mappings/clients/{client}`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'client'}}`, encodeURIComponent(String(client)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add client-level roles to the user role mapping
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {string} client
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsClientsClientPost: async (
      realm: string,
      id: string,
      client: string,
      roleRepresentation: Array<RoleRepresentation>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmGroupsIdRoleMappingsClientsClientPost',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmGroupsIdRoleMappingsClientsClientPost', 'id', id);
      // verify required parameter 'client' is not null or undefined
      assertParamExists(
        'realmGroupsIdRoleMappingsClientsClientPost',
        'client',
        client
      );
      // verify required parameter 'roleRepresentation' is not null or undefined
      assertParamExists(
        'realmGroupsIdRoleMappingsClientsClientPost',
        'roleRepresentation',
        roleRepresentation
      );
      const localVarPath = `/{realm}/groups/{id}/role-mappings/clients/{client}`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'client'}}`, encodeURIComponent(String(client)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get available client-level roles that can be mapped to the user
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {string} client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsClientsClientAvailableGet: async (
      realm: string,
      id: string,
      client: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmUsersIdRoleMappingsClientsClientAvailableGet',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'realmUsersIdRoleMappingsClientsClientAvailableGet',
        'id',
        id
      );
      // verify required parameter 'client' is not null or undefined
      assertParamExists(
        'realmUsersIdRoleMappingsClientsClientAvailableGet',
        'client',
        client
      );
      const localVarPath =
        `/{realm}/users/{id}/role-mappings/clients/{client}/available`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'id'}}`, encodeURIComponent(String(id)))
          .replace(`{${'client'}}`, encodeURIComponent(String(client)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get effective client-level role mappings   This recurses any composite roles
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {string} client
     * @param {boolean} [briefRepresentation] if false, return roles with their attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsClientsClientCompositeGet: async (
      realm: string,
      id: string,
      client: string,
      briefRepresentation?: boolean,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmUsersIdRoleMappingsClientsClientCompositeGet',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'realmUsersIdRoleMappingsClientsClientCompositeGet',
        'id',
        id
      );
      // verify required parameter 'client' is not null or undefined
      assertParamExists(
        'realmUsersIdRoleMappingsClientsClientCompositeGet',
        'client',
        client
      );
      const localVarPath =
        `/{realm}/users/{id}/role-mappings/clients/{client}/composite`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'id'}}`, encodeURIComponent(String(id)))
          .replace(`{${'client'}}`, encodeURIComponent(String(client)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (briefRepresentation !== undefined) {
        localVarQueryParameter['briefRepresentation'] = briefRepresentation;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete client-level roles from user role mapping
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {string} client
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsClientsClientDelete: async (
      realm: string,
      id: string,
      client: string,
      roleRepresentation: Array<RoleRepresentation>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmUsersIdRoleMappingsClientsClientDelete',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'realmUsersIdRoleMappingsClientsClientDelete',
        'id',
        id
      );
      // verify required parameter 'client' is not null or undefined
      assertParamExists(
        'realmUsersIdRoleMappingsClientsClientDelete',
        'client',
        client
      );
      // verify required parameter 'roleRepresentation' is not null or undefined
      assertParamExists(
        'realmUsersIdRoleMappingsClientsClientDelete',
        'roleRepresentation',
        roleRepresentation
      );
      const localVarPath = `/{realm}/users/{id}/role-mappings/clients/{client}`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'client'}}`, encodeURIComponent(String(client)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get client-level role mappings for the user, and the app
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {string} client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsClientsClientGet: async (
      realm: string,
      id: string,
      client: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmUsersIdRoleMappingsClientsClientGet',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmUsersIdRoleMappingsClientsClientGet', 'id', id);
      // verify required parameter 'client' is not null or undefined
      assertParamExists(
        'realmUsersIdRoleMappingsClientsClientGet',
        'client',
        client
      );
      const localVarPath = `/{realm}/users/{id}/role-mappings/clients/{client}`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'client'}}`, encodeURIComponent(String(client)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add client-level roles to the user role mapping
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {string} client
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsClientsClientPost: async (
      realm: string,
      id: string,
      client: string,
      roleRepresentation: Array<RoleRepresentation>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmUsersIdRoleMappingsClientsClientPost',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmUsersIdRoleMappingsClientsClientPost', 'id', id);
      // verify required parameter 'client' is not null or undefined
      assertParamExists(
        'realmUsersIdRoleMappingsClientsClientPost',
        'client',
        client
      );
      // verify required parameter 'roleRepresentation' is not null or undefined
      assertParamExists(
        'realmUsersIdRoleMappingsClientsClientPost',
        'roleRepresentation',
        roleRepresentation
      );
      const localVarPath = `/{realm}/users/{id}/role-mappings/clients/{client}`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'client'}}`, encodeURIComponent(String(client)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ClientRoleMappingsApi - functional programming interface
 * @export
 */
export const ClientRoleMappingsApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    ClientRoleMappingsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get available client-level roles that can be mapped to the user
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {string} client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmGroupsIdRoleMappingsClientsClientAvailableGet(
      realm: string,
      id: string,
      client: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmGroupsIdRoleMappingsClientsClientAvailableGet(
          realm,
          id,
          client,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get effective client-level role mappings   This recurses any composite roles
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {string} client
     * @param {boolean} [briefRepresentation] if false, return roles with their attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmGroupsIdRoleMappingsClientsClientCompositeGet(
      realm: string,
      id: string,
      client: string,
      briefRepresentation?: boolean,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmGroupsIdRoleMappingsClientsClientCompositeGet(
          realm,
          id,
          client,
          briefRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete client-level roles from user role mapping
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {string} client
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmGroupsIdRoleMappingsClientsClientDelete(
      realm: string,
      id: string,
      client: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmGroupsIdRoleMappingsClientsClientDelete(
          realm,
          id,
          client,
          roleRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get client-level role mappings for the user, and the app
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {string} client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmGroupsIdRoleMappingsClientsClientGet(
      realm: string,
      id: string,
      client: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmGroupsIdRoleMappingsClientsClientGet(
          realm,
          id,
          client,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Add client-level roles to the user role mapping
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {string} client
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmGroupsIdRoleMappingsClientsClientPost(
      realm: string,
      id: string,
      client: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmGroupsIdRoleMappingsClientsClientPost(
          realm,
          id,
          client,
          roleRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get available client-level roles that can be mapped to the user
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {string} client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmUsersIdRoleMappingsClientsClientAvailableGet(
      realm: string,
      id: string,
      client: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmUsersIdRoleMappingsClientsClientAvailableGet(
          realm,
          id,
          client,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get effective client-level role mappings   This recurses any composite roles
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {string} client
     * @param {boolean} [briefRepresentation] if false, return roles with their attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmUsersIdRoleMappingsClientsClientCompositeGet(
      realm: string,
      id: string,
      client: string,
      briefRepresentation?: boolean,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmUsersIdRoleMappingsClientsClientCompositeGet(
          realm,
          id,
          client,
          briefRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete client-level roles from user role mapping
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {string} client
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmUsersIdRoleMappingsClientsClientDelete(
      realm: string,
      id: string,
      client: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmUsersIdRoleMappingsClientsClientDelete(
          realm,
          id,
          client,
          roleRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get client-level role mappings for the user, and the app
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {string} client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmUsersIdRoleMappingsClientsClientGet(
      realm: string,
      id: string,
      client: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmUsersIdRoleMappingsClientsClientGet(
          realm,
          id,
          client,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Add client-level roles to the user role mapping
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {string} client
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmUsersIdRoleMappingsClientsClientPost(
      realm: string,
      id: string,
      client: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmUsersIdRoleMappingsClientsClientPost(
          realm,
          id,
          client,
          roleRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ClientRoleMappingsApi - factory interface
 * @export
 */
export const ClientRoleMappingsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ClientRoleMappingsApiFp(configuration);
  return {
    /**
     *
     * @summary Get available client-level roles that can be mapped to the user
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {string} client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsClientsClientAvailableGet(
      realm: string,
      id: string,
      client: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmGroupsIdRoleMappingsClientsClientAvailableGet(
          realm,
          id,
          client,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get effective client-level role mappings   This recurses any composite roles
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {string} client
     * @param {boolean} [briefRepresentation] if false, return roles with their attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsClientsClientCompositeGet(
      realm: string,
      id: string,
      client: string,
      briefRepresentation?: boolean,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmGroupsIdRoleMappingsClientsClientCompositeGet(
          realm,
          id,
          client,
          briefRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete client-level roles from user role mapping
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {string} client
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsClientsClientDelete(
      realm: string,
      id: string,
      client: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmGroupsIdRoleMappingsClientsClientDelete(
          realm,
          id,
          client,
          roleRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get client-level role mappings for the user, and the app
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {string} client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsClientsClientGet(
      realm: string,
      id: string,
      client: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmGroupsIdRoleMappingsClientsClientGet(realm, id, client, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add client-level roles to the user role mapping
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {string} client
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmGroupsIdRoleMappingsClientsClientPost(
      realm: string,
      id: string,
      client: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmGroupsIdRoleMappingsClientsClientPost(
          realm,
          id,
          client,
          roleRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get available client-level roles that can be mapped to the user
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {string} client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsClientsClientAvailableGet(
      realm: string,
      id: string,
      client: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmUsersIdRoleMappingsClientsClientAvailableGet(
          realm,
          id,
          client,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get effective client-level role mappings   This recurses any composite roles
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {string} client
     * @param {boolean} [briefRepresentation] if false, return roles with their attributes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsClientsClientCompositeGet(
      realm: string,
      id: string,
      client: string,
      briefRepresentation?: boolean,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmUsersIdRoleMappingsClientsClientCompositeGet(
          realm,
          id,
          client,
          briefRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete client-level roles from user role mapping
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {string} client
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsClientsClientDelete(
      realm: string,
      id: string,
      client: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmUsersIdRoleMappingsClientsClientDelete(
          realm,
          id,
          client,
          roleRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get client-level role mappings for the user, and the app
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {string} client
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsClientsClientGet(
      realm: string,
      id: string,
      client: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmUsersIdRoleMappingsClientsClientGet(realm, id, client, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add client-level roles to the user role mapping
     * @param {string} realm realm name (not id!)
     * @param {string} id User id
     * @param {string} client
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmUsersIdRoleMappingsClientsClientPost(
      realm: string,
      id: string,
      client: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmUsersIdRoleMappingsClientsClientPost(
          realm,
          id,
          client,
          roleRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ClientRoleMappingsApi - object-oriented interface
 * @export
 * @class ClientRoleMappingsApi
 * @extends {BaseAPI}
 */
export class ClientRoleMappingsApi extends BaseAPI {
  /**
   *
   * @summary Get available client-level roles that can be mapped to the user
   * @param {string} realm realm name (not id!)
   * @param {string} id
   * @param {string} client
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientRoleMappingsApi
   */
  public realmGroupsIdRoleMappingsClientsClientAvailableGet(
    realm: string,
    id: string,
    client: string,
    options?: AxiosRequestConfig
  ) {
    return ClientRoleMappingsApiFp(this.configuration)
      .realmGroupsIdRoleMappingsClientsClientAvailableGet(
        realm,
        id,
        client,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get effective client-level role mappings   This recurses any composite roles
   * @param {string} realm realm name (not id!)
   * @param {string} id
   * @param {string} client
   * @param {boolean} [briefRepresentation] if false, return roles with their attributes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientRoleMappingsApi
   */
  public realmGroupsIdRoleMappingsClientsClientCompositeGet(
    realm: string,
    id: string,
    client: string,
    briefRepresentation?: boolean,
    options?: AxiosRequestConfig
  ) {
    return ClientRoleMappingsApiFp(this.configuration)
      .realmGroupsIdRoleMappingsClientsClientCompositeGet(
        realm,
        id,
        client,
        briefRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete client-level roles from user role mapping
   * @param {string} realm realm name (not id!)
   * @param {string} id
   * @param {string} client
   * @param {Array<RoleRepresentation>} roleRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientRoleMappingsApi
   */
  public realmGroupsIdRoleMappingsClientsClientDelete(
    realm: string,
    id: string,
    client: string,
    roleRepresentation: Array<RoleRepresentation>,
    options?: AxiosRequestConfig
  ) {
    return ClientRoleMappingsApiFp(this.configuration)
      .realmGroupsIdRoleMappingsClientsClientDelete(
        realm,
        id,
        client,
        roleRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get client-level role mappings for the user, and the app
   * @param {string} realm realm name (not id!)
   * @param {string} id
   * @param {string} client
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientRoleMappingsApi
   */
  public realmGroupsIdRoleMappingsClientsClientGet(
    realm: string,
    id: string,
    client: string,
    options?: AxiosRequestConfig
  ) {
    return ClientRoleMappingsApiFp(this.configuration)
      .realmGroupsIdRoleMappingsClientsClientGet(realm, id, client, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add client-level roles to the user role mapping
   * @param {string} realm realm name (not id!)
   * @param {string} id
   * @param {string} client
   * @param {Array<RoleRepresentation>} roleRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientRoleMappingsApi
   */
  public realmGroupsIdRoleMappingsClientsClientPost(
    realm: string,
    id: string,
    client: string,
    roleRepresentation: Array<RoleRepresentation>,
    options?: AxiosRequestConfig
  ) {
    return ClientRoleMappingsApiFp(this.configuration)
      .realmGroupsIdRoleMappingsClientsClientPost(
        realm,
        id,
        client,
        roleRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get available client-level roles that can be mapped to the user
   * @param {string} realm realm name (not id!)
   * @param {string} id User id
   * @param {string} client
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientRoleMappingsApi
   */
  public realmUsersIdRoleMappingsClientsClientAvailableGet(
    realm: string,
    id: string,
    client: string,
    options?: AxiosRequestConfig
  ) {
    return ClientRoleMappingsApiFp(this.configuration)
      .realmUsersIdRoleMappingsClientsClientAvailableGet(
        realm,
        id,
        client,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get effective client-level role mappings   This recurses any composite roles
   * @param {string} realm realm name (not id!)
   * @param {string} id User id
   * @param {string} client
   * @param {boolean} [briefRepresentation] if false, return roles with their attributes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientRoleMappingsApi
   */
  public realmUsersIdRoleMappingsClientsClientCompositeGet(
    realm: string,
    id: string,
    client: string,
    briefRepresentation?: boolean,
    options?: AxiosRequestConfig
  ) {
    return ClientRoleMappingsApiFp(this.configuration)
      .realmUsersIdRoleMappingsClientsClientCompositeGet(
        realm,
        id,
        client,
        briefRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete client-level roles from user role mapping
   * @param {string} realm realm name (not id!)
   * @param {string} id User id
   * @param {string} client
   * @param {Array<RoleRepresentation>} roleRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientRoleMappingsApi
   */
  public realmUsersIdRoleMappingsClientsClientDelete(
    realm: string,
    id: string,
    client: string,
    roleRepresentation: Array<RoleRepresentation>,
    options?: AxiosRequestConfig
  ) {
    return ClientRoleMappingsApiFp(this.configuration)
      .realmUsersIdRoleMappingsClientsClientDelete(
        realm,
        id,
        client,
        roleRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get client-level role mappings for the user, and the app
   * @param {string} realm realm name (not id!)
   * @param {string} id User id
   * @param {string} client
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientRoleMappingsApi
   */
  public realmUsersIdRoleMappingsClientsClientGet(
    realm: string,
    id: string,
    client: string,
    options?: AxiosRequestConfig
  ) {
    return ClientRoleMappingsApiFp(this.configuration)
      .realmUsersIdRoleMappingsClientsClientGet(realm, id, client, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add client-level roles to the user role mapping
   * @param {string} realm realm name (not id!)
   * @param {string} id User id
   * @param {string} client
   * @param {Array<RoleRepresentation>} roleRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientRoleMappingsApi
   */
  public realmUsersIdRoleMappingsClientsClientPost(
    realm: string,
    id: string,
    client: string,
    roleRepresentation: Array<RoleRepresentation>,
    options?: AxiosRequestConfig
  ) {
    return ClientRoleMappingsApiFp(this.configuration)
      .realmUsersIdRoleMappingsClientsClientPost(
        realm,
        id,
        client,
        roleRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
