/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { ClientInitialAccessCreatePresentation } from '../model';
// @ts-ignore
import { ClientInitialAccessPresentation } from '../model';
/**
 * ClientInitialAccessApi - axios parameter creator
 * @export
 */
export const ClientInitialAccessApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {string} realm realm name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsInitialAccessGet: async (
      realm: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmClientsInitialAccessGet', 'realm', realm);
      const localVarPath = `/{realm}/clients-initial-access`.replace(
        `{${'realm'}}`,
        encodeURIComponent(String(realm))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsInitialAccessIdDelete: async (
      realm: string,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmClientsInitialAccessIdDelete', 'realm', realm);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmClientsInitialAccessIdDelete', 'id', id);
      const localVarPath = `/{realm}/clients-initial-access/{id}`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new initial access token.
     * @param {string} realm realm name (not id!)
     * @param {ClientInitialAccessCreatePresentation} clientInitialAccessCreatePresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsInitialAccessPost: async (
      realm: string,
      clientInitialAccessCreatePresentation: ClientInitialAccessCreatePresentation,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmClientsInitialAccessPost', 'realm', realm);
      // verify required parameter 'clientInitialAccessCreatePresentation' is not null or undefined
      assertParamExists(
        'realmClientsInitialAccessPost',
        'clientInitialAccessCreatePresentation',
        clientInitialAccessCreatePresentation
      );
      const localVarPath = `/{realm}/clients-initial-access`.replace(
        `{${'realm'}}`,
        encodeURIComponent(String(realm))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        clientInitialAccessCreatePresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ClientInitialAccessApi - functional programming interface
 * @export
 */
export const ClientInitialAccessApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    ClientInitialAccessApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} realm realm name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsInitialAccessGet(
      realm: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsInitialAccessGet(
          realm,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsInitialAccessIdDelete(
      realm: string,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsInitialAccessIdDelete(
          realm,
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create a new initial access token.
     * @param {string} realm realm name (not id!)
     * @param {ClientInitialAccessCreatePresentation} clientInitialAccessCreatePresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsInitialAccessPost(
      realm: string,
      clientInitialAccessCreatePresentation: ClientInitialAccessCreatePresentation,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ClientInitialAccessPresentation>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsInitialAccessPost(
          realm,
          clientInitialAccessCreatePresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ClientInitialAccessApi - factory interface
 * @export
 */
export const ClientInitialAccessApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ClientInitialAccessApiFp(configuration);
  return {
    /**
     *
     * @param {string} realm realm name (not id!)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsInitialAccessGet(
      realm: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmClientsInitialAccessGet(realm, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} realm realm name (not id!)
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsInitialAccessIdDelete(
      realm: string,
      id: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmClientsInitialAccessIdDelete(realm, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new initial access token.
     * @param {string} realm realm name (not id!)
     * @param {ClientInitialAccessCreatePresentation} clientInitialAccessCreatePresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsInitialAccessPost(
      realm: string,
      clientInitialAccessCreatePresentation: ClientInitialAccessCreatePresentation,
      options?: any
    ): AxiosPromise<ClientInitialAccessPresentation> {
      return localVarFp
        .realmClientsInitialAccessPost(
          realm,
          clientInitialAccessCreatePresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ClientInitialAccessApi - object-oriented interface
 * @export
 * @class ClientInitialAccessApi
 * @extends {BaseAPI}
 */
export class ClientInitialAccessApi extends BaseAPI {
  /**
   *
   * @param {string} realm realm name (not id!)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientInitialAccessApi
   */
  public realmClientsInitialAccessGet(
    realm: string,
    options?: AxiosRequestConfig
  ) {
    return ClientInitialAccessApiFp(this.configuration)
      .realmClientsInitialAccessGet(realm, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} realm realm name (not id!)
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientInitialAccessApi
   */
  public realmClientsInitialAccessIdDelete(
    realm: string,
    id: string,
    options?: AxiosRequestConfig
  ) {
    return ClientInitialAccessApiFp(this.configuration)
      .realmClientsInitialAccessIdDelete(realm, id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new initial access token.
   * @param {string} realm realm name (not id!)
   * @param {ClientInitialAccessCreatePresentation} clientInitialAccessCreatePresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientInitialAccessApi
   */
  public realmClientsInitialAccessPost(
    realm: string,
    clientInitialAccessCreatePresentation: ClientInitialAccessCreatePresentation,
    options?: AxiosRequestConfig
  ) {
    return ClientInitialAccessApiFp(this.configuration)
      .realmClientsInitialAccessPost(
        realm,
        clientInitialAccessCreatePresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
