/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { ManagementPermissionReference } from '../model';
// @ts-ignore
import { RoleRepresentation } from '../model';
/**
 * RolesByIDApi - axios parameter creator
 * @export
 */
export const RolesByIDApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Get client-level roles for the client that are in the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} roleId
     * @param {string} clientUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesByIdRoleIdCompositesClientsClientUuidGet: async (
      realm: string,
      roleId: string,
      clientUuid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmRolesByIdRoleIdCompositesClientsClientUuidGet',
        'realm',
        realm
      );
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists(
        'realmRolesByIdRoleIdCompositesClientsClientUuidGet',
        'roleId',
        roleId
      );
      // verify required parameter 'clientUuid' is not null or undefined
      assertParamExists(
        'realmRolesByIdRoleIdCompositesClientsClientUuidGet',
        'clientUuid',
        clientUuid
      );
      const localVarPath =
        `/{realm}/roles-by-id/{role-id}/composites/clients/{clientUuid}`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'role-id'}}`, encodeURIComponent(String(roleId)))
          .replace(`{${'clientUuid'}}`, encodeURIComponent(String(clientUuid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Remove a set of roles from the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} roleId Role id
     * @param {Array<RoleRepresentation>} roleRepresentation A set of roles to be removed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesByIdRoleIdCompositesDelete: async (
      realm: string,
      roleId: string,
      roleRepresentation: Array<RoleRepresentation>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmRolesByIdRoleIdCompositesDelete', 'realm', realm);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists(
        'realmRolesByIdRoleIdCompositesDelete',
        'roleId',
        roleId
      );
      // verify required parameter 'roleRepresentation' is not null or undefined
      assertParamExists(
        'realmRolesByIdRoleIdCompositesDelete',
        'roleRepresentation',
        roleRepresentation
      );
      const localVarPath = `/{realm}/roles-by-id/{role-id}/composites`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'role-id'}}`, encodeURIComponent(String(roleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get role’s children   Returns a set of role’s children provided the role is a composite.
     * @param {string} realm realm name (not id!)
     * @param {string} roleId Role id
     * @param {number} [first]
     * @param {number} [max]
     * @param {string} [search]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesByIdRoleIdCompositesGet: async (
      realm: string,
      roleId: string,
      first?: number,
      max?: number,
      search?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmRolesByIdRoleIdCompositesGet', 'realm', realm);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('realmRolesByIdRoleIdCompositesGet', 'roleId', roleId);
      const localVarPath = `/{realm}/roles-by-id/{role-id}/composites`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'role-id'}}`, encodeURIComponent(String(roleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (first !== undefined) {
        localVarQueryParameter['first'] = first;
      }

      if (max !== undefined) {
        localVarQueryParameter['max'] = max;
      }

      if (search !== undefined) {
        localVarQueryParameter['search'] = search;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Make the role a composite role by associating some child roles
     * @param {string} realm realm name (not id!)
     * @param {string} roleId Role id
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesByIdRoleIdCompositesPost: async (
      realm: string,
      roleId: string,
      roleRepresentation: Array<RoleRepresentation>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmRolesByIdRoleIdCompositesPost', 'realm', realm);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('realmRolesByIdRoleIdCompositesPost', 'roleId', roleId);
      // verify required parameter 'roleRepresentation' is not null or undefined
      assertParamExists(
        'realmRolesByIdRoleIdCompositesPost',
        'roleRepresentation',
        roleRepresentation
      );
      const localVarPath = `/{realm}/roles-by-id/{role-id}/composites`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'role-id'}}`, encodeURIComponent(String(roleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get realm-level roles that are in the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesByIdRoleIdCompositesRealmGet: async (
      realm: string,
      roleId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmRolesByIdRoleIdCompositesRealmGet',
        'realm',
        realm
      );
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists(
        'realmRolesByIdRoleIdCompositesRealmGet',
        'roleId',
        roleId
      );
      const localVarPath = `/{realm}/roles-by-id/{role-id}/composites/realm`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'role-id'}}`, encodeURIComponent(String(roleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete the role
     * @param {string} realm realm name (not id!)
     * @param {string} roleId id of role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesByIdRoleIdDelete: async (
      realm: string,
      roleId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmRolesByIdRoleIdDelete', 'realm', realm);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('realmRolesByIdRoleIdDelete', 'roleId', roleId);
      const localVarPath = `/{realm}/roles-by-id/{role-id}`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'role-id'}}`, encodeURIComponent(String(roleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a specific role’s representation
     * @param {string} realm realm name (not id!)
     * @param {string} roleId id of role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesByIdRoleIdGet: async (
      realm: string,
      roleId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmRolesByIdRoleIdGet', 'realm', realm);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('realmRolesByIdRoleIdGet', 'roleId', roleId);
      const localVarPath = `/{realm}/roles-by-id/{role-id}`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'role-id'}}`, encodeURIComponent(String(roleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesByIdRoleIdManagementPermissionsGet: async (
      realm: string,
      roleId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmRolesByIdRoleIdManagementPermissionsGet',
        'realm',
        realm
      );
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists(
        'realmRolesByIdRoleIdManagementPermissionsGet',
        'roleId',
        roleId
      );
      const localVarPath =
        `/{realm}/roles-by-id/{role-id}/management/permissions`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'role-id'}}`, encodeURIComponent(String(roleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} roleId
     * @param {ManagementPermissionReference} managementPermissionReference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesByIdRoleIdManagementPermissionsPut: async (
      realm: string,
      roleId: string,
      managementPermissionReference: ManagementPermissionReference,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmRolesByIdRoleIdManagementPermissionsPut',
        'realm',
        realm
      );
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists(
        'realmRolesByIdRoleIdManagementPermissionsPut',
        'roleId',
        roleId
      );
      // verify required parameter 'managementPermissionReference' is not null or undefined
      assertParamExists(
        'realmRolesByIdRoleIdManagementPermissionsPut',
        'managementPermissionReference',
        managementPermissionReference
      );
      const localVarPath =
        `/{realm}/roles-by-id/{role-id}/management/permissions`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'role-id'}}`, encodeURIComponent(String(roleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        managementPermissionReference,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update the role
     * @param {string} realm realm name (not id!)
     * @param {string} roleId id of role
     * @param {RoleRepresentation} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesByIdRoleIdPut: async (
      realm: string,
      roleId: string,
      roleRepresentation: RoleRepresentation,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmRolesByIdRoleIdPut', 'realm', realm);
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('realmRolesByIdRoleIdPut', 'roleId', roleId);
      // verify required parameter 'roleRepresentation' is not null or undefined
      assertParamExists(
        'realmRolesByIdRoleIdPut',
        'roleRepresentation',
        roleRepresentation
      );
      const localVarPath = `/{realm}/roles-by-id/{role-id}`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'role-id'}}`, encodeURIComponent(String(roleId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        roleRepresentation,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RolesByIDApi - functional programming interface
 * @export
 */
export const RolesByIDApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    RolesByIDApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get client-level roles for the client that are in the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} roleId
     * @param {string} clientUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesByIdRoleIdCompositesClientsClientUuidGet(
      realm: string,
      roleId: string,
      clientUuid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesByIdRoleIdCompositesClientsClientUuidGet(
          realm,
          roleId,
          clientUuid,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Remove a set of roles from the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} roleId Role id
     * @param {Array<RoleRepresentation>} roleRepresentation A set of roles to be removed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesByIdRoleIdCompositesDelete(
      realm: string,
      roleId: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesByIdRoleIdCompositesDelete(
          realm,
          roleId,
          roleRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get role’s children   Returns a set of role’s children provided the role is a composite.
     * @param {string} realm realm name (not id!)
     * @param {string} roleId Role id
     * @param {number} [first]
     * @param {number} [max]
     * @param {string} [search]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesByIdRoleIdCompositesGet(
      realm: string,
      roleId: string,
      first?: number,
      max?: number,
      search?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesByIdRoleIdCompositesGet(
          realm,
          roleId,
          first,
          max,
          search,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Make the role a composite role by associating some child roles
     * @param {string} realm realm name (not id!)
     * @param {string} roleId Role id
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesByIdRoleIdCompositesPost(
      realm: string,
      roleId: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesByIdRoleIdCompositesPost(
          realm,
          roleId,
          roleRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get realm-level roles that are in the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesByIdRoleIdCompositesRealmGet(
      realm: string,
      roleId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<{ [key: string]: any }>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesByIdRoleIdCompositesRealmGet(
          realm,
          roleId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete the role
     * @param {string} realm realm name (not id!)
     * @param {string} roleId id of role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesByIdRoleIdDelete(
      realm: string,
      roleId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesByIdRoleIdDelete(
          realm,
          roleId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get a specific role’s representation
     * @param {string} realm realm name (not id!)
     * @param {string} roleId id of role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesByIdRoleIdGet(
      realm: string,
      roleId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<RoleRepresentation>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesByIdRoleIdGet(
          realm,
          roleId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesByIdRoleIdManagementPermissionsGet(
      realm: string,
      roleId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ManagementPermissionReference>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesByIdRoleIdManagementPermissionsGet(
          realm,
          roleId,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} roleId
     * @param {ManagementPermissionReference} managementPermissionReference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesByIdRoleIdManagementPermissionsPut(
      realm: string,
      roleId: string,
      managementPermissionReference: ManagementPermissionReference,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ManagementPermissionReference>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesByIdRoleIdManagementPermissionsPut(
          realm,
          roleId,
          managementPermissionReference,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update the role
     * @param {string} realm realm name (not id!)
     * @param {string} roleId id of role
     * @param {RoleRepresentation} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmRolesByIdRoleIdPut(
      realm: string,
      roleId: string,
      roleRepresentation: RoleRepresentation,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmRolesByIdRoleIdPut(
          realm,
          roleId,
          roleRepresentation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * RolesByIDApi - factory interface
 * @export
 */
export const RolesByIDApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = RolesByIDApiFp(configuration);
  return {
    /**
     *
     * @summary Get client-level roles for the client that are in the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} roleId
     * @param {string} clientUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesByIdRoleIdCompositesClientsClientUuidGet(
      realm: string,
      roleId: string,
      clientUuid: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmRolesByIdRoleIdCompositesClientsClientUuidGet(
          realm,
          roleId,
          clientUuid,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Remove a set of roles from the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} roleId Role id
     * @param {Array<RoleRepresentation>} roleRepresentation A set of roles to be removed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesByIdRoleIdCompositesDelete(
      realm: string,
      roleId: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmRolesByIdRoleIdCompositesDelete(
          realm,
          roleId,
          roleRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get role’s children   Returns a set of role’s children provided the role is a composite.
     * @param {string} realm realm name (not id!)
     * @param {string} roleId Role id
     * @param {number} [first]
     * @param {number} [max]
     * @param {string} [search]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesByIdRoleIdCompositesGet(
      realm: string,
      roleId: string,
      first?: number,
      max?: number,
      search?: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmRolesByIdRoleIdCompositesGet(
          realm,
          roleId,
          first,
          max,
          search,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Make the role a composite role by associating some child roles
     * @param {string} realm realm name (not id!)
     * @param {string} roleId Role id
     * @param {Array<RoleRepresentation>} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesByIdRoleIdCompositesPost(
      realm: string,
      roleId: string,
      roleRepresentation: Array<RoleRepresentation>,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmRolesByIdRoleIdCompositesPost(
          realm,
          roleId,
          roleRepresentation,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get realm-level roles that are in the role’s composite
     * @param {string} realm realm name (not id!)
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesByIdRoleIdCompositesRealmGet(
      realm: string,
      roleId: string,
      options?: any
    ): AxiosPromise<Array<{ [key: string]: any }>> {
      return localVarFp
        .realmRolesByIdRoleIdCompositesRealmGet(realm, roleId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete the role
     * @param {string} realm realm name (not id!)
     * @param {string} roleId id of role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesByIdRoleIdDelete(
      realm: string,
      roleId: string,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmRolesByIdRoleIdDelete(realm, roleId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a specific role’s representation
     * @param {string} realm realm name (not id!)
     * @param {string} roleId id of role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesByIdRoleIdGet(
      realm: string,
      roleId: string,
      options?: any
    ): AxiosPromise<RoleRepresentation> {
      return localVarFp
        .realmRolesByIdRoleIdGet(realm, roleId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} roleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesByIdRoleIdManagementPermissionsGet(
      realm: string,
      roleId: string,
      options?: any
    ): AxiosPromise<ManagementPermissionReference> {
      return localVarFp
        .realmRolesByIdRoleIdManagementPermissionsGet(realm, roleId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Return object stating whether role Authoirzation permissions have been initialized or not and a reference
     * @param {string} realm realm name (not id!)
     * @param {string} roleId
     * @param {ManagementPermissionReference} managementPermissionReference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesByIdRoleIdManagementPermissionsPut(
      realm: string,
      roleId: string,
      managementPermissionReference: ManagementPermissionReference,
      options?: any
    ): AxiosPromise<ManagementPermissionReference> {
      return localVarFp
        .realmRolesByIdRoleIdManagementPermissionsPut(
          realm,
          roleId,
          managementPermissionReference,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update the role
     * @param {string} realm realm name (not id!)
     * @param {string} roleId id of role
     * @param {RoleRepresentation} roleRepresentation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmRolesByIdRoleIdPut(
      realm: string,
      roleId: string,
      roleRepresentation: RoleRepresentation,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .realmRolesByIdRoleIdPut(realm, roleId, roleRepresentation, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RolesByIDApi - object-oriented interface
 * @export
 * @class RolesByIDApi
 * @extends {BaseAPI}
 */
export class RolesByIDApi extends BaseAPI {
  /**
   *
   * @summary Get client-level roles for the client that are in the role’s composite
   * @param {string} realm realm name (not id!)
   * @param {string} roleId
   * @param {string} clientUuid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesByIDApi
   */
  public realmRolesByIdRoleIdCompositesClientsClientUuidGet(
    realm: string,
    roleId: string,
    clientUuid: string,
    options?: AxiosRequestConfig
  ) {
    return RolesByIDApiFp(this.configuration)
      .realmRolesByIdRoleIdCompositesClientsClientUuidGet(
        realm,
        roleId,
        clientUuid,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Remove a set of roles from the role’s composite
   * @param {string} realm realm name (not id!)
   * @param {string} roleId Role id
   * @param {Array<RoleRepresentation>} roleRepresentation A set of roles to be removed
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesByIDApi
   */
  public realmRolesByIdRoleIdCompositesDelete(
    realm: string,
    roleId: string,
    roleRepresentation: Array<RoleRepresentation>,
    options?: AxiosRequestConfig
  ) {
    return RolesByIDApiFp(this.configuration)
      .realmRolesByIdRoleIdCompositesDelete(
        realm,
        roleId,
        roleRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get role’s children   Returns a set of role’s children provided the role is a composite.
   * @param {string} realm realm name (not id!)
   * @param {string} roleId Role id
   * @param {number} [first]
   * @param {number} [max]
   * @param {string} [search]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesByIDApi
   */
  public realmRolesByIdRoleIdCompositesGet(
    realm: string,
    roleId: string,
    first?: number,
    max?: number,
    search?: string,
    options?: AxiosRequestConfig
  ) {
    return RolesByIDApiFp(this.configuration)
      .realmRolesByIdRoleIdCompositesGet(
        realm,
        roleId,
        first,
        max,
        search,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Make the role a composite role by associating some child roles
   * @param {string} realm realm name (not id!)
   * @param {string} roleId Role id
   * @param {Array<RoleRepresentation>} roleRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesByIDApi
   */
  public realmRolesByIdRoleIdCompositesPost(
    realm: string,
    roleId: string,
    roleRepresentation: Array<RoleRepresentation>,
    options?: AxiosRequestConfig
  ) {
    return RolesByIDApiFp(this.configuration)
      .realmRolesByIdRoleIdCompositesPost(
        realm,
        roleId,
        roleRepresentation,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get realm-level roles that are in the role’s composite
   * @param {string} realm realm name (not id!)
   * @param {string} roleId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesByIDApi
   */
  public realmRolesByIdRoleIdCompositesRealmGet(
    realm: string,
    roleId: string,
    options?: AxiosRequestConfig
  ) {
    return RolesByIDApiFp(this.configuration)
      .realmRolesByIdRoleIdCompositesRealmGet(realm, roleId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete the role
   * @param {string} realm realm name (not id!)
   * @param {string} roleId id of role
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesByIDApi
   */
  public realmRolesByIdRoleIdDelete(
    realm: string,
    roleId: string,
    options?: AxiosRequestConfig
  ) {
    return RolesByIDApiFp(this.configuration)
      .realmRolesByIdRoleIdDelete(realm, roleId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a specific role’s representation
   * @param {string} realm realm name (not id!)
   * @param {string} roleId id of role
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesByIDApi
   */
  public realmRolesByIdRoleIdGet(
    realm: string,
    roleId: string,
    options?: AxiosRequestConfig
  ) {
    return RolesByIDApiFp(this.configuration)
      .realmRolesByIdRoleIdGet(realm, roleId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Return object stating whether role Authoirzation permissions have been initialized or not and a reference
   * @param {string} realm realm name (not id!)
   * @param {string} roleId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesByIDApi
   */
  public realmRolesByIdRoleIdManagementPermissionsGet(
    realm: string,
    roleId: string,
    options?: AxiosRequestConfig
  ) {
    return RolesByIDApiFp(this.configuration)
      .realmRolesByIdRoleIdManagementPermissionsGet(realm, roleId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Return object stating whether role Authoirzation permissions have been initialized or not and a reference
   * @param {string} realm realm name (not id!)
   * @param {string} roleId
   * @param {ManagementPermissionReference} managementPermissionReference
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesByIDApi
   */
  public realmRolesByIdRoleIdManagementPermissionsPut(
    realm: string,
    roleId: string,
    managementPermissionReference: ManagementPermissionReference,
    options?: AxiosRequestConfig
  ) {
    return RolesByIDApiFp(this.configuration)
      .realmRolesByIdRoleIdManagementPermissionsPut(
        realm,
        roleId,
        managementPermissionReference,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update the role
   * @param {string} realm realm name (not id!)
   * @param {string} roleId id of role
   * @param {RoleRepresentation} roleRepresentation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolesByIDApi
   */
  public realmRolesByIdRoleIdPut(
    realm: string,
    roleId: string,
    roleRepresentation: RoleRepresentation,
    options?: AxiosRequestConfig
  ) {
    return RolesByIDApiFp(this.configuration)
      .realmRolesByIdRoleIdPut(realm, roleId, roleRepresentation, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
