/* tslint:disable */
/* eslint-disable */
/**
 * Keycloak Admin REST API
 * This is a REST API reference for the Keycloak Admin REST API.
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { CertificateRepresentation } from '../model';
// @ts-ignore
import { KeyStoreConfig } from '../model';
/**
 * ClientAttributeCertificateApi - axios parameter creator
 * @export
 */
export const ClientAttributeCertificateApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Get a keystore file for the client, containing private key and public certificate
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} attr
     * @param {KeyStoreConfig} keyStoreConfig Keystore configuration as JSON
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdCertificatesAttrDownloadPost: async (
      realm: string,
      id: string,
      attr: string,
      keyStoreConfig: KeyStoreConfig,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientsIdCertificatesAttrDownloadPost',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmClientsIdCertificatesAttrDownloadPost', 'id', id);
      // verify required parameter 'attr' is not null or undefined
      assertParamExists(
        'realmClientsIdCertificatesAttrDownloadPost',
        'attr',
        attr
      );
      // verify required parameter 'keyStoreConfig' is not null or undefined
      assertParamExists(
        'realmClientsIdCertificatesAttrDownloadPost',
        'keyStoreConfig',
        keyStoreConfig
      );
      const localVarPath = `/{realm}/clients/{id}/certificates/{attr}/download`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'attr'}}`, encodeURIComponent(String(attr)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        keyStoreConfig,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format.
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} attr
     * @param {KeyStoreConfig} keyStoreConfig Keystore configuration as JSON
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdCertificatesAttrGenerateAndDownloadPost: async (
      realm: string,
      id: string,
      attr: string,
      keyStoreConfig: KeyStoreConfig,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientsIdCertificatesAttrGenerateAndDownloadPost',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'realmClientsIdCertificatesAttrGenerateAndDownloadPost',
        'id',
        id
      );
      // verify required parameter 'attr' is not null or undefined
      assertParamExists(
        'realmClientsIdCertificatesAttrGenerateAndDownloadPost',
        'attr',
        attr
      );
      // verify required parameter 'keyStoreConfig' is not null or undefined
      assertParamExists(
        'realmClientsIdCertificatesAttrGenerateAndDownloadPost',
        'keyStoreConfig',
        keyStoreConfig
      );
      const localVarPath =
        `/{realm}/clients/{id}/certificates/{attr}/generate-and-download`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'id'}}`, encodeURIComponent(String(id)))
          .replace(`{${'attr'}}`, encodeURIComponent(String(attr)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        keyStoreConfig,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Generate a new certificate with new key pair
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} attr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdCertificatesAttrGeneratePost: async (
      realm: string,
      id: string,
      attr: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientsIdCertificatesAttrGeneratePost',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmClientsIdCertificatesAttrGeneratePost', 'id', id);
      // verify required parameter 'attr' is not null or undefined
      assertParamExists(
        'realmClientsIdCertificatesAttrGeneratePost',
        'attr',
        attr
      );
      const localVarPath = `/{realm}/clients/{id}/certificates/{attr}/generate`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'attr'}}`, encodeURIComponent(String(attr)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get key info
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} attr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdCertificatesAttrGet: async (
      realm: string,
      id: string,
      attr: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists('realmClientsIdCertificatesAttrGet', 'realm', realm);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmClientsIdCertificatesAttrGet', 'id', id);
      // verify required parameter 'attr' is not null or undefined
      assertParamExists('realmClientsIdCertificatesAttrGet', 'attr', attr);
      const localVarPath = `/{realm}/clients/{id}/certificates/{attr}`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'attr'}}`, encodeURIComponent(String(attr)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Upload only certificate, not private key
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} attr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdCertificatesAttrUploadCertificatePost: async (
      realm: string,
      id: string,
      attr: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientsIdCertificatesAttrUploadCertificatePost',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists(
        'realmClientsIdCertificatesAttrUploadCertificatePost',
        'id',
        id
      );
      // verify required parameter 'attr' is not null or undefined
      assertParamExists(
        'realmClientsIdCertificatesAttrUploadCertificatePost',
        'attr',
        attr
      );
      const localVarPath =
        `/{realm}/clients/{id}/certificates/{attr}/upload-certificate`
          .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
          .replace(`{${'id'}}`, encodeURIComponent(String(id)))
          .replace(`{${'attr'}}`, encodeURIComponent(String(attr)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Upload certificate and eventually private key
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} attr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdCertificatesAttrUploadPost: async (
      realm: string,
      id: string,
      attr: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'realm' is not null or undefined
      assertParamExists(
        'realmClientsIdCertificatesAttrUploadPost',
        'realm',
        realm
      );
      // verify required parameter 'id' is not null or undefined
      assertParamExists('realmClientsIdCertificatesAttrUploadPost', 'id', id);
      // verify required parameter 'attr' is not null or undefined
      assertParamExists(
        'realmClientsIdCertificatesAttrUploadPost',
        'attr',
        attr
      );
      const localVarPath = `/{realm}/clients/{id}/certificates/{attr}/upload`
        .replace(`{${'realm'}}`, encodeURIComponent(String(realm)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'attr'}}`, encodeURIComponent(String(attr)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication access_token required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ClientAttributeCertificateApi - functional programming interface
 * @export
 */
export const ClientAttributeCertificateApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    ClientAttributeCertificateApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get a keystore file for the client, containing private key and public certificate
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} attr
     * @param {KeyStoreConfig} keyStoreConfig Keystore configuration as JSON
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdCertificatesAttrDownloadPost(
      realm: string,
      id: string,
      attr: string,
      keyStoreConfig: KeyStoreConfig,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdCertificatesAttrDownloadPost(
          realm,
          id,
          attr,
          keyStoreConfig,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format.
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} attr
     * @param {KeyStoreConfig} keyStoreConfig Keystore configuration as JSON
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdCertificatesAttrGenerateAndDownloadPost(
      realm: string,
      id: string,
      attr: string,
      keyStoreConfig: KeyStoreConfig,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdCertificatesAttrGenerateAndDownloadPost(
          realm,
          id,
          attr,
          keyStoreConfig,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Generate a new certificate with new key pair
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} attr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdCertificatesAttrGeneratePost(
      realm: string,
      id: string,
      attr: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CertificateRepresentation>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdCertificatesAttrGeneratePost(
          realm,
          id,
          attr,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get key info
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} attr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdCertificatesAttrGet(
      realm: string,
      id: string,
      attr: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CertificateRepresentation>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdCertificatesAttrGet(
          realm,
          id,
          attr,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Upload only certificate, not private key
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} attr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdCertificatesAttrUploadCertificatePost(
      realm: string,
      id: string,
      attr: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CertificateRepresentation>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdCertificatesAttrUploadCertificatePost(
          realm,
          id,
          attr,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Upload certificate and eventually private key
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} attr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async realmClientsIdCertificatesAttrUploadPost(
      realm: string,
      id: string,
      attr: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CertificateRepresentation>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.realmClientsIdCertificatesAttrUploadPost(
          realm,
          id,
          attr,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ClientAttributeCertificateApi - factory interface
 * @export
 */
export const ClientAttributeCertificateApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ClientAttributeCertificateApiFp(configuration);
  return {
    /**
     *
     * @summary Get a keystore file for the client, containing private key and public certificate
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} attr
     * @param {KeyStoreConfig} keyStoreConfig Keystore configuration as JSON
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdCertificatesAttrDownloadPost(
      realm: string,
      id: string,
      attr: string,
      keyStoreConfig: KeyStoreConfig,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .realmClientsIdCertificatesAttrDownloadPost(
          realm,
          id,
          attr,
          keyStoreConfig,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format.
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} attr
     * @param {KeyStoreConfig} keyStoreConfig Keystore configuration as JSON
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdCertificatesAttrGenerateAndDownloadPost(
      realm: string,
      id: string,
      attr: string,
      keyStoreConfig: KeyStoreConfig,
      options?: any
    ): AxiosPromise<string> {
      return localVarFp
        .realmClientsIdCertificatesAttrGenerateAndDownloadPost(
          realm,
          id,
          attr,
          keyStoreConfig,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Generate a new certificate with new key pair
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} attr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdCertificatesAttrGeneratePost(
      realm: string,
      id: string,
      attr: string,
      options?: any
    ): AxiosPromise<CertificateRepresentation> {
      return localVarFp
        .realmClientsIdCertificatesAttrGeneratePost(realm, id, attr, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get key info
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} attr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdCertificatesAttrGet(
      realm: string,
      id: string,
      attr: string,
      options?: any
    ): AxiosPromise<CertificateRepresentation> {
      return localVarFp
        .realmClientsIdCertificatesAttrGet(realm, id, attr, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Upload only certificate, not private key
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} attr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdCertificatesAttrUploadCertificatePost(
      realm: string,
      id: string,
      attr: string,
      options?: any
    ): AxiosPromise<CertificateRepresentation> {
      return localVarFp
        .realmClientsIdCertificatesAttrUploadCertificatePost(
          realm,
          id,
          attr,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Upload certificate and eventually private key
     * @param {string} realm realm name (not id!)
     * @param {string} id id of client (not client-id)
     * @param {string} attr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    realmClientsIdCertificatesAttrUploadPost(
      realm: string,
      id: string,
      attr: string,
      options?: any
    ): AxiosPromise<CertificateRepresentation> {
      return localVarFp
        .realmClientsIdCertificatesAttrUploadPost(realm, id, attr, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ClientAttributeCertificateApi - object-oriented interface
 * @export
 * @class ClientAttributeCertificateApi
 * @extends {BaseAPI}
 */
export class ClientAttributeCertificateApi extends BaseAPI {
  /**
   *
   * @summary Get a keystore file for the client, containing private key and public certificate
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {string} attr
   * @param {KeyStoreConfig} keyStoreConfig Keystore configuration as JSON
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientAttributeCertificateApi
   */
  public realmClientsIdCertificatesAttrDownloadPost(
    realm: string,
    id: string,
    attr: string,
    keyStoreConfig: KeyStoreConfig,
    options?: AxiosRequestConfig
  ) {
    return ClientAttributeCertificateApiFp(this.configuration)
      .realmClientsIdCertificatesAttrDownloadPost(
        realm,
        id,
        attr,
        keyStoreConfig,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Generate a new keypair and certificate, and get the private key file   Generates a keypair and certificate and serves the private key in a specified keystore format.
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {string} attr
   * @param {KeyStoreConfig} keyStoreConfig Keystore configuration as JSON
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientAttributeCertificateApi
   */
  public realmClientsIdCertificatesAttrGenerateAndDownloadPost(
    realm: string,
    id: string,
    attr: string,
    keyStoreConfig: KeyStoreConfig,
    options?: AxiosRequestConfig
  ) {
    return ClientAttributeCertificateApiFp(this.configuration)
      .realmClientsIdCertificatesAttrGenerateAndDownloadPost(
        realm,
        id,
        attr,
        keyStoreConfig,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Generate a new certificate with new key pair
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {string} attr
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientAttributeCertificateApi
   */
  public realmClientsIdCertificatesAttrGeneratePost(
    realm: string,
    id: string,
    attr: string,
    options?: AxiosRequestConfig
  ) {
    return ClientAttributeCertificateApiFp(this.configuration)
      .realmClientsIdCertificatesAttrGeneratePost(realm, id, attr, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get key info
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {string} attr
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientAttributeCertificateApi
   */
  public realmClientsIdCertificatesAttrGet(
    realm: string,
    id: string,
    attr: string,
    options?: AxiosRequestConfig
  ) {
    return ClientAttributeCertificateApiFp(this.configuration)
      .realmClientsIdCertificatesAttrGet(realm, id, attr, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Upload only certificate, not private key
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {string} attr
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientAttributeCertificateApi
   */
  public realmClientsIdCertificatesAttrUploadCertificatePost(
    realm: string,
    id: string,
    attr: string,
    options?: AxiosRequestConfig
  ) {
    return ClientAttributeCertificateApiFp(this.configuration)
      .realmClientsIdCertificatesAttrUploadCertificatePost(
        realm,
        id,
        attr,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Upload certificate and eventually private key
   * @param {string} realm realm name (not id!)
   * @param {string} id id of client (not client-id)
   * @param {string} attr
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ClientAttributeCertificateApi
   */
  public realmClientsIdCertificatesAttrUploadPost(
    realm: string,
    id: string,
    attr: string,
    options?: AxiosRequestConfig
  ) {
    return ClientAttributeCertificateApiFp(this.configuration)
      .realmClientsIdCertificatesAttrUploadPost(realm, id, attr, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
